syntax = "proto3";
package pb;
import "util.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
// uncomment to enable bench generation
// option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;


// KeystoreAPI provides a keystore management API
service KeystoreAPI {
    // Has is used to check if we have the key in our store
    rpc Has(KeystoreRequest) returns (KeystoreResponse) { };
    // Get is used to return a key from our store
    rpc Get(KeystoreRequest) returns (KeystoreResponse) { };
    // Put is used to store a key in our store
    rpc Put(KeystoreRequest) returns (KeystoreResponse) { };
    // Delete is used to remove a key from our store
    rpc Delete(KeystoreRequest) returns (KeystoreResponse) { };
    // List is used to returns all keyIDs of keys in our store
    rpc List(KeystoreRequest) returns (KeystoreResponse) { };
}


// KeystoreRequest is a message used in any keystore API request
message KeystoreRequest {
    // name of the key the request is for
    // applicable to: has, get, put, delete
    string name = 1;
    // the actual private key
    // applicable to: put
    bytes privateKey = 2;
}

// KeystoreResponse is a responsed to any keystore API request
message KeystoreResponse {
    // a generic status message
    // returned by Has requests
    string status = 1;
    // the actual private key
    // returned by Get requests
    bytes privateKey = 2;
    // names of keys returned by a List request
    repeated string keyNames = 3;
}