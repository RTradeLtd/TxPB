syntax = "proto3";
package pb;
import "util.proto";

// FileAPI provides a gRPC api to upload/download files as UnixFS objects
service FileAPI {
    // UploadFile allows uploading a file as a UnixFS object (equivalent to ipfs add)
    rpc UploadFile(stream UploadRequest) returns  (PutResponse) { };
    // DownloadFile allows downloading a UnixFS object (equivalent to ipfs get)
    rpc DownloadFile(DownloadRequest) returns (stream DownloadResponse) { };
}


// UploadRequest is used to upload data as a UnixFS object
message UploadRequest {
    // blob is a single chunk of data
    Blob blob = 1;
    // options allows setting the optoins for this upload
    UploadOptions options = 2;
}

// UploadOptions allows controlling the parameters of a file upload
message UploadOptions {
    // specifes the multihash function to use
    string multiHash = 1;
    // specifies the dag layout (balanced, tricklet)
    string layout = 2;
    // specifies the chunker type (rabin, default, etc...)
    string chunker = 3;
}

// DownloadRequest is used to download a UnixFS object
// although it can in theory be used with other type of objects
// there may be some undefined behavior
message DownloadRequest {
    // hash is the ipfs hash/cid (content identifier) of the data to download
    string hash = 1;
    // chunkSize specifies the size of chunks to be sent to the client
    // it allows us to efficiently control incoming data amounts which
    // is useful on machines with low-memory
    int32 chunkSize = 2;
}

// DownloadResponse contains the response to a download request
// which allows the gRPC server to stream blobs to the client
message DownloadResponse {
    // blob is a single chunk of data
    Blob blob = 1;
}

// Blob is a chunk of binary data
message Blob {
    // content is the actual binary data contained in this message
    bytes content = 1;
}



enum DIRREQTYPE {
    START = 0;
    FILE = 1;
    // tell client to send next part
    FILE_NEXT_PART = 2;
    // indicates we are sending the next part of a file
    FILE_PART_DATA = 3;
    // indicates this is the last part of the file
    FILE_PART_FINAL = 4;
    NEXT = 5;
    FINISHED = 6;
    FINALIZED = 7;
}
message DirectoryUploadRequest {

}


/*
sequenceDiagram
Client->>Server: UploadDirectory
Server->>Client: START(request type)
loop File Uploads
    Client->>Server: FILE (request type)
    Server->>Client: NEXT (request type)
end
Client->>Server: FINISHED (request type)
Server->>Client: FINALIZED (request type)
sequenceDiagram
Note over Client,Server: this starts the upload
Client->>Server: UploadDirectory
Server->>Client: START
alt big file
  Note over Client,Server: proces large files
  loop upload
      Client->>Server: FILE
      loop process
      Server->>Client: FILE_NEXT_PART
      Client->>Server: FILE_PART_DATA
      end
      Client->>Server: FILE_FINAL_PART
      Server->>Client: NEXT
    end
else small file
  Note over Client,Server: proces large files
  loop upload
    Client->>Server: FILE
    Server->>Client: NEXT
  end
end
Client->>Server: FINISHED
Server->>Client: FINALIZED
*/