syntax = "proto3";
package pb;
import "util.proto";

// FileAPI provides a gRPC api to upload/download files as UnixFS objects
service FileAPI {
    // UploadFile allows uploading a file as a UnixFS object (equivalent to ipfs add)
    rpc UploadFile(stream UploadRequest) returns  (PutResponse) { };
    // DownloadFile allows downloading a UnixFS object (equivalent to ipfs get)
    rpc DownloadFile(DownloadRequest) returns (stream DownloadResponse) { };
    // UploadDirectory is used to upload a directory to IPFS and is equivalent to `ipfs add -r` or `ipfs add -rw`
    rpc UploadDirectory(stream DirectoryUploadRequest) returns (PutResponse) { };
}


// DirectoryUploadRequest is used to create a UnixFS directory object.
// The exact process consists of initiating a stream for a directory uplaod request
// then simultaneously uploading files using the UploadFile call, and then sending
// messages into the stream indicating what hashes to add at what paths, 
// create a directory as an empty unixfs node. Subsequently
// the server side will then fetch the file referenced by hash
// via the dagservice, and then add that to the directory object.
message DirectoryUploadRequest {
    string path = 1;
    string hash = 2;
    bool isDir = 3;
}

// UploadRequest is used to upload data as a UnixFS object
message UploadRequest {
    // blob is a single chunk of data
    Blob blob = 1;
    // options allows setting the optoins for this upload
    UploadOptions options = 2;
}

// UploadOptions allows controlling the parameters of a file upload
message UploadOptions {
    // specifes the multihash function to use
    string multiHash = 1;
    // specifies the dag layout (balanced, tricklet)
    string layout = 2;
    // specifies the chunker type (rabin, default, etc...)
    string chunker = 3;
}

// DownloadRequest is used to download a UnixFS object
// although it can in theory be used with other type of objects
// there may be some undefined behavior
message DownloadRequest {
    // hash is the ipfs hash/cid (content identifier) of the data to download
    string hash = 1;
    // chunkSize specifies the size of chunks to be sent to the client
    // it allows us to efficiently control incoming data amounts which
    // is useful on machines with low-memory
    int32 chunkSize = 2;
    // Range start and end mirrors developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range.
    // If both is none zero, only data within range is requested.
    // The unit of range is alway in bytes.
    // If used, please check the returned range values in blobs to make sure this feature is supported.
    uint64 rangeStart = 3;
    uint64 rangeEnd = 4;
}

// DownloadResponse contains the response to a download request
// which allows the gRPC server to stream blobs to the client
message DownloadResponse {
    // blob is a single chunk of data
    Blob blob = 1;
}

// Blob is a chunk of binary data
message Blob {
    // content is the actual binary data contained in this message
    bytes content = 1;
    // Range start and end mirrors developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range.
    // If both is zero, the blobs streams contents of the file from start to finish.
    // The unit of range is alway in bytes.
    // Currently, DownloadResponse support blob range.
    uint64 rangeStart = 2;
    uint64 rangeEnd = 3;
}
