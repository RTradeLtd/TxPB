syntax = "proto3";
package pb;

// AdminAPI facilitates administrative management of TemporalX via a localhost gRPC API
service AdminAPI {
    // ManageGC is used to manage TemporalX's garbage collection process
    rpc ManageGC(ManageGCRequest) returns (ManageGCResponse) { };
    // RefCount is used to analyze the counter store and pull reference count information
    rpc RefCount(RefCountRequest) returns (RefCountResponse) { };
}

// GCREQTYPE specifies the type of GC management call being performed
enum GCREQTYPE {
    // GC_START is used to start gc
    GC_START = 0;
    // C_STOP is used to stop GC
    GC_STOP = 1;
    // GC_STATUS is used to retrieve gc status
    GC_STATUS = 2;
}

// ManageGCRequest is a message used to control TemporalX garbage collection
message ManageGCRequest {
    // type is the type of gc request being performed
    GCREQTYPE type = 1;
}

// ManageGCResponse is a message used as a response to gc control requests
message ManageGCResponse {
    // status contains a status message
    string status = 1;
}

// REFREQTYPE is used to indicate the type of ref count request being made
enum REFREQTYPE {
    // REF_GET_COUNT is used to get the reference count of a particular cid
    REF_GET_COUNT = 0;
    REF_DELETE = 1;
}

// REFREQOPTS are options for fine-tuning ref count requests
enum REFREQOPTS {
    REF_FORCE = 0;
}

// RefCountRequest is used to analyze the reference
// counter store, and retrieve usage information
message RefCountRequest {
    // cids are optional cids to filter our requests by
    repeated string cids = 1;
    // can be used to apply limits to the number of store requests made, search limits, etc..
    int64 limit = 2;
}

// RefCountResponse is used to return the information
// gathered by a RefCount rpc call.
message RefCountResponse {
    // cids is a mapping of the cid to its reference count
    map<string, int64> cids = 1;
}