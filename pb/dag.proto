syntax = "proto3";
package pb;


service DagAPI {
    // Dag is a unidirectional rpc allowing manipulation of low-level ipld objects
    rpc Dag(DagRequest) returns (DagResponse) { };
    // DagStream is like Dag but with bidirectional streams
    rpc DagStream(stream DagRequest) returns (stream DagResponse);
}

enum DAGREQTYPE {
    PUT = 0;
    GET = 1;
    NEW_LINK = 2;
    ADD_LINKS = 3;
    GET_LINKS = 4;
}

message DagRequest {
    DAGREQTYPE requestType = 1;
    // data that we will be storing
    bytes data = 2;
    // the object encoding type (raw, cbor, protobuf, etc...)
    string objectEncoding = 3;
    // the serialization format (raw, cbor, protobuf, etc...)
    string serializationFormat = 4;
    // the hash function to to use (sha2-256, sha3-512, etc...)
    string hashFunc = 5;
    // the cid version to use (0, 1)
    int64 cidVersion = 6;
    string hash = 7;
    // links are optional hashes to include as links of the node
    // the name is used as the key, while the value of the key is used as the hash
    map<string, string> links = 8;
}

message DagResponse {
    DAGREQTYPE requestType = 1;
    repeated string hashes = 2;
    bytes rawData = 3;
    repeated IPLDLink links = 4;
}

// An IPFS MerkleDAG Link
message IPLDLink {
    // multihash of the target object
    bytes hash = 1;
    // utf string name. should be unique per object
    string name = 2;
    // cumulative size of target object
    uint64 size = 3;
}
  
// An IPFS MerkleDAG Node
message IPLDNode {
    // refs to other objects
    repeated IPLDLink links = 2;
    // opaque user data
    bytes data = 1;
  }
  