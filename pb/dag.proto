syntax = "proto3";
package pb;


service DagAPI {
    // Dag is a unidirectional rpc allowing manipulation of low-level ipld objects
    rpc Dag(DagRequest) returns (DagResponse) { };
    // DagStream is like Dag but with bidirectional streams
    rpc DagStream(stream DagRequest) returns (stream DagResponse);
}

// DAGREQTYPE indicates the particular DagAPI request being performed
enum DAGREQTYPE {
    // DAG_PUT is used to add new IPLD objects
    DAG_PUT = 0;
    // DAG_GET is used to retrieve IPLD object data
    DAG_GET = 1;
    // DAG_NEW_NODE is used to create a new IPLD node object
    DAG_NEW_NODE = 2;
    // DAG_ADD_LINKS is used to add links to an IPLD node object
    DAG_ADD_LINKS = 3;
    // DAG_GET_LINKS is used to retrieve all links contained in an IPLD node object
    DAG_GET_LINKS = 4;
}

// Used to submit a request to Dag or DagStream RPCs
message DagRequest {
    // indicates the request being performed
    // sent by: all request types
    DAGREQTYPE requestType = 1;
    // data that we will be storing
    // sent by: DAG_PUT, DAG_NEW_NODE
    bytes data = 2;
    // the object encoding type (raw, cbor, protobuf, etc...)
    // sent by: DAG_PUT
    string objectEncoding = 3;
    // the serialization format (raw, cbor, protobuf, etc...)
    // sent by: DAG_PUT
    string serializationFormat = 4;
    // the hash function to to use (sha2-256, sha3-512, etc...)
    // sent by: DAG_PUT, DAG_NEW_NODE, DAG_ADD_LINKS
    string hashFunc = 5;
    // the cid version to use (0, 1)
    // sent by: DAG_PUT, DAG_NEW_NODE
    int64 cidVersion = 6;
    // the hash of the object we are processing
    // sent by: DAG_GET, DAG_NEW_NODe, DAG_ADD_LINKS, DAG_GET_LINKS
    string hash = 7;
    // indicates links and their names. key = name, value = link hash
    // sent by: DAG_NEW_NODE, DAG_ADD_LINKS
    map<string, string> links = 8;
}

// Used in response to a Dag or DagStream RPC
message DagResponse {
    // indicates the request being performed
    // sent by: all request types
    DAGREQTYPE requestType = 1;
    // returns the hashes of newly generated IPLD objects
    // sent by: DAG_PUT, DAG_NEW_NODE, DAG_ADD_LINKS, DAG_GET_LINKS
    repeated string hashes = 2;
    // the actual data contained by the IPLD object
    // sent by: DAG_GET
    bytes rawData = 3;
    // the links contained within an IPLD node object
    // sent by: DAG_GET_LINKS
    repeated IPLDLink links = 4;
}

// An IPFS MerkleDAG Link
message IPLDLink {
    // multihash of the target object
    bytes hash = 1;
    // utf string name. should be unique per object
    string name = 2;
    // cumulative size of target object
    uint64 size = 3;
}
  
// An IPFS MerkleDAG Node
message IPLDNode {
    // refs to other objects
    repeated IPLDLink links = 2;
    // opaque user data
    bytes data = 1;
  }
  