syntax = "proto3";
package pb;
import "util.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
// uncomment to enable bench generation
// option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

service P2PAPI {
    rpc Close(CloseRequest) returns (Empty) { };
    rpc Forward(ForwardRequest) returns (Empty) { };
    rpc Listen(ListenRequest) returns (Empty) { };
    rpc Ls(LsRequest) returns (LsResponse) { };
}


// equivalent of ipfs p2p close
message CloseRequest {
    bool all = 1;
    string protocolName = 2;
    string listenAddress = 3;
    string targetAddress = 4;
}

// equivalent of ipfs p2p forward
message ForwardRequest {
    string protocolName  = 1;
    string listenAddress = 2;
    string targetAddress = 3;
}

// equivalent of ipfs p2p listen
message ListenRequest {
    string protocolName = 1;
    string remoteAddress = 2;
}

// equivalent of ipfs p2p ls
message LsRequest {
    bool verbose = 1;
}

message LsResponse {
    repeated string names = 1;
}