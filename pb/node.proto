syntax = "proto3";
package pb;
import "util.proto";

// NodeAPI provide an API to control the underlying custom ipfs node
service NodeAPI {
    rpc ConnectionManagement(ConnectionManagementRequest) returns (ConnectionManagementResponse) { };
    rpc Extras(ExtrasRequest) returns (Empty) { };
    // P2P allows control of generalized p2p streams for tcp/udp based protocol.
    // By using this RPC, we can tunnel traffic similar to ssh tunneling
    // except using libp2p as the transport layer, and and tcp/udp port.
    rpc P2P(P2PRequest) returns (P2PResponse) { };
}

// P2PREQTYPE denotes the particular type of request being used in the p2p rpc
enum P2PREQTYPE {
    // equivalent of ipfs p2p close
    CLOSE = 0;
    // equivalent of ipfs p2p forward
    FORWARD = 1;
    // equivalent of ipfs p2p listen
    LISTEN = 2;
    // equivalent of ipfs p2p ls
    LS = 3;
}

// P2PRequest is a request message holding the details of a particular P2P rpc call
message P2PRequest {
    // indicates the request type
    P2PREQTYPE requestType = 1;  
    // used by: P2PREQTYPE.CLOSE
    bool all = 2;
    // used by: P2PREQTYPE.LS
    bool verbose = 3;
    // used by: P2PREQTYPE.CLOSE, P2PREQTYPE.FORWARD, P2PREQTYPE.LISTEN
    string protocolName = 4;
    // used by: P2PREQTYPE.CLOSE, P2PREQTYPE.FORWARD
    // must be specified as a multiaddr
    string listenAddress = 5;
    // used by: P2PREQTYPE.CLOSE, P2PREQTYPE.FORWARD
    // must be specified as a multiaddr
    string targetAddress = 6;
    // used by: P2PREQTYPE.LISTEN
    // must be specified as a multiaddr
    string remoteAddress = 7;
    // used by: P2PREQTYPE.LISTEN, P2PREQTYPE.FORWARD
    bool allowCustomProtocols = 8;
    // used by: P2PREQTYPE.LISTEN
    bool reportPeerID = 9;
}

// P2PResponse is a response message sent in response to a P2PRequest message
message P2PResponse {
    P2PREQTYPE requestType = 1;
    // sent by: P2PREQTYPE.LISTEN
    repeated string names = 2;
    // sent by: P2PREQTYPE.CLOSE to indicate the number of connections closed
    int32 connsClosed = 3;
    // sent by: P2PREQTYPE.LS and contains all known stream information
    repeated P2PLsInfo streamInfos = 4;
}


// P2PLsInfo contains information about a single p2p stream
message P2PLsInfo {
    string protocolName = 1;
    string listenAddress = 2;
    string targetAddress = 3;
    // indicates whether or not this is a p2p listener or local listener
    bool local = 4;
}

// GetPeersResponse is a response to GetPeers containing a slice of peer IDs
message GetPeersResponse {
    // a slice of peer IDs
    repeated string peerIDs = 1;
}


enum CONNMGMTREQTYPE {
    CM_CONNECT = 0;
    CM_DISCONNECT = 1;
    CM_STATUS = 2;
    CM_GET_PEERS = 3;
}

message ConnectionManagementRequest {
    CONNMGMTREQTYPE requestType = 1;
    repeated string multiAddrs = 2;
    repeated string peerIDs = 3;
}

message ConnectionManagementResponse {
    CONNMGMTREQTYPE requestType = 1;
    map<string, bool> connected = 2;
    // a map of the peer id, and a custom message indicating success, or why there was a failure
    map<string, StatusMessage> status = 3;
    repeated string peerIDs = 4;
    // StatusMessage is used to contain the status information about a particular disconnection attempt
    message StatusMessage {
        // indicate whether or not we actually disconnected
        bool disconnected = 1;
        // if disconnected is false, the reason why it is false
        string reason = 2;
    }
}

enum EXTRASREQTYPE {
    EX_ENABLE = 0;
    EX_DISABLE = 1;
}

// EXTRASTYPE denotes a particular extras type
enum EXTRASTYPE {
    // IDENTIFY is the identify service
    IDENTIFY = 0;
    // PUBSUB is the libp2p pubsub system
    PUBSUB = 1;
    // DISCOVERY is a libp2p discovery service
    DISCOVERY = 2;
    // MDNS is used to discover libp2p hosts over mdns
    MDNS = 3;
}

message ExtrasRequest {
    EXTRASREQTYPE requestType = 1;
    EXTRASTYPE extrasFeature = 2;
}