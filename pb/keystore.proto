syntax = "proto3";
package pb;

// KeystoreAPI provides a keystore management API
service KeystoreAPI {
    // KeystoreHas is used to check if we have the key in our store
    rpc KeystoreHas(KeystoreRequest) returns (KeystoreResponse) { };
    // KeystoreGet is used to return a key from our store
    rpc KeystoreGet(KeystoreRequest) returns (KeystoreResponse) { };
    // KeystorePut is used to store a key in our store
    rpc KeystorePut(KeystoreRequest) returns (KeystoreResponse) { };
    // KeystoreDelete is used to remove a key from our store
    rpc KeystoreDelete(KeystoreRequest) returns (KeystoreResponse) { };
    // KeystoreList is used to returns all keyIDs of keys in our store
    rpc KeystoreList(KeystoreRequest) returns (KeystoreResponse) { };
}


// KeystoreRequest is a message used in any keystore API request
message KeystoreRequest {
    // name of the key the request is for
    // applicable to: has, get, put, delete
    string name = 1;
    // the actual private key
    // applicable to: put
    bytes privateKey = 2;
}

// KeystoreResponse is a responsed to any keystore API request
message KeystoreResponse {
    // a generic status message
    // returned by Has requests, and may or may not
    // be returned by other requests
    string status = 1;
    // the actual private key
    // returned by Get requests
    bytes privateKey = 2;
    // names of keys returned by a List request
    repeated string keyNames = 3;
}