// source: node.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var util_pb = require('./util_pb.js');
goog.object.extend(proto, util_pb);
goog.exportSymbol('proto.pb.CONNMGMTREQTYPE', null, global);
goog.exportSymbol('proto.pb.ConnectionManagementRequest', null, global);
goog.exportSymbol('proto.pb.ConnectionManagementResponse', null, global);
goog.exportSymbol('proto.pb.ConnectionManagementResponse.StatusMessage', null, global);
goog.exportSymbol('proto.pb.EXTRASREQTYPE', null, global);
goog.exportSymbol('proto.pb.EXTRASTYPE', null, global);
goog.exportSymbol('proto.pb.ExtrasRequest', null, global);
goog.exportSymbol('proto.pb.GetPeersResponse', null, global);
goog.exportSymbol('proto.pb.P2PLsInfo', null, global);
goog.exportSymbol('proto.pb.P2PREQTYPE', null, global);
goog.exportSymbol('proto.pb.P2PRequest', null, global);
goog.exportSymbol('proto.pb.P2PResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.P2PRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.P2PRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.P2PRequest.displayName = 'proto.pb.P2PRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.P2PResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.P2PResponse.repeatedFields_, null);
};
goog.inherits(proto.pb.P2PResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.P2PResponse.displayName = 'proto.pb.P2PResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.P2PLsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.P2PLsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.P2PLsInfo.displayName = 'proto.pb.P2PLsInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GetPeersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.GetPeersResponse.repeatedFields_, null);
};
goog.inherits(proto.pb.GetPeersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GetPeersResponse.displayName = 'proto.pb.GetPeersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ConnectionManagementRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ConnectionManagementRequest.repeatedFields_, null);
};
goog.inherits(proto.pb.ConnectionManagementRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ConnectionManagementRequest.displayName = 'proto.pb.ConnectionManagementRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ConnectionManagementResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ConnectionManagementResponse.repeatedFields_, null);
};
goog.inherits(proto.pb.ConnectionManagementResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ConnectionManagementResponse.displayName = 'proto.pb.ConnectionManagementResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ConnectionManagementResponse.StatusMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ConnectionManagementResponse.StatusMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ConnectionManagementResponse.StatusMessage.displayName = 'proto.pb.ConnectionManagementResponse.StatusMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ExtrasRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ExtrasRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ExtrasRequest.displayName = 'proto.pb.ExtrasRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.P2PRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.P2PRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.P2PRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.P2PRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    all: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    verbose: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    protocolname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    listenaddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    targetaddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    remoteaddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
    allowcustomprotocols: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    reportpeerid: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.P2PRequest}
 */
proto.pb.P2PRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.P2PRequest;
  return proto.pb.P2PRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.P2PRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.P2PRequest}
 */
proto.pb.P2PRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.P2PREQTYPE} */ (reader.readEnum());
      msg.setRequesttype(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAll(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerbose(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocolname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setListenaddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetaddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteaddress(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowcustomprotocols(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReportpeerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.P2PRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.P2PRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.P2PRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.P2PRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesttype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAll();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getVerbose();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getProtocolname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getListenaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTargetaddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRemoteaddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAllowcustomprotocols();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getReportpeerid();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional P2PREQTYPE requestType = 1;
 * @return {!proto.pb.P2PREQTYPE}
 */
proto.pb.P2PRequest.prototype.getRequesttype = function() {
  return /** @type {!proto.pb.P2PREQTYPE} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.P2PREQTYPE} value
 * @return {!proto.pb.P2PRequest} returns this
 */
proto.pb.P2PRequest.prototype.setRequesttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool all = 2;
 * @return {boolean}
 */
proto.pb.P2PRequest.prototype.getAll = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.P2PRequest} returns this
 */
proto.pb.P2PRequest.prototype.setAll = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool verbose = 3;
 * @return {boolean}
 */
proto.pb.P2PRequest.prototype.getVerbose = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.P2PRequest} returns this
 */
proto.pb.P2PRequest.prototype.setVerbose = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string protocolName = 4;
 * @return {string}
 */
proto.pb.P2PRequest.prototype.getProtocolname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.P2PRequest} returns this
 */
proto.pb.P2PRequest.prototype.setProtocolname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string listenAddress = 5;
 * @return {string}
 */
proto.pb.P2PRequest.prototype.getListenaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.P2PRequest} returns this
 */
proto.pb.P2PRequest.prototype.setListenaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string targetAddress = 6;
 * @return {string}
 */
proto.pb.P2PRequest.prototype.getTargetaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.P2PRequest} returns this
 */
proto.pb.P2PRequest.prototype.setTargetaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string remoteAddress = 7;
 * @return {string}
 */
proto.pb.P2PRequest.prototype.getRemoteaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.P2PRequest} returns this
 */
proto.pb.P2PRequest.prototype.setRemoteaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool allowCustomProtocols = 8;
 * @return {boolean}
 */
proto.pb.P2PRequest.prototype.getAllowcustomprotocols = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.P2PRequest} returns this
 */
proto.pb.P2PRequest.prototype.setAllowcustomprotocols = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool reportPeerID = 9;
 * @return {boolean}
 */
proto.pb.P2PRequest.prototype.getReportpeerid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.P2PRequest} returns this
 */
proto.pb.P2PRequest.prototype.setReportpeerid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.P2PResponse.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.P2PResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.P2PResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.P2PResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.P2PResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    namesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    connsclosed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    streaminfosList: jspb.Message.toObjectList(msg.getStreaminfosList(),
    proto.pb.P2PLsInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.P2PResponse}
 */
proto.pb.P2PResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.P2PResponse;
  return proto.pb.P2PResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.P2PResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.P2PResponse}
 */
proto.pb.P2PResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.P2PREQTYPE} */ (reader.readEnum());
      msg.setRequesttype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConnsclosed(value);
      break;
    case 4:
      var value = new proto.pb.P2PLsInfo;
      reader.readMessage(value,proto.pb.P2PLsInfo.deserializeBinaryFromReader);
      msg.addStreaminfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.P2PResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.P2PResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.P2PResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.P2PResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesttype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getConnsclosed();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStreaminfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pb.P2PLsInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional P2PREQTYPE requestType = 1;
 * @return {!proto.pb.P2PREQTYPE}
 */
proto.pb.P2PResponse.prototype.getRequesttype = function() {
  return /** @type {!proto.pb.P2PREQTYPE} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.P2PREQTYPE} value
 * @return {!proto.pb.P2PResponse} returns this
 */
proto.pb.P2PResponse.prototype.setRequesttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string names = 2;
 * @return {!Array<string>}
 */
proto.pb.P2PResponse.prototype.getNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.P2PResponse} returns this
 */
proto.pb.P2PResponse.prototype.setNamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.P2PResponse} returns this
 */
proto.pb.P2PResponse.prototype.addNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.P2PResponse} returns this
 */
proto.pb.P2PResponse.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};


/**
 * optional int32 connsClosed = 3;
 * @return {number}
 */
proto.pb.P2PResponse.prototype.getConnsclosed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.P2PResponse} returns this
 */
proto.pb.P2PResponse.prototype.setConnsclosed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated P2PLsInfo streamInfos = 4;
 * @return {!Array<!proto.pb.P2PLsInfo>}
 */
proto.pb.P2PResponse.prototype.getStreaminfosList = function() {
  return /** @type{!Array<!proto.pb.P2PLsInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.P2PLsInfo, 4));
};


/**
 * @param {!Array<!proto.pb.P2PLsInfo>} value
 * @return {!proto.pb.P2PResponse} returns this
*/
proto.pb.P2PResponse.prototype.setStreaminfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.P2PLsInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.P2PLsInfo}
 */
proto.pb.P2PResponse.prototype.addStreaminfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.P2PLsInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.P2PResponse} returns this
 */
proto.pb.P2PResponse.prototype.clearStreaminfosList = function() {
  return this.setStreaminfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.P2PLsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.P2PLsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.P2PLsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.P2PLsInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    listenaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetaddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    local: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.P2PLsInfo}
 */
proto.pb.P2PLsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.P2PLsInfo;
  return proto.pb.P2PLsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.P2PLsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.P2PLsInfo}
 */
proto.pb.P2PLsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocolname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setListenaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetaddress(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.P2PLsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.P2PLsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.P2PLsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.P2PLsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocolname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getListenaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocal();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string protocolName = 1;
 * @return {string}
 */
proto.pb.P2PLsInfo.prototype.getProtocolname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.P2PLsInfo} returns this
 */
proto.pb.P2PLsInfo.prototype.setProtocolname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string listenAddress = 2;
 * @return {string}
 */
proto.pb.P2PLsInfo.prototype.getListenaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.P2PLsInfo} returns this
 */
proto.pb.P2PLsInfo.prototype.setListenaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string targetAddress = 3;
 * @return {string}
 */
proto.pb.P2PLsInfo.prototype.getTargetaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.P2PLsInfo} returns this
 */
proto.pb.P2PLsInfo.prototype.setTargetaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool local = 4;
 * @return {boolean}
 */
proto.pb.P2PLsInfo.prototype.getLocal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.P2PLsInfo} returns this
 */
proto.pb.P2PLsInfo.prototype.setLocal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.GetPeersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GetPeersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GetPeersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GetPeersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GetPeersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    peeridsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GetPeersResponse}
 */
proto.pb.GetPeersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GetPeersResponse;
  return proto.pb.GetPeersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GetPeersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GetPeersResponse}
 */
proto.pb.GetPeersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPeerids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GetPeersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GetPeersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GetPeersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GetPeersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeeridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string peerIDs = 1;
 * @return {!Array<string>}
 */
proto.pb.GetPeersResponse.prototype.getPeeridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.GetPeersResponse} returns this
 */
proto.pb.GetPeersResponse.prototype.setPeeridsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.GetPeersResponse} returns this
 */
proto.pb.GetPeersResponse.prototype.addPeerids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.GetPeersResponse} returns this
 */
proto.pb.GetPeersResponse.prototype.clearPeeridsList = function() {
  return this.setPeeridsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ConnectionManagementRequest.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ConnectionManagementRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ConnectionManagementRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ConnectionManagementRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ConnectionManagementRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    multiaddrsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    peeridsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ConnectionManagementRequest}
 */
proto.pb.ConnectionManagementRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ConnectionManagementRequest;
  return proto.pb.ConnectionManagementRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ConnectionManagementRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ConnectionManagementRequest}
 */
proto.pb.ConnectionManagementRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.CONNMGMTREQTYPE} */ (reader.readEnum());
      msg.setRequesttype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addMultiaddrs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPeerids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ConnectionManagementRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ConnectionManagementRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ConnectionManagementRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ConnectionManagementRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesttype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMultiaddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPeeridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional CONNMGMTREQTYPE requestType = 1;
 * @return {!proto.pb.CONNMGMTREQTYPE}
 */
proto.pb.ConnectionManagementRequest.prototype.getRequesttype = function() {
  return /** @type {!proto.pb.CONNMGMTREQTYPE} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.CONNMGMTREQTYPE} value
 * @return {!proto.pb.ConnectionManagementRequest} returns this
 */
proto.pb.ConnectionManagementRequest.prototype.setRequesttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string multiAddrs = 2;
 * @return {!Array<string>}
 */
proto.pb.ConnectionManagementRequest.prototype.getMultiaddrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.ConnectionManagementRequest} returns this
 */
proto.pb.ConnectionManagementRequest.prototype.setMultiaddrsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.ConnectionManagementRequest} returns this
 */
proto.pb.ConnectionManagementRequest.prototype.addMultiaddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.ConnectionManagementRequest} returns this
 */
proto.pb.ConnectionManagementRequest.prototype.clearMultiaddrsList = function() {
  return this.setMultiaddrsList([]);
};


/**
 * repeated string peerIDs = 3;
 * @return {!Array<string>}
 */
proto.pb.ConnectionManagementRequest.prototype.getPeeridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.ConnectionManagementRequest} returns this
 */
proto.pb.ConnectionManagementRequest.prototype.setPeeridsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.ConnectionManagementRequest} returns this
 */
proto.pb.ConnectionManagementRequest.prototype.addPeerids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.ConnectionManagementRequest} returns this
 */
proto.pb.ConnectionManagementRequest.prototype.clearPeeridsList = function() {
  return this.setPeeridsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ConnectionManagementResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ConnectionManagementResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ConnectionManagementResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ConnectionManagementResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ConnectionManagementResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connectedMap: (f = msg.getConnectedMap()) ? f.toObject(includeInstance, undefined) : [],
    statusMap: (f = msg.getStatusMap()) ? f.toObject(includeInstance, proto.pb.ConnectionManagementResponse.StatusMessage.toObject) : [],
    peeridsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ConnectionManagementResponse}
 */
proto.pb.ConnectionManagementResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ConnectionManagementResponse;
  return proto.pb.ConnectionManagementResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ConnectionManagementResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ConnectionManagementResponse}
 */
proto.pb.ConnectionManagementResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.CONNMGMTREQTYPE} */ (reader.readEnum());
      msg.setRequesttype(value);
      break;
    case 2:
      var value = msg.getConnectedMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    case 3:
      var value = msg.getStatusMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.pb.ConnectionManagementResponse.StatusMessage.deserializeBinaryFromReader, "", new proto.pb.ConnectionManagementResponse.StatusMessage());
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addPeerids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ConnectionManagementResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ConnectionManagementResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ConnectionManagementResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ConnectionManagementResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesttype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConnectedMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getStatusMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.pb.ConnectionManagementResponse.StatusMessage.serializeBinaryToWriter);
  }
  f = message.getPeeridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ConnectionManagementResponse.StatusMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ConnectionManagementResponse.StatusMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ConnectionManagementResponse.StatusMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ConnectionManagementResponse.StatusMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    disconnected: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    reason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ConnectionManagementResponse.StatusMessage}
 */
proto.pb.ConnectionManagementResponse.StatusMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ConnectionManagementResponse.StatusMessage;
  return proto.pb.ConnectionManagementResponse.StatusMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ConnectionManagementResponse.StatusMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ConnectionManagementResponse.StatusMessage}
 */
proto.pb.ConnectionManagementResponse.StatusMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisconnected(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ConnectionManagementResponse.StatusMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ConnectionManagementResponse.StatusMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ConnectionManagementResponse.StatusMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ConnectionManagementResponse.StatusMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisconnected();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool disconnected = 1;
 * @return {boolean}
 */
proto.pb.ConnectionManagementResponse.StatusMessage.prototype.getDisconnected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.ConnectionManagementResponse.StatusMessage} returns this
 */
proto.pb.ConnectionManagementResponse.StatusMessage.prototype.setDisconnected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.pb.ConnectionManagementResponse.StatusMessage.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ConnectionManagementResponse.StatusMessage} returns this
 */
proto.pb.ConnectionManagementResponse.StatusMessage.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CONNMGMTREQTYPE requestType = 1;
 * @return {!proto.pb.CONNMGMTREQTYPE}
 */
proto.pb.ConnectionManagementResponse.prototype.getRequesttype = function() {
  return /** @type {!proto.pb.CONNMGMTREQTYPE} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.CONNMGMTREQTYPE} value
 * @return {!proto.pb.ConnectionManagementResponse} returns this
 */
proto.pb.ConnectionManagementResponse.prototype.setRequesttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * map<string, bool> connected = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.pb.ConnectionManagementResponse.prototype.getConnectedMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pb.ConnectionManagementResponse} returns this
 */
proto.pb.ConnectionManagementResponse.prototype.clearConnectedMap = function() {
  this.getConnectedMap().clear();
  return this;};


/**
 * map<string, StatusMessage> status = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.pb.ConnectionManagementResponse.StatusMessage>}
 */
proto.pb.ConnectionManagementResponse.prototype.getStatusMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.pb.ConnectionManagementResponse.StatusMessage>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.pb.ConnectionManagementResponse.StatusMessage));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pb.ConnectionManagementResponse} returns this
 */
proto.pb.ConnectionManagementResponse.prototype.clearStatusMap = function() {
  this.getStatusMap().clear();
  return this;};


/**
 * repeated string peerIDs = 4;
 * @return {!Array<string>}
 */
proto.pb.ConnectionManagementResponse.prototype.getPeeridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.ConnectionManagementResponse} returns this
 */
proto.pb.ConnectionManagementResponse.prototype.setPeeridsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.ConnectionManagementResponse} returns this
 */
proto.pb.ConnectionManagementResponse.prototype.addPeerids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.ConnectionManagementResponse} returns this
 */
proto.pb.ConnectionManagementResponse.prototype.clearPeeridsList = function() {
  return this.setPeeridsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ExtrasRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ExtrasRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ExtrasRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ExtrasRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    extrasfeature: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ExtrasRequest}
 */
proto.pb.ExtrasRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ExtrasRequest;
  return proto.pb.ExtrasRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ExtrasRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ExtrasRequest}
 */
proto.pb.ExtrasRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.EXTRASREQTYPE} */ (reader.readEnum());
      msg.setRequesttype(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.EXTRASTYPE} */ (reader.readEnum());
      msg.setExtrasfeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ExtrasRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ExtrasRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ExtrasRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ExtrasRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesttype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getExtrasfeature();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional EXTRASREQTYPE requestType = 1;
 * @return {!proto.pb.EXTRASREQTYPE}
 */
proto.pb.ExtrasRequest.prototype.getRequesttype = function() {
  return /** @type {!proto.pb.EXTRASREQTYPE} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.EXTRASREQTYPE} value
 * @return {!proto.pb.ExtrasRequest} returns this
 */
proto.pb.ExtrasRequest.prototype.setRequesttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EXTRASTYPE extrasFeature = 2;
 * @return {!proto.pb.EXTRASTYPE}
 */
proto.pb.ExtrasRequest.prototype.getExtrasfeature = function() {
  return /** @type {!proto.pb.EXTRASTYPE} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.EXTRASTYPE} value
 * @return {!proto.pb.ExtrasRequest} returns this
 */
proto.pb.ExtrasRequest.prototype.setExtrasfeature = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.pb.P2PREQTYPE = {
  CLOSE: 0,
  FORWARD: 1,
  LISTEN: 2,
  LS: 3
};

/**
 * @enum {number}
 */
proto.pb.CONNMGMTREQTYPE = {
  CM_CONNECT: 0,
  CM_DISCONNECT: 1,
  CM_STATUS: 2,
  CM_GET_PEERS: 3
};

/**
 * @enum {number}
 */
proto.pb.EXTRASREQTYPE = {
  EX_ENABLE: 0,
  EX_DISABLE: 1
};

/**
 * @enum {number}
 */
proto.pb.EXTRASTYPE = {
  IDENTIFY: 0,
  PUBSUB: 1,
  DISCOVERY: 2,
  MDNS: 3
};

goog.object.extend(exports, proto.pb);
