// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package pb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// P2PREQTYPE denotes the particular type of request being used in the p2p rpc
type P2PREQTYPE int32

const (
	// equivalent of ipfs p2p close
	P2PREQTYPE_CLOSE P2PREQTYPE = 0
	// equivalent of ipfs p2p forward
	P2PREQTYPE_FORWARD P2PREQTYPE = 1
	// equivalent of ipfs p2p listen
	P2PREQTYPE_LISTEN P2PREQTYPE = 2
	// equivalent of ipfs p2p ls
	P2PREQTYPE_LS P2PREQTYPE = 3
)

var P2PREQTYPE_name = map[int32]string{
	0: "CLOSE",
	1: "FORWARD",
	2: "LISTEN",
	3: "LS",
}

var P2PREQTYPE_value = map[string]int32{
	"CLOSE":   0,
	"FORWARD": 1,
	"LISTEN":  2,
	"LS":      3,
}

func (x P2PREQTYPE) String() string {
	return proto.EnumName(P2PREQTYPE_name, int32(x))
}

func (P2PREQTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}

// EXTRASTYPE denotes a particular extras type
type EXTRASTYPE int32

const (
	// IDENTIFY is the identify service
	EXTRASTYPE_IDENTIFY EXTRASTYPE = 0
	// PUBSUB is the libp2p pubsub system
	EXTRASTYPE_PUBSUB EXTRASTYPE = 1
	// DISCOVERY is a libp2p discovery service
	EXTRASTYPE_DISCOVERY EXTRASTYPE = 2
)

var EXTRASTYPE_name = map[int32]string{
	0: "IDENTIFY",
	1: "PUBSUB",
	2: "DISCOVERY",
}

var EXTRASTYPE_value = map[string]int32{
	"IDENTIFY":  0,
	"PUBSUB":    1,
	"DISCOVERY": 2,
}

func (x EXTRASTYPE) String() string {
	return proto.EnumName(EXTRASTYPE_name, int32(x))
}

func (EXTRASTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}

// P2PRequest is a request message holding the details of a particular P2P rpc call
type P2PRequest struct {
	// indicates the reuqest type
	RequestType P2PREQTYPE `protobuf:"varint,1,opt,name=requestType,proto3,enum=pb.P2PREQTYPE" json:"requestType,omitempty"`
	// used by: P2PREQTYPE.CLOSE
	All bool `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
	// used by: P2PREQTYPE.LS
	Verbose bool `protobuf:"varint,3,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// used by: P2PREQTYPE.CLOSE, P2PREQTYPE.FORWARD, P2PREQTYPE.LISTEN
	ProtocolName string `protobuf:"bytes,4,opt,name=protocolName,proto3" json:"protocolName,omitempty"`
	// used by: P2PREQTYPE.CLOSE, P2PREQTYPE.FORWARD
	ListenAddress string `protobuf:"bytes,5,opt,name=listenAddress,proto3" json:"listenAddress,omitempty"`
	// used by: P2PREQTYPE.CLOSE, P2PREQTYPE.FORWARD
	TargetAddress string `protobuf:"bytes,6,opt,name=targetAddress,proto3" json:"targetAddress,omitempty"`
	// used by: P2PREQTYPE.LISTEN
	RemoteAddress string `protobuf:"bytes,7,opt,name=remoteAddress,proto3" json:"remoteAddress,omitempty"`
}

func (m *P2PRequest) Reset()      { *m = P2PRequest{} }
func (*P2PRequest) ProtoMessage() {}
func (*P2PRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}
func (m *P2PRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *P2PRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_P2PRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *P2PRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PRequest.Merge(m, src)
}
func (m *P2PRequest) XXX_Size() int {
	return m.Size()
}
func (m *P2PRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PRequest.DiscardUnknown(m)
}

var xxx_messageInfo_P2PRequest proto.InternalMessageInfo

func (m *P2PRequest) GetRequestType() P2PREQTYPE {
	if m != nil {
		return m.RequestType
	}
	return P2PREQTYPE_CLOSE
}

func (m *P2PRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *P2PRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *P2PRequest) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *P2PRequest) GetListenAddress() string {
	if m != nil {
		return m.ListenAddress
	}
	return ""
}

func (m *P2PRequest) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

func (m *P2PRequest) GetRemoteAddress() string {
	if m != nil {
		return m.RemoteAddress
	}
	return ""
}

// P2PResponse is a response message sent in response to a P2PRequest message
type P2PResponse struct {
	RequestType P2PREQTYPE `protobuf:"varint,1,opt,name=requestType,proto3,enum=pb.P2PREQTYPE" json:"requestType,omitempty"`
	// sent by: P2PREQTYPE.LISTEN
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *P2PResponse) Reset()      { *m = P2PResponse{} }
func (*P2PResponse) ProtoMessage() {}
func (*P2PResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}
func (m *P2PResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *P2PResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_P2PResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *P2PResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PResponse.Merge(m, src)
}
func (m *P2PResponse) XXX_Size() int {
	return m.Size()
}
func (m *P2PResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PResponse.DiscardUnknown(m)
}

var xxx_messageInfo_P2PResponse proto.InternalMessageInfo

func (m *P2PResponse) GetRequestType() P2PREQTYPE {
	if m != nil {
		return m.RequestType
	}
	return P2PREQTYPE_CLOSE
}

func (m *P2PResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// GetPeersResponse is a response to GetPeers containing a slice of peer IDs
type GetPeersResponse struct {
	// a slice of peer IDs
	PeerIDs []string `protobuf:"bytes,1,rep,name=peerIDs,proto3" json:"peerIDs,omitempty"`
}

func (m *GetPeersResponse) Reset()      { *m = GetPeersResponse{} }
func (*GetPeersResponse) ProtoMessage() {}
func (*GetPeersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{2}
}
func (m *GetPeersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPeersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPeersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPeersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPeersResponse.Merge(m, src)
}
func (m *GetPeersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPeersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPeersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPeersResponse proto.InternalMessageInfo

func (m *GetPeersResponse) GetPeerIDs() []string {
	if m != nil {
		return m.PeerIDs
	}
	return nil
}

// ConnectRequest is used to connect to libp2p peers
type ConnectRequest struct {
	// a slice of all multiaddrs we want to connect to
	MultiAddrs []string `protobuf:"bytes,1,rep,name=multiAddrs,proto3" json:"multiAddrs,omitempty"`
}

func (m *ConnectRequest) Reset()      { *m = ConnectRequest{} }
func (*ConnectRequest) ProtoMessage() {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{3}
}
func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetMultiAddrs() []string {
	if m != nil {
		return m.MultiAddrs
	}
	return nil
}

// IsConnectedRequest is used check whether or not we are currently peered with these peers
type IsConnectedRequest struct {
	// a slice of the peer IDs to examine
	PeerIDs []string `protobuf:"bytes,1,rep,name=peerIDs,proto3" json:"peerIDs,omitempty"`
}

func (m *IsConnectedRequest) Reset()      { *m = IsConnectedRequest{} }
func (*IsConnectedRequest) ProtoMessage() {}
func (*IsConnectedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{4}
}
func (m *IsConnectedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsConnectedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsConnectedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsConnectedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsConnectedRequest.Merge(m, src)
}
func (m *IsConnectedRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsConnectedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsConnectedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsConnectedRequest proto.InternalMessageInfo

func (m *IsConnectedRequest) GetPeerIDs() []string {
	if m != nil {
		return m.PeerIDs
	}
	return nil
}

// IsConnectedResponse is a response to an IsConnectedRequest request
type IsConnectedResponse struct {
	// a map of the peer ID and a boolean indicating if we are connected with them
	Connected map[string]bool `protobuf:"bytes,1,rep,name=connected,proto3" json:"connected,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *IsConnectedResponse) Reset()      { *m = IsConnectedResponse{} }
func (*IsConnectedResponse) ProtoMessage() {}
func (*IsConnectedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{5}
}
func (m *IsConnectedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsConnectedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsConnectedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsConnectedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsConnectedResponse.Merge(m, src)
}
func (m *IsConnectedResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsConnectedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsConnectedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsConnectedResponse proto.InternalMessageInfo

func (m *IsConnectedResponse) GetConnected() map[string]bool {
	if m != nil {
		return m.Connected
	}
	return nil
}

// DisconnectRequest is used to disconnect a connection to a libp2p peer
type DisconnectRequest struct {
	// a slice of the peer IDs to disconnect from
	PeerIDs []string `protobuf:"bytes,1,rep,name=peerIDs,proto3" json:"peerIDs,omitempty"`
}

func (m *DisconnectRequest) Reset()      { *m = DisconnectRequest{} }
func (*DisconnectRequest) ProtoMessage() {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{6}
}
func (m *DisconnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisconnectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectRequest.Merge(m, src)
}
func (m *DisconnectRequest) XXX_Size() int {
	return m.Size()
}
func (m *DisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectRequest proto.InternalMessageInfo

func (m *DisconnectRequest) GetPeerIDs() []string {
	if m != nil {
		return m.PeerIDs
	}
	return nil
}

// DisconnectResponse is a response to a disconnect request
type DisconnectResponse struct {
	// a map of the peer id, and a custom message indicating success, or why there was a failure
	Status map[string]*DisconnectResponse_StatusMessage `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DisconnectResponse) Reset()      { *m = DisconnectResponse{} }
func (*DisconnectResponse) ProtoMessage() {}
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{7}
}
func (m *DisconnectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisconnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisconnectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisconnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectResponse.Merge(m, src)
}
func (m *DisconnectResponse) XXX_Size() int {
	return m.Size()
}
func (m *DisconnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectResponse proto.InternalMessageInfo

func (m *DisconnectResponse) GetStatus() map[string]*DisconnectResponse_StatusMessage {
	if m != nil {
		return m.Status
	}
	return nil
}

// StatusMessage is used to contain the status information about a particular disconnection attempt
type DisconnectResponse_StatusMessage struct {
	// indicate whether or not we actually disconnected
	Disconnected bool `protobuf:"varint,1,opt,name=disconnected,proto3" json:"disconnected,omitempty"`
	// if disconnected is false, the reason why it is false
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *DisconnectResponse_StatusMessage) Reset()      { *m = DisconnectResponse_StatusMessage{} }
func (*DisconnectResponse_StatusMessage) ProtoMessage() {}
func (*DisconnectResponse_StatusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{7, 1}
}
func (m *DisconnectResponse_StatusMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisconnectResponse_StatusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisconnectResponse_StatusMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisconnectResponse_StatusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectResponse_StatusMessage.Merge(m, src)
}
func (m *DisconnectResponse_StatusMessage) XXX_Size() int {
	return m.Size()
}
func (m *DisconnectResponse_StatusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectResponse_StatusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectResponse_StatusMessage proto.InternalMessageInfo

func (m *DisconnectResponse_StatusMessage) GetDisconnected() bool {
	if m != nil {
		return m.Disconnected
	}
	return false
}

func (m *DisconnectResponse_StatusMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// EnableExtrasRequest is used to enable a particular extras feature
type EnableExtrasRequest struct {
	// extrasFeature denotes the particular extras functionality to enable
	ExtrasFeature EXTRASTYPE `protobuf:"varint,1,opt,name=extrasFeature,proto3,enum=pb.EXTRASTYPE" json:"extrasFeature,omitempty"`
}

func (m *EnableExtrasRequest) Reset()      { *m = EnableExtrasRequest{} }
func (*EnableExtrasRequest) ProtoMessage() {}
func (*EnableExtrasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{8}
}
func (m *EnableExtrasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableExtrasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableExtrasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableExtrasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableExtrasRequest.Merge(m, src)
}
func (m *EnableExtrasRequest) XXX_Size() int {
	return m.Size()
}
func (m *EnableExtrasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableExtrasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableExtrasRequest proto.InternalMessageInfo

func (m *EnableExtrasRequest) GetExtrasFeature() EXTRASTYPE {
	if m != nil {
		return m.ExtrasFeature
	}
	return EXTRASTYPE_IDENTIFY
}

// DisableExtrasRequest is used to disable a particular extras feature
type DisableExtrasRequest struct {
	// extrasFeature denotes the particular extras functionality to disable
	ExtrasFeature EXTRASTYPE `protobuf:"varint,1,opt,name=extrasFeature,proto3,enum=pb.EXTRASTYPE" json:"extrasFeature,omitempty"`
}

func (m *DisableExtrasRequest) Reset()      { *m = DisableExtrasRequest{} }
func (*DisableExtrasRequest) ProtoMessage() {}
func (*DisableExtrasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{9}
}
func (m *DisableExtrasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisableExtrasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisableExtrasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisableExtrasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableExtrasRequest.Merge(m, src)
}
func (m *DisableExtrasRequest) XXX_Size() int {
	return m.Size()
}
func (m *DisableExtrasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableExtrasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisableExtrasRequest proto.InternalMessageInfo

func (m *DisableExtrasRequest) GetExtrasFeature() EXTRASTYPE {
	if m != nil {
		return m.ExtrasFeature
	}
	return EXTRASTYPE_IDENTIFY
}

func init() {
	proto.RegisterEnum("pb.P2PREQTYPE", P2PREQTYPE_name, P2PREQTYPE_value)
	proto.RegisterEnum("pb.EXTRASTYPE", EXTRASTYPE_name, EXTRASTYPE_value)
	proto.RegisterType((*P2PRequest)(nil), "pb.P2PRequest")
	proto.RegisterType((*P2PResponse)(nil), "pb.P2PResponse")
	proto.RegisterType((*GetPeersResponse)(nil), "pb.GetPeersResponse")
	proto.RegisterType((*ConnectRequest)(nil), "pb.ConnectRequest")
	proto.RegisterType((*IsConnectedRequest)(nil), "pb.IsConnectedRequest")
	proto.RegisterType((*IsConnectedResponse)(nil), "pb.IsConnectedResponse")
	proto.RegisterMapType((map[string]bool)(nil), "pb.IsConnectedResponse.ConnectedEntry")
	proto.RegisterType((*DisconnectRequest)(nil), "pb.DisconnectRequest")
	proto.RegisterType((*DisconnectResponse)(nil), "pb.DisconnectResponse")
	proto.RegisterMapType((map[string]*DisconnectResponse_StatusMessage)(nil), "pb.DisconnectResponse.StatusEntry")
	proto.RegisterType((*DisconnectResponse_StatusMessage)(nil), "pb.DisconnectResponse.StatusMessage")
	proto.RegisterType((*EnableExtrasRequest)(nil), "pb.EnableExtrasRequest")
	proto.RegisterType((*DisableExtrasRequest)(nil), "pb.DisableExtrasRequest")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7) }

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x41, 0x4f, 0xe3, 0x46,
	0x14, 0xc7, 0x3d, 0x4e, 0x49, 0xf0, 0x0b, 0xa1, 0xee, 0x40, 0xa9, 0x95, 0x83, 0x15, 0x59, 0xa8,
	0x8a, 0x50, 0x09, 0x28, 0xa5, 0x15, 0x42, 0xad, 0xd4, 0x40, 0x4c, 0x15, 0x91, 0x06, 0xd7, 0x09,
	0x6d, 0x39, 0x55, 0x4e, 0x32, 0x4d, 0xa3, 0x3a, 0x76, 0xea, 0x19, 0xa3, 0xe6, 0xc6, 0x47, 0xe8,
	0x75, 0xbf, 0xc1, 0x7e, 0x84, 0xfd, 0x08, 0x7b, 0xe4, 0xc8, 0x91, 0x84, 0x2f, 0xb0, 0xc7, 0xbd,
	0xec, 0x6a, 0xe5, 0xb1, 0x9d, 0xd8, 0x10, 0x76, 0xa5, 0xd5, 0xde, 0xe6, 0xfd, 0xfd, 0x7b, 0xcf,
	0xef, 0xbd, 0x79, 0x6f, 0x00, 0x1c, 0xb7, 0x4f, 0x2a, 0x63, 0xcf, 0x65, 0x2e, 0x16, 0xc7, 0xdd,
	0x22, 0xf8, 0x6c, 0x68, 0x87, 0x76, 0x71, 0x77, 0x30, 0x64, 0x7f, 0xfb, 0xdd, 0x4a, 0xcf, 0x1d,
	0xed, 0x0d, 0xdc, 0x81, 0xbb, 0xc7, 0xe5, 0xae, 0xff, 0x17, 0xb7, 0xb8, 0xc1, 0x4f, 0x21, 0xae,
	0x5d, 0x8b, 0x00, 0x46, 0xd5, 0x30, 0xc9, 0xbf, 0x3e, 0xa1, 0x0c, 0xef, 0x43, 0xde, 0x0b, 0x8f,
	0x9d, 0xc9, 0x98, 0x28, 0xa8, 0x84, 0xca, 0xeb, 0xd5, 0xf5, 0xca, 0xb8, 0x5b, 0x09, 0x20, 0xfd,
	0xd7, 0xce, 0xa5, 0xa1, 0x9b, 0x49, 0x04, 0xcb, 0x90, 0xb1, 0x6c, 0x5b, 0x11, 0x4b, 0xa8, 0xbc,
	0x6a, 0x06, 0x47, 0xac, 0x40, 0xee, 0x8a, 0x78, 0x5d, 0x97, 0x12, 0x25, 0xc3, 0xd5, 0xd8, 0xc4,
	0x1a, 0xac, 0xf1, 0xbf, 0xf6, 0x5c, 0xbb, 0x65, 0x8d, 0x88, 0xf2, 0x59, 0x09, 0x95, 0x25, 0x33,
	0xa5, 0xe1, 0x6d, 0x28, 0xd8, 0x43, 0xca, 0x88, 0x53, 0xeb, 0xf7, 0x3d, 0x42, 0xa9, 0xb2, 0xc2,
	0xa1, 0xb4, 0x18, 0x50, 0xcc, 0xf2, 0x06, 0x84, 0xc5, 0x54, 0x36, 0xa4, 0x52, 0x62, 0x40, 0x79,
	0x64, 0xe4, 0x32, 0x12, 0x53, 0xb9, 0x90, 0x4a, 0x89, 0xda, 0x05, 0xe4, 0x79, 0x07, 0xe8, 0xd8,
	0x75, 0x28, 0xf9, 0x88, 0x16, 0x6c, 0xc2, 0x8a, 0x63, 0x8d, 0x08, 0x55, 0xc4, 0x52, 0xa6, 0x2c,
	0x99, 0xa1, 0xa1, 0x7d, 0x03, 0xf2, 0xcf, 0x84, 0x19, 0x84, 0x78, 0x74, 0x1e, 0x5b, 0x81, 0xdc,
	0x98, 0x10, 0xaf, 0x51, 0xa7, 0x0a, 0xe2, 0x6c, 0x6c, 0x6a, 0xfb, 0xb0, 0x7e, 0xe2, 0x3a, 0x0e,
	0xe9, 0xb1, 0xf8, 0x2a, 0x54, 0x80, 0x91, 0x6f, 0xb3, 0x61, 0x90, 0x66, 0x8c, 0x27, 0x14, 0xad,
	0x02, 0xb8, 0x41, 0x23, 0x1f, 0xd2, 0x8f, 0xbd, 0x9e, 0xfe, 0xc3, 0x33, 0x04, 0x1b, 0x29, 0x87,
	0x28, 0xa7, 0x3a, 0x48, 0xbd, 0x58, 0xe4, 0x3e, 0xf9, 0xea, 0xd7, 0x41, 0xb5, 0x4b, 0xd8, 0xca,
	0x5c, 0xd1, 0x1d, 0xe6, 0x4d, 0xcc, 0x85, 0x63, 0xf1, 0x87, 0x79, 0xfe, 0xd1, 0xc7, 0x60, 0x30,
	0xfe, 0x21, 0x13, 0xde, 0x3f, 0xc9, 0x0c, 0x8e, 0x41, 0x9f, 0xae, 0x2c, 0xdb, 0x27, 0xd1, 0xb0,
	0x84, 0xc6, 0x91, 0x78, 0x88, 0xb4, 0x5d, 0xf8, 0xa2, 0x3e, 0xa4, 0xbd, 0x74, 0x03, 0x9e, 0x2e,
	0xe5, 0x2d, 0x02, 0x9c, 0xe4, 0xa3, 0x4a, 0x8e, 0x20, 0x4b, 0x99, 0xc5, 0x7c, 0x1a, 0x95, 0xa1,
	0x05, 0x65, 0x3c, 0xe6, 0x2a, 0x6d, 0x0e, 0x85, 0x25, 0x44, 0x1e, 0xc5, 0x3f, 0x21, 0x9f, 0x90,
	0x97, 0x24, 0x7f, 0x94, 0x4c, 0x3e, 0x5f, 0xdd, 0x7e, 0x6f, 0xec, 0x5f, 0x08, 0xa5, 0xd6, 0x80,
	0x24, 0x4a, 0x2c, 0x9e, 0x41, 0x21, 0xf5, 0x2d, 0x58, 0x86, 0xfe, 0xdc, 0x9f, 0xb7, 0x3e, 0x68,
	0x4a, 0x4a, 0xc3, 0x5b, 0x90, 0xf5, 0x88, 0x45, 0x5d, 0x87, 0xff, 0x55, 0x32, 0x23, 0x4b, 0x3b,
	0x83, 0x0d, 0xdd, 0xb1, 0xba, 0x36, 0xd1, 0xff, 0x63, 0x9e, 0x45, 0xe3, 0x8e, 0x1d, 0x40, 0x81,
	0x70, 0xe1, 0x94, 0x58, 0xcc, 0xf7, 0x52, 0xc3, 0xab, 0xff, 0xd1, 0x31, 0x6b, 0x6d, 0x3e, 0xbc,
	0x69, 0x48, 0x6b, 0xc2, 0x66, 0x7d, 0x48, 0x3f, 0x51, 0xb4, 0x9d, 0xc3, 0xf0, 0x3d, 0x09, 0xf7,
	0x04, 0x4b, 0xb0, 0x72, 0xd2, 0x3c, 0x6f, 0xeb, 0xb2, 0x80, 0xf3, 0x90, 0x3b, 0x3d, 0x37, 0x7f,
	0xaf, 0x99, 0x75, 0x19, 0x61, 0x80, 0x6c, 0xb3, 0xd1, 0xee, 0xe8, 0x2d, 0x59, 0xc4, 0x59, 0x10,
	0x9b, 0x6d, 0x39, 0xb3, 0xf3, 0x1d, 0xc0, 0x22, 0x2c, 0x5e, 0x83, 0xd5, 0x46, 0x5d, 0x6f, 0x75,
	0x1a, 0xa7, 0x97, 0xb2, 0x10, 0xf0, 0xc6, 0xc5, 0x71, 0xfb, 0xe2, 0x58, 0x46, 0xb8, 0x00, 0x52,
	0xbd, 0xd1, 0x3e, 0x39, 0xff, 0x4d, 0x37, 0x2f, 0x65, 0xb1, 0xfa, 0x46, 0x84, 0x5c, 0xcb, 0xed,
	0x93, 0x9a, 0xd1, 0xc0, 0xbb, 0xb0, 0x1a, 0xef, 0x1c, 0x96, 0x78, 0x9e, 0xa3, 0x31, 0x9b, 0x14,
	0x37, 0x83, 0xe3, 0xc3, 0x65, 0xd4, 0x04, 0xbc, 0x03, 0xb9, 0x68, 0x68, 0x31, 0x0e, 0x90, 0xf4,
	0x06, 0x16, 0x17, 0x11, 0x34, 0x01, 0xff, 0x08, 0xb0, 0xb8, 0x6e, 0xfc, 0xe5, 0xc3, 0xeb, 0x0f,
	0x3d, 0xb6, 0x96, 0x4f, 0x85, 0x26, 0xe0, 0x9f, 0x20, 0x9f, 0x58, 0x28, 0xbc, 0xf5, 0x68, 0xc3,
	0xc2, 0x00, 0x5f, 0x3d, 0xb1, 0x79, 0x9a, 0x80, 0x0f, 0x60, 0x2d, 0x79, 0xe7, 0x98, 0xa3, 0x4b,
	0xa6, 0x20, 0x9d, 0xf6, 0xf7, 0x50, 0x48, 0x5d, 0x2e, 0x56, 0xa2, 0x14, 0x3f, 0xe0, 0x57, 0x86,
	0x8c, 0x51, 0x35, 0xf0, 0xfc, 0xdd, 0x8b, 0x98, 0xcf, 0xe7, 0x76, 0x9c, 0xd7, 0xf1, 0xc1, 0xed,
	0x54, 0x15, 0xee, 0xa6, 0x2a, 0x7a, 0x35, 0x55, 0xd1, 0xeb, 0xa9, 0x8a, 0xae, 0x67, 0x2a, 0x7a,
	0x3e, 0x53, 0xd1, 0x8b, 0x99, 0x8a, 0x5e, 0xce, 0x54, 0x74, 0x33, 0x53, 0xd1, 0xdd, 0x4c, 0x45,
	0xff, 0xdf, 0xab, 0xc2, 0xcd, 0xbd, 0x2a, 0xdc, 0xde, 0xab, 0x42, 0x37, 0xcb, 0x1f, 0xfd, 0x6f,
	0xdf, 0x05, 0x00, 0x00, 0xff, 0xff, 0x62, 0xe1, 0x2d, 0xb1, 0xcb, 0x06, 0x00, 0x00,
}

func (this *P2PRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*P2PRequest)
	if !ok {
		that2, ok := that.(P2PRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *P2PRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *P2PRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *P2PRequest but is not nil && this == nil")
	}
	if this.RequestType != that1.RequestType {
		return fmt.Errorf("RequestType this(%v) Not Equal that(%v)", this.RequestType, that1.RequestType)
	}
	if this.All != that1.All {
		return fmt.Errorf("All this(%v) Not Equal that(%v)", this.All, that1.All)
	}
	if this.Verbose != that1.Verbose {
		return fmt.Errorf("Verbose this(%v) Not Equal that(%v)", this.Verbose, that1.Verbose)
	}
	if this.ProtocolName != that1.ProtocolName {
		return fmt.Errorf("ProtocolName this(%v) Not Equal that(%v)", this.ProtocolName, that1.ProtocolName)
	}
	if this.ListenAddress != that1.ListenAddress {
		return fmt.Errorf("ListenAddress this(%v) Not Equal that(%v)", this.ListenAddress, that1.ListenAddress)
	}
	if this.TargetAddress != that1.TargetAddress {
		return fmt.Errorf("TargetAddress this(%v) Not Equal that(%v)", this.TargetAddress, that1.TargetAddress)
	}
	if this.RemoteAddress != that1.RemoteAddress {
		return fmt.Errorf("RemoteAddress this(%v) Not Equal that(%v)", this.RemoteAddress, that1.RemoteAddress)
	}
	return nil
}
func (this *P2PRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*P2PRequest)
	if !ok {
		that2, ok := that.(P2PRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestType != that1.RequestType {
		return false
	}
	if this.All != that1.All {
		return false
	}
	if this.Verbose != that1.Verbose {
		return false
	}
	if this.ProtocolName != that1.ProtocolName {
		return false
	}
	if this.ListenAddress != that1.ListenAddress {
		return false
	}
	if this.TargetAddress != that1.TargetAddress {
		return false
	}
	if this.RemoteAddress != that1.RemoteAddress {
		return false
	}
	return true
}
func (this *P2PResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*P2PResponse)
	if !ok {
		that2, ok := that.(P2PResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *P2PResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *P2PResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *P2PResponse but is not nil && this == nil")
	}
	if this.RequestType != that1.RequestType {
		return fmt.Errorf("RequestType this(%v) Not Equal that(%v)", this.RequestType, that1.RequestType)
	}
	if len(this.Names) != len(that1.Names) {
		return fmt.Errorf("Names this(%v) Not Equal that(%v)", len(this.Names), len(that1.Names))
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return fmt.Errorf("Names this[%v](%v) Not Equal that[%v](%v)", i, this.Names[i], i, that1.Names[i])
		}
	}
	return nil
}
func (this *P2PResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*P2PResponse)
	if !ok {
		that2, ok := that.(P2PResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestType != that1.RequestType {
		return false
	}
	if len(this.Names) != len(that1.Names) {
		return false
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return false
		}
	}
	return true
}
func (this *GetPeersResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetPeersResponse)
	if !ok {
		that2, ok := that.(GetPeersResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetPeersResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetPeersResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetPeersResponse but is not nil && this == nil")
	}
	if len(this.PeerIDs) != len(that1.PeerIDs) {
		return fmt.Errorf("PeerIDs this(%v) Not Equal that(%v)", len(this.PeerIDs), len(that1.PeerIDs))
	}
	for i := range this.PeerIDs {
		if this.PeerIDs[i] != that1.PeerIDs[i] {
			return fmt.Errorf("PeerIDs this[%v](%v) Not Equal that[%v](%v)", i, this.PeerIDs[i], i, that1.PeerIDs[i])
		}
	}
	return nil
}
func (this *GetPeersResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPeersResponse)
	if !ok {
		that2, ok := that.(GetPeersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PeerIDs) != len(that1.PeerIDs) {
		return false
	}
	for i := range this.PeerIDs {
		if this.PeerIDs[i] != that1.PeerIDs[i] {
			return false
		}
	}
	return true
}
func (this *ConnectRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConnectRequest)
	if !ok {
		that2, ok := that.(ConnectRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConnectRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConnectRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConnectRequest but is not nil && this == nil")
	}
	if len(this.MultiAddrs) != len(that1.MultiAddrs) {
		return fmt.Errorf("MultiAddrs this(%v) Not Equal that(%v)", len(this.MultiAddrs), len(that1.MultiAddrs))
	}
	for i := range this.MultiAddrs {
		if this.MultiAddrs[i] != that1.MultiAddrs[i] {
			return fmt.Errorf("MultiAddrs this[%v](%v) Not Equal that[%v](%v)", i, this.MultiAddrs[i], i, that1.MultiAddrs[i])
		}
	}
	return nil
}
func (this *ConnectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectRequest)
	if !ok {
		that2, ok := that.(ConnectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MultiAddrs) != len(that1.MultiAddrs) {
		return false
	}
	for i := range this.MultiAddrs {
		if this.MultiAddrs[i] != that1.MultiAddrs[i] {
			return false
		}
	}
	return true
}
func (this *IsConnectedRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*IsConnectedRequest)
	if !ok {
		that2, ok := that.(IsConnectedRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *IsConnectedRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *IsConnectedRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *IsConnectedRequest but is not nil && this == nil")
	}
	if len(this.PeerIDs) != len(that1.PeerIDs) {
		return fmt.Errorf("PeerIDs this(%v) Not Equal that(%v)", len(this.PeerIDs), len(that1.PeerIDs))
	}
	for i := range this.PeerIDs {
		if this.PeerIDs[i] != that1.PeerIDs[i] {
			return fmt.Errorf("PeerIDs this[%v](%v) Not Equal that[%v](%v)", i, this.PeerIDs[i], i, that1.PeerIDs[i])
		}
	}
	return nil
}
func (this *IsConnectedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsConnectedRequest)
	if !ok {
		that2, ok := that.(IsConnectedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PeerIDs) != len(that1.PeerIDs) {
		return false
	}
	for i := range this.PeerIDs {
		if this.PeerIDs[i] != that1.PeerIDs[i] {
			return false
		}
	}
	return true
}
func (this *IsConnectedResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*IsConnectedResponse)
	if !ok {
		that2, ok := that.(IsConnectedResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *IsConnectedResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *IsConnectedResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *IsConnectedResponse but is not nil && this == nil")
	}
	if len(this.Connected) != len(that1.Connected) {
		return fmt.Errorf("Connected this(%v) Not Equal that(%v)", len(this.Connected), len(that1.Connected))
	}
	for i := range this.Connected {
		if this.Connected[i] != that1.Connected[i] {
			return fmt.Errorf("Connected this[%v](%v) Not Equal that[%v](%v)", i, this.Connected[i], i, that1.Connected[i])
		}
	}
	return nil
}
func (this *IsConnectedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsConnectedResponse)
	if !ok {
		that2, ok := that.(IsConnectedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Connected) != len(that1.Connected) {
		return false
	}
	for i := range this.Connected {
		if this.Connected[i] != that1.Connected[i] {
			return false
		}
	}
	return true
}
func (this *DisconnectRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DisconnectRequest)
	if !ok {
		that2, ok := that.(DisconnectRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DisconnectRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DisconnectRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DisconnectRequest but is not nil && this == nil")
	}
	if len(this.PeerIDs) != len(that1.PeerIDs) {
		return fmt.Errorf("PeerIDs this(%v) Not Equal that(%v)", len(this.PeerIDs), len(that1.PeerIDs))
	}
	for i := range this.PeerIDs {
		if this.PeerIDs[i] != that1.PeerIDs[i] {
			return fmt.Errorf("PeerIDs this[%v](%v) Not Equal that[%v](%v)", i, this.PeerIDs[i], i, that1.PeerIDs[i])
		}
	}
	return nil
}
func (this *DisconnectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisconnectRequest)
	if !ok {
		that2, ok := that.(DisconnectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PeerIDs) != len(that1.PeerIDs) {
		return false
	}
	for i := range this.PeerIDs {
		if this.PeerIDs[i] != that1.PeerIDs[i] {
			return false
		}
	}
	return true
}
func (this *DisconnectResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DisconnectResponse)
	if !ok {
		that2, ok := that.(DisconnectResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DisconnectResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DisconnectResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DisconnectResponse but is not nil && this == nil")
	}
	if len(this.Status) != len(that1.Status) {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", len(this.Status), len(that1.Status))
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return fmt.Errorf("Status this[%v](%v) Not Equal that[%v](%v)", i, this.Status[i], i, that1.Status[i])
		}
	}
	return nil
}
func (this *DisconnectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisconnectResponse)
	if !ok {
		that2, ok := that.(DisconnectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	return true
}
func (this *DisconnectResponse_StatusMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DisconnectResponse_StatusMessage)
	if !ok {
		that2, ok := that.(DisconnectResponse_StatusMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DisconnectResponse_StatusMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DisconnectResponse_StatusMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DisconnectResponse_StatusMessage but is not nil && this == nil")
	}
	if this.Disconnected != that1.Disconnected {
		return fmt.Errorf("Disconnected this(%v) Not Equal that(%v)", this.Disconnected, that1.Disconnected)
	}
	if this.Reason != that1.Reason {
		return fmt.Errorf("Reason this(%v) Not Equal that(%v)", this.Reason, that1.Reason)
	}
	return nil
}
func (this *DisconnectResponse_StatusMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisconnectResponse_StatusMessage)
	if !ok {
		that2, ok := that.(DisconnectResponse_StatusMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Disconnected != that1.Disconnected {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *EnableExtrasRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*EnableExtrasRequest)
	if !ok {
		that2, ok := that.(EnableExtrasRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *EnableExtrasRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *EnableExtrasRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *EnableExtrasRequest but is not nil && this == nil")
	}
	if this.ExtrasFeature != that1.ExtrasFeature {
		return fmt.Errorf("ExtrasFeature this(%v) Not Equal that(%v)", this.ExtrasFeature, that1.ExtrasFeature)
	}
	return nil
}
func (this *EnableExtrasRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableExtrasRequest)
	if !ok {
		that2, ok := that.(EnableExtrasRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExtrasFeature != that1.ExtrasFeature {
		return false
	}
	return true
}
func (this *DisableExtrasRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DisableExtrasRequest)
	if !ok {
		that2, ok := that.(DisableExtrasRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DisableExtrasRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DisableExtrasRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DisableExtrasRequest but is not nil && this == nil")
	}
	if this.ExtrasFeature != that1.ExtrasFeature {
		return fmt.Errorf("ExtrasFeature this(%v) Not Equal that(%v)", this.ExtrasFeature, that1.ExtrasFeature)
	}
	return nil
}
func (this *DisableExtrasRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisableExtrasRequest)
	if !ok {
		that2, ok := that.(DisableExtrasRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExtrasFeature != that1.ExtrasFeature {
		return false
	}
	return true
}
func (this *P2PRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.P2PRequest{")
	s = append(s, "RequestType: "+fmt.Sprintf("%#v", this.RequestType)+",\n")
	s = append(s, "All: "+fmt.Sprintf("%#v", this.All)+",\n")
	s = append(s, "Verbose: "+fmt.Sprintf("%#v", this.Verbose)+",\n")
	s = append(s, "ProtocolName: "+fmt.Sprintf("%#v", this.ProtocolName)+",\n")
	s = append(s, "ListenAddress: "+fmt.Sprintf("%#v", this.ListenAddress)+",\n")
	s = append(s, "TargetAddress: "+fmt.Sprintf("%#v", this.TargetAddress)+",\n")
	s = append(s, "RemoteAddress: "+fmt.Sprintf("%#v", this.RemoteAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *P2PResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.P2PResponse{")
	s = append(s, "RequestType: "+fmt.Sprintf("%#v", this.RequestType)+",\n")
	s = append(s, "Names: "+fmt.Sprintf("%#v", this.Names)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPeersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetPeersResponse{")
	s = append(s, "PeerIDs: "+fmt.Sprintf("%#v", this.PeerIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConnectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ConnectRequest{")
	s = append(s, "MultiAddrs: "+fmt.Sprintf("%#v", this.MultiAddrs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsConnectedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.IsConnectedRequest{")
	s = append(s, "PeerIDs: "+fmt.Sprintf("%#v", this.PeerIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsConnectedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.IsConnectedResponse{")
	keysForConnected := make([]string, 0, len(this.Connected))
	for k := range this.Connected {
		keysForConnected = append(keysForConnected, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForConnected)
	mapStringForConnected := "map[string]bool{"
	for _, k := range keysForConnected {
		mapStringForConnected += fmt.Sprintf("%#v: %#v,", k, this.Connected[k])
	}
	mapStringForConnected += "}"
	if this.Connected != nil {
		s = append(s, "Connected: "+mapStringForConnected+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisconnectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.DisconnectRequest{")
	s = append(s, "PeerIDs: "+fmt.Sprintf("%#v", this.PeerIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisconnectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.DisconnectResponse{")
	keysForStatus := make([]string, 0, len(this.Status))
	for k := range this.Status {
		keysForStatus = append(keysForStatus, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStatus)
	mapStringForStatus := "map[string]*DisconnectResponse_StatusMessage{"
	for _, k := range keysForStatus {
		mapStringForStatus += fmt.Sprintf("%#v: %#v,", k, this.Status[k])
	}
	mapStringForStatus += "}"
	if this.Status != nil {
		s = append(s, "Status: "+mapStringForStatus+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisconnectResponse_StatusMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.DisconnectResponse_StatusMessage{")
	s = append(s, "Disconnected: "+fmt.Sprintf("%#v", this.Disconnected)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnableExtrasRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.EnableExtrasRequest{")
	s = append(s, "ExtrasFeature: "+fmt.Sprintf("%#v", this.ExtrasFeature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisableExtrasRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.DisableExtrasRequest{")
	s = append(s, "ExtrasFeature: "+fmt.Sprintf("%#v", this.ExtrasFeature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeAPIClient is the client API for NodeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeAPIClient interface {
	// GetPeers returns a message containing a slice of current peers in our peerstore
	GetPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPeersResponse, error)
	// Connect is used to connect to remote libp2p peers
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Empty, error)
	// Disconnect is used to disconnect remote libp2p peer connections
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
	// IsConnected is used to check if we are connected with a given peer
	IsConnected(ctx context.Context, in *IsConnectedRequest, opts ...grpc.CallOption) (*IsConnectedResponse, error)
	// EnableExtras is used to enable a particular extras feature
	EnableExtras(ctx context.Context, in *EnableExtrasRequest, opts ...grpc.CallOption) (*Empty, error)
	// DisableExtras is used to disable a particular extras feature
	DisableExtras(ctx context.Context, in *DisableExtrasRequest, opts ...grpc.CallOption) (*Empty, error)
	// P2P allows control of generalized p2p streams for tcp/udp based protocol.
	// By using this RPC, we can tunnel traffic similar to ssh tunneling
	// except using libp2p as the transport layer, and and tcp/udp port.
	P2P(ctx context.Context, in *P2PRequest, opts ...grpc.CallOption) (*P2PResponse, error)
}

type nodeAPIClient struct {
	cc *grpc.ClientConn
}

func NewNodeAPIClient(cc *grpc.ClientConn) NodeAPIClient {
	return &nodeAPIClient{cc}
}

func (c *nodeAPIClient) GetPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPeersResponse, error) {
	out := new(GetPeersResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeAPI/GetPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.NodeAPI/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeAPI/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) IsConnected(ctx context.Context, in *IsConnectedRequest, opts ...grpc.CallOption) (*IsConnectedResponse, error) {
	out := new(IsConnectedResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeAPI/IsConnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) EnableExtras(ctx context.Context, in *EnableExtrasRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.NodeAPI/EnableExtras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) DisableExtras(ctx context.Context, in *DisableExtrasRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.NodeAPI/DisableExtras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) P2P(ctx context.Context, in *P2PRequest, opts ...grpc.CallOption) (*P2PResponse, error) {
	out := new(P2PResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeAPI/P2P", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeAPIServer is the server API for NodeAPI service.
type NodeAPIServer interface {
	// GetPeers returns a message containing a slice of current peers in our peerstore
	GetPeers(context.Context, *Empty) (*GetPeersResponse, error)
	// Connect is used to connect to remote libp2p peers
	Connect(context.Context, *ConnectRequest) (*Empty, error)
	// Disconnect is used to disconnect remote libp2p peer connections
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
	// IsConnected is used to check if we are connected with a given peer
	IsConnected(context.Context, *IsConnectedRequest) (*IsConnectedResponse, error)
	// EnableExtras is used to enable a particular extras feature
	EnableExtras(context.Context, *EnableExtrasRequest) (*Empty, error)
	// DisableExtras is used to disable a particular extras feature
	DisableExtras(context.Context, *DisableExtrasRequest) (*Empty, error)
	// P2P allows control of generalized p2p streams for tcp/udp based protocol.
	// By using this RPC, we can tunnel traffic similar to ssh tunneling
	// except using libp2p as the transport layer, and and tcp/udp port.
	P2P(context.Context, *P2PRequest) (*P2PResponse, error)
}

// UnimplementedNodeAPIServer can be embedded to have forward compatible implementations.
type UnimplementedNodeAPIServer struct {
}

func (*UnimplementedNodeAPIServer) GetPeers(ctx context.Context, req *Empty) (*GetPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (*UnimplementedNodeAPIServer) Connect(ctx context.Context, req *ConnectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedNodeAPIServer) Disconnect(ctx context.Context, req *DisconnectRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedNodeAPIServer) IsConnected(ctx context.Context, req *IsConnectedRequest) (*IsConnectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsConnected not implemented")
}
func (*UnimplementedNodeAPIServer) EnableExtras(ctx context.Context, req *EnableExtrasRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableExtras not implemented")
}
func (*UnimplementedNodeAPIServer) DisableExtras(ctx context.Context, req *DisableExtrasRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableExtras not implemented")
}
func (*UnimplementedNodeAPIServer) P2P(ctx context.Context, req *P2PRequest) (*P2PResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method P2P not implemented")
}

func RegisterNodeAPIServer(s *grpc.Server, srv NodeAPIServer) {
	s.RegisterService(&_NodeAPI_serviceDesc, srv)
}

func _NodeAPI_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeAPI/GetPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).GetPeers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeAPI/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeAPI/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_IsConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).IsConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeAPI/IsConnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).IsConnected(ctx, req.(*IsConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_EnableExtras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableExtrasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).EnableExtras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeAPI/EnableExtras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).EnableExtras(ctx, req.(*EnableExtrasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_DisableExtras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableExtrasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).DisableExtras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeAPI/DisableExtras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).DisableExtras(ctx, req.(*DisableExtrasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAPI_P2P_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAPIServer).P2P(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeAPI/P2P",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAPIServer).P2P(ctx, req.(*P2PRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NodeAPI",
	HandlerType: (*NodeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeers",
			Handler:    _NodeAPI_GetPeers_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _NodeAPI_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _NodeAPI_Disconnect_Handler,
		},
		{
			MethodName: "IsConnected",
			Handler:    _NodeAPI_IsConnected_Handler,
		},
		{
			MethodName: "EnableExtras",
			Handler:    _NodeAPI_EnableExtras_Handler,
		},
		{
			MethodName: "DisableExtras",
			Handler:    _NodeAPI_DisableExtras_Handler,
		},
		{
			MethodName: "P2P",
			Handler:    _NodeAPI_P2P_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

func (m *P2PRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2PRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *P2PRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteAddress) > 0 {
		i -= len(m.RemoteAddress)
		copy(dAtA[i:], m.RemoteAddress)
		i = encodeVarintNode(dAtA, i, uint64(len(m.RemoteAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintNode(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ListenAddress) > 0 {
		i -= len(m.ListenAddress)
		copy(dAtA[i:], m.ListenAddress)
		i = encodeVarintNode(dAtA, i, uint64(len(m.ListenAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProtocolName) > 0 {
		i -= len(m.ProtocolName)
		copy(dAtA[i:], m.ProtocolName)
		i = encodeVarintNode(dAtA, i, uint64(len(m.ProtocolName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Verbose {
		i--
		if m.Verbose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.All {
		i--
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RequestType != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *P2PResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2PResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *P2PResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RequestType != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPeersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPeersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPeersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerIDs) > 0 {
		for iNdEx := len(m.PeerIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PeerIDs[iNdEx])
			copy(dAtA[i:], m.PeerIDs[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.PeerIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MultiAddrs) > 0 {
		for iNdEx := len(m.MultiAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MultiAddrs[iNdEx])
			copy(dAtA[i:], m.MultiAddrs[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.MultiAddrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IsConnectedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsConnectedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsConnectedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerIDs) > 0 {
		for iNdEx := len(m.PeerIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PeerIDs[iNdEx])
			copy(dAtA[i:], m.PeerIDs[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.PeerIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IsConnectedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsConnectedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsConnectedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Connected) > 0 {
		for k := range m.Connected {
			v := m.Connected[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNode(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNode(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DisconnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisconnectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerIDs) > 0 {
		for iNdEx := len(m.PeerIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PeerIDs[iNdEx])
			copy(dAtA[i:], m.PeerIDs[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.PeerIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DisconnectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisconnectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for k := range m.Status {
			v := m.Status[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintNode(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNode(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNode(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DisconnectResponse_StatusMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectResponse_StatusMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisconnectResponse_StatusMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Disconnected {
		i--
		if m.Disconnected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnableExtrasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableExtrasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableExtrasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtrasFeature != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.ExtrasFeature))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DisableExtrasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisableExtrasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisableExtrasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtrasFeature != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.ExtrasFeature))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedP2PRequest(r randyNode, easy bool) *P2PRequest {
	this := &P2PRequest{}
	this.RequestType = P2PREQTYPE([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.All = bool(bool(r.Intn(2) == 0))
	this.Verbose = bool(bool(r.Intn(2) == 0))
	this.ProtocolName = string(randStringNode(r))
	this.ListenAddress = string(randStringNode(r))
	this.TargetAddress = string(randStringNode(r))
	this.RemoteAddress = string(randStringNode(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedP2PResponse(r randyNode, easy bool) *P2PResponse {
	this := &P2PResponse{}
	this.RequestType = P2PREQTYPE([]int32{0, 1, 2, 3}[r.Intn(4)])
	v1 := r.Intn(10)
	this.Names = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Names[i] = string(randStringNode(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetPeersResponse(r randyNode, easy bool) *GetPeersResponse {
	this := &GetPeersResponse{}
	v2 := r.Intn(10)
	this.PeerIDs = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.PeerIDs[i] = string(randStringNode(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConnectRequest(r randyNode, easy bool) *ConnectRequest {
	this := &ConnectRequest{}
	v3 := r.Intn(10)
	this.MultiAddrs = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.MultiAddrs[i] = string(randStringNode(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIsConnectedRequest(r randyNode, easy bool) *IsConnectedRequest {
	this := &IsConnectedRequest{}
	v4 := r.Intn(10)
	this.PeerIDs = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.PeerIDs[i] = string(randStringNode(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIsConnectedResponse(r randyNode, easy bool) *IsConnectedResponse {
	this := &IsConnectedResponse{}
	if r.Intn(5) != 0 {
		v5 := r.Intn(10)
		this.Connected = make(map[string]bool)
		for i := 0; i < v5; i++ {
			v6 := randStringNode(r)
			this.Connected[v6] = bool(bool(r.Intn(2) == 0))
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDisconnectRequest(r randyNode, easy bool) *DisconnectRequest {
	this := &DisconnectRequest{}
	v7 := r.Intn(10)
	this.PeerIDs = make([]string, v7)
	for i := 0; i < v7; i++ {
		this.PeerIDs[i] = string(randStringNode(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDisconnectResponse(r randyNode, easy bool) *DisconnectResponse {
	this := &DisconnectResponse{}
	if r.Intn(5) != 0 {
		v8 := r.Intn(10)
		this.Status = make(map[string]*DisconnectResponse_StatusMessage)
		for i := 0; i < v8; i++ {
			this.Status[randStringNode(r)] = NewPopulatedDisconnectResponse_StatusMessage(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDisconnectResponse_StatusMessage(r randyNode, easy bool) *DisconnectResponse_StatusMessage {
	this := &DisconnectResponse_StatusMessage{}
	this.Disconnected = bool(bool(r.Intn(2) == 0))
	this.Reason = string(randStringNode(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEnableExtrasRequest(r randyNode, easy bool) *EnableExtrasRequest {
	this := &EnableExtrasRequest{}
	this.ExtrasFeature = EXTRASTYPE([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDisableExtrasRequest(r randyNode, easy bool) *DisableExtrasRequest {
	this := &DisableExtrasRequest{}
	this.ExtrasFeature = EXTRASTYPE([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyNode interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNode(r randyNode) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNode(r randyNode) string {
	v9 := r.Intn(100)
	tmps := make([]rune, v9)
	for i := 0; i < v9; i++ {
		tmps[i] = randUTF8RuneNode(r)
	}
	return string(tmps)
}
func randUnrecognizedNode(r randyNode, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNode(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNode(dAtA []byte, r randyNode, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNode(dAtA, uint64(key))
		v10 := r.Int63()
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		dAtA = encodeVarintPopulateNode(dAtA, uint64(v10))
	case 1:
		dAtA = encodeVarintPopulateNode(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNode(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNode(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNode(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNode(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *P2PRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != 0 {
		n += 1 + sovNode(uint64(m.RequestType))
	}
	if m.All {
		n += 2
	}
	if m.Verbose {
		n += 2
	}
	l = len(m.ProtocolName)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.ListenAddress)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.RemoteAddress)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func (m *P2PResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != 0 {
		n += 1 + sovNode(uint64(m.RequestType))
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	return n
}

func (m *GetPeersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeerIDs) > 0 {
		for _, s := range m.PeerIDs {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	return n
}

func (m *ConnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MultiAddrs) > 0 {
		for _, s := range m.MultiAddrs {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	return n
}

func (m *IsConnectedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeerIDs) > 0 {
		for _, s := range m.PeerIDs {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	return n
}

func (m *IsConnectedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Connected) > 0 {
		for k, v := range m.Connected {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNode(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovNode(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DisconnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeerIDs) > 0 {
		for _, s := range m.PeerIDs {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	return n
}

func (m *DisconnectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for k, v := range m.Status {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovNode(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovNode(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovNode(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DisconnectResponse_StatusMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disconnected {
		n += 2
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func (m *EnableExtrasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtrasFeature != 0 {
		n += 1 + sovNode(uint64(m.ExtrasFeature))
	}
	return n
}

func (m *DisableExtrasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtrasFeature != 0 {
		n += 1 + sovNode(uint64(m.ExtrasFeature))
	}
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *P2PRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&P2PRequest{`,
		`RequestType:` + fmt.Sprintf("%v", this.RequestType) + `,`,
		`All:` + fmt.Sprintf("%v", this.All) + `,`,
		`Verbose:` + fmt.Sprintf("%v", this.Verbose) + `,`,
		`ProtocolName:` + fmt.Sprintf("%v", this.ProtocolName) + `,`,
		`ListenAddress:` + fmt.Sprintf("%v", this.ListenAddress) + `,`,
		`TargetAddress:` + fmt.Sprintf("%v", this.TargetAddress) + `,`,
		`RemoteAddress:` + fmt.Sprintf("%v", this.RemoteAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *P2PResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&P2PResponse{`,
		`RequestType:` + fmt.Sprintf("%v", this.RequestType) + `,`,
		`Names:` + fmt.Sprintf("%v", this.Names) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPeersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPeersResponse{`,
		`PeerIDs:` + fmt.Sprintf("%v", this.PeerIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnectRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectRequest{`,
		`MultiAddrs:` + fmt.Sprintf("%v", this.MultiAddrs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsConnectedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsConnectedRequest{`,
		`PeerIDs:` + fmt.Sprintf("%v", this.PeerIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsConnectedResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForConnected := make([]string, 0, len(this.Connected))
	for k := range this.Connected {
		keysForConnected = append(keysForConnected, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForConnected)
	mapStringForConnected := "map[string]bool{"
	for _, k := range keysForConnected {
		mapStringForConnected += fmt.Sprintf("%v: %v,", k, this.Connected[k])
	}
	mapStringForConnected += "}"
	s := strings.Join([]string{`&IsConnectedResponse{`,
		`Connected:` + mapStringForConnected + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisconnectRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisconnectRequest{`,
		`PeerIDs:` + fmt.Sprintf("%v", this.PeerIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisconnectResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForStatus := make([]string, 0, len(this.Status))
	for k := range this.Status {
		keysForStatus = append(keysForStatus, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStatus)
	mapStringForStatus := "map[string]*DisconnectResponse_StatusMessage{"
	for _, k := range keysForStatus {
		mapStringForStatus += fmt.Sprintf("%v: %v,", k, this.Status[k])
	}
	mapStringForStatus += "}"
	s := strings.Join([]string{`&DisconnectResponse{`,
		`Status:` + mapStringForStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisconnectResponse_StatusMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisconnectResponse_StatusMessage{`,
		`Disconnected:` + fmt.Sprintf("%v", this.Disconnected) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableExtrasRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableExtrasRequest{`,
		`ExtrasFeature:` + fmt.Sprintf("%v", this.ExtrasFeature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisableExtrasRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisableExtrasRequest{`,
		`ExtrasFeature:` + fmt.Sprintf("%v", this.ExtrasFeature) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *P2PRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P2PRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P2PRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= P2PREQTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verbose = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P2PResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P2PResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P2PResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= P2PREQTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPeersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPeersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPeersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerIDs = append(m.PeerIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiAddrs = append(m.MultiAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsConnectedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsConnectedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsConnectedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerIDs = append(m.PeerIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsConnectedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsConnectedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsConnectedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connected == nil {
				m.Connected = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNode
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNode
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNode(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNode
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Connected[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisconnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisconnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerIDs = append(m.PeerIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisconnectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisconnectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = make(map[string]*DisconnectResponse_StatusMessage)
			}
			var mapkey string
			var mapvalue *DisconnectResponse_StatusMessage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNode
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNode
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNode
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthNode
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DisconnectResponse_StatusMessage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNode(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNode
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Status[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectResponse_StatusMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disconnected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disconnected = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableExtrasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableExtrasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableExtrasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtrasFeature", wireType)
			}
			m.ExtrasFeature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtrasFeature |= EXTRASTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisableExtrasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisableExtrasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisableExtrasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtrasFeature", wireType)
			}
			m.ExtrasFeature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtrasFeature |= EXTRASTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
