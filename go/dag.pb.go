// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dag.proto

package pb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DAGREQTYPE int32

const (
	DAGREQTYPE_DAG_PUT       DAGREQTYPE = 0
	DAGREQTYPE_DAG_GET       DAGREQTYPE = 1
	DAGREQTYPE_DAG_NEW_LINK  DAGREQTYPE = 2
	DAGREQTYPE_DAG_ADD_LINKS DAGREQTYPE = 3
	DAGREQTYPE_DAG_GET_LINKS DAGREQTYPE = 4
)

var DAGREQTYPE_name = map[int32]string{
	0: "DAG_PUT",
	1: "DAG_GET",
	2: "DAG_NEW_LINK",
	3: "DAG_ADD_LINKS",
	4: "DAG_GET_LINKS",
}

var DAGREQTYPE_value = map[string]int32{
	"DAG_PUT":       0,
	"DAG_GET":       1,
	"DAG_NEW_LINK":  2,
	"DAG_ADD_LINKS": 3,
	"DAG_GET_LINKS": 4,
}

func (x DAGREQTYPE) String() string {
	return proto.EnumName(DAGREQTYPE_name, int32(x))
}

func (DAGREQTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_228b96b95413374c, []int{0}
}

type DagRequest struct {
	RequestType DAGREQTYPE `protobuf:"varint,1,opt,name=requestType,proto3,enum=pb.DAGREQTYPE" json:"requestType,omitempty"`
	// data that we will be storing
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// the object encoding type (raw, cbor, protobuf, etc...)
	ObjectEncoding string `protobuf:"bytes,3,opt,name=objectEncoding,proto3" json:"objectEncoding,omitempty"`
	// the serialization format (raw, cbor, protobuf, etc...)
	SerializationFormat string `protobuf:"bytes,4,opt,name=serializationFormat,proto3" json:"serializationFormat,omitempty"`
	// the hash function to to use (sha2-256, sha3-512, etc...)
	HashFunc string `protobuf:"bytes,5,opt,name=hashFunc,proto3" json:"hashFunc,omitempty"`
	// the cid version to use (0, 1)
	CidVersion int64  `protobuf:"varint,6,opt,name=cidVersion,proto3" json:"cidVersion,omitempty"`
	Hash       string `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	// links are optional hashes to include as links of the node
	// the name is used as the key, while the value of the key is used as the hash
	Links map[string]string `protobuf:"bytes,8,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DagRequest) Reset()         { *m = DagRequest{} }
func (m *DagRequest) String() string { return proto.CompactTextString(m) }
func (*DagRequest) ProtoMessage()    {}
func (*DagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_228b96b95413374c, []int{0}
}
func (m *DagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DagRequest.Merge(m, src)
}
func (m *DagRequest) XXX_Size() int {
	return m.Size()
}
func (m *DagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DagRequest proto.InternalMessageInfo

func (m *DagRequest) GetRequestType() DAGREQTYPE {
	if m != nil {
		return m.RequestType
	}
	return DAGREQTYPE_DAG_PUT
}

func (m *DagRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DagRequest) GetObjectEncoding() string {
	if m != nil {
		return m.ObjectEncoding
	}
	return ""
}

func (m *DagRequest) GetSerializationFormat() string {
	if m != nil {
		return m.SerializationFormat
	}
	return ""
}

func (m *DagRequest) GetHashFunc() string {
	if m != nil {
		return m.HashFunc
	}
	return ""
}

func (m *DagRequest) GetCidVersion() int64 {
	if m != nil {
		return m.CidVersion
	}
	return 0
}

func (m *DagRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *DagRequest) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

type DagResponse struct {
	RequestType DAGREQTYPE  `protobuf:"varint,1,opt,name=requestType,proto3,enum=pb.DAGREQTYPE" json:"requestType,omitempty"`
	Hashes      []string    `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
	RawData     []byte      `protobuf:"bytes,3,opt,name=rawData,proto3" json:"rawData,omitempty"`
	Links       []*IPLDLink `protobuf:"bytes,4,rep,name=links,proto3" json:"links,omitempty"`
}

func (m *DagResponse) Reset()         { *m = DagResponse{} }
func (m *DagResponse) String() string { return proto.CompactTextString(m) }
func (*DagResponse) ProtoMessage()    {}
func (*DagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_228b96b95413374c, []int{1}
}
func (m *DagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DagResponse.Merge(m, src)
}
func (m *DagResponse) XXX_Size() int {
	return m.Size()
}
func (m *DagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DagResponse proto.InternalMessageInfo

func (m *DagResponse) GetRequestType() DAGREQTYPE {
	if m != nil {
		return m.RequestType
	}
	return DAGREQTYPE_DAG_PUT
}

func (m *DagResponse) GetHashes() []string {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *DagResponse) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *DagResponse) GetLinks() []*IPLDLink {
	if m != nil {
		return m.Links
	}
	return nil
}

// An IPFS MerkleDAG Link
type IPLDLink struct {
	// multihash of the target object
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// utf string name. should be unique per object
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// cumulative size of target object
	Size_ uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *IPLDLink) Reset()         { *m = IPLDLink{} }
func (m *IPLDLink) String() string { return proto.CompactTextString(m) }
func (*IPLDLink) ProtoMessage()    {}
func (*IPLDLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_228b96b95413374c, []int{2}
}
func (m *IPLDLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPLDLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPLDLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPLDLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPLDLink.Merge(m, src)
}
func (m *IPLDLink) XXX_Size() int {
	return m.Size()
}
func (m *IPLDLink) XXX_DiscardUnknown() {
	xxx_messageInfo_IPLDLink.DiscardUnknown(m)
}

var xxx_messageInfo_IPLDLink proto.InternalMessageInfo

func (m *IPLDLink) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *IPLDLink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IPLDLink) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

// An IPFS MerkleDAG Node
type IPLDNode struct {
	// refs to other objects
	Links []*IPLDLink `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
	// opaque user data
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *IPLDNode) Reset()         { *m = IPLDNode{} }
func (m *IPLDNode) String() string { return proto.CompactTextString(m) }
func (*IPLDNode) ProtoMessage()    {}
func (*IPLDNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_228b96b95413374c, []int{3}
}
func (m *IPLDNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPLDNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPLDNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPLDNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPLDNode.Merge(m, src)
}
func (m *IPLDNode) XXX_Size() int {
	return m.Size()
}
func (m *IPLDNode) XXX_DiscardUnknown() {
	xxx_messageInfo_IPLDNode.DiscardUnknown(m)
}

var xxx_messageInfo_IPLDNode proto.InternalMessageInfo

func (m *IPLDNode) GetLinks() []*IPLDLink {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *IPLDNode) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.DAGREQTYPE", DAGREQTYPE_name, DAGREQTYPE_value)
	proto.RegisterType((*DagRequest)(nil), "pb.DagRequest")
	proto.RegisterMapType((map[string]string)(nil), "pb.DagRequest.LinksEntry")
	proto.RegisterType((*DagResponse)(nil), "pb.DagResponse")
	proto.RegisterType((*IPLDLink)(nil), "pb.IPLDLink")
	proto.RegisterType((*IPLDNode)(nil), "pb.IPLDNode")
}

func init() { proto.RegisterFile("dag.proto", fileDescriptor_228b96b95413374c) }

var fileDescriptor_228b96b95413374c = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x8f, 0xd2, 0x40,
	0x18, 0x65, 0xda, 0x2e, 0xd0, 0x0f, 0xc4, 0x3a, 0x1a, 0x33, 0x72, 0x68, 0x9a, 0x1e, 0x4c, 0xe3,
	0x01, 0x09, 0x5e, 0x36, 0xde, 0xd8, 0xb4, 0x10, 0x22, 0x21, 0x38, 0x8b, 0x1a, 0x2f, 0x6e, 0x06,
	0x3a, 0xe9, 0xd6, 0x85, 0x16, 0xdb, 0xa2, 0x61, 0x7f, 0x85, 0x17, 0xff, 0x93, 0xc7, 0x3d, 0x7a,
	0x34, 0x70, 0xf0, 0x6f, 0x98, 0x99, 0xd2, 0xb2, 0x1a, 0x8d, 0x89, 0xb7, 0xf7, 0xde, 0xbc, 0xce,
	0xcc, 0x7b, 0xdf, 0x14, 0x74, 0x9f, 0x05, 0x9d, 0x75, 0x12, 0x67, 0x31, 0x56, 0xd6, 0x73, 0xfb,
	0x87, 0x02, 0xe0, 0xb2, 0x80, 0xf2, 0x0f, 0x1b, 0x9e, 0x66, 0xb8, 0x0b, 0x8d, 0x24, 0x87, 0xb3,
	0xed, 0x9a, 0x13, 0x64, 0x21, 0xa7, 0xd5, 0x6b, 0x75, 0xd6, 0xf3, 0x8e, 0xdb, 0x1f, 0x52, 0xef,
	0xe5, 0xec, 0xed, 0xd4, 0xa3, 0xb7, 0x2d, 0x18, 0x83, 0xe6, 0xb3, 0x8c, 0x11, 0xc5, 0x42, 0x4e,
	0x93, 0x4a, 0x8c, 0x1f, 0x43, 0x2b, 0x9e, 0xbf, 0xe7, 0x8b, 0xcc, 0x8b, 0x16, 0xb1, 0x1f, 0x46,
	0x01, 0x51, 0x2d, 0xe4, 0xe8, 0xf4, 0x37, 0x15, 0x77, 0xe1, 0x7e, 0xca, 0x93, 0x90, 0x2d, 0xc3,
	0x6b, 0x96, 0x85, 0x71, 0x34, 0x88, 0x93, 0x15, 0xcb, 0x88, 0x26, 0xcd, 0x7f, 0x5a, 0xc2, 0x6d,
	0xa8, 0x5f, 0xb2, 0xf4, 0x72, 0xb0, 0x89, 0x16, 0xe4, 0x44, 0xda, 0x4a, 0x8e, 0x4d, 0x80, 0x45,
	0xe8, 0xbf, 0xe6, 0x49, 0x1a, 0xc6, 0x11, 0xa9, 0x5a, 0xc8, 0x51, 0xe9, 0x2d, 0x45, 0xdc, 0x54,
	0x78, 0x49, 0x4d, 0x7e, 0x27, 0x31, 0x7e, 0x0a, 0x27, 0xcb, 0x30, 0xba, 0x4a, 0x49, 0xdd, 0x52,
	0x9d, 0x46, 0xef, 0x91, 0x4c, 0x5a, 0xd6, 0xd1, 0x19, 0x8b, 0x35, 0x2f, 0xca, 0x92, 0x2d, 0xcd,
	0x7d, 0xed, 0x53, 0x80, 0xa3, 0x88, 0x0d, 0x50, 0xaf, 0xf8, 0x56, 0xd6, 0xa4, 0x53, 0x01, 0xf1,
	0x03, 0x38, 0xf9, 0xc8, 0x96, 0x1b, 0x2e, 0xfb, 0xd0, 0x69, 0x4e, 0x9e, 0x2b, 0xa7, 0xc8, 0xfe,
	0x82, 0xa0, 0x21, 0xb7, 0x4e, 0xd7, 0x71, 0x94, 0xf2, 0xff, 0xa8, 0xfa, 0x21, 0x54, 0xc5, 0xa5,
	0x79, 0x4a, 0x14, 0x4b, 0x75, 0x74, 0x7a, 0x60, 0x98, 0x40, 0x2d, 0x61, 0x9f, 0x5c, 0x31, 0x05,
	0x55, 0x4e, 0xa1, 0xa0, 0xd8, 0x2e, 0xe2, 0x69, 0x32, 0x5e, 0x53, 0xec, 0x3e, 0x9a, 0x8e, 0x5d,
	0x11, 0xe1, 0x90, 0xc8, 0x1e, 0x40, 0xbd, 0x90, 0xca, 0x8a, 0x50, 0x3e, 0x4c, 0x59, 0x11, 0x06,
	0x2d, 0x62, 0xab, 0x22, 0x90, 0xc4, 0x42, 0x4b, 0xc3, 0x6b, 0x2e, 0x8f, 0xd3, 0xa8, 0xc4, 0xf6,
	0x59, 0xbe, 0xcf, 0x24, 0xf6, 0xf9, 0xf1, 0x5c, 0xe5, 0xaf, 0xe7, 0x96, 0x0f, 0x07, 0x1d, 0x1f,
	0xce, 0x93, 0x77, 0x00, 0xc7, 0xf0, 0xb8, 0x01, 0x35, 0xb7, 0x3f, 0xbc, 0x98, 0xbe, 0x9a, 0x19,
	0x95, 0x82, 0x0c, 0xbd, 0x99, 0x81, 0xb0, 0x01, 0x4d, 0x41, 0x26, 0xde, 0x9b, 0x8b, 0xf1, 0x68,
	0xf2, 0xc2, 0x50, 0xf0, 0x3d, 0xb8, 0x23, 0x94, 0xbe, 0xeb, 0x4a, 0xe5, 0xdc, 0x50, 0x0b, 0x69,
	0xe8, 0xcd, 0x0e, 0x92, 0xd6, 0xf3, 0xa1, 0xea, 0xb2, 0xa0, 0x3f, 0x1d, 0x61, 0x07, 0x54, 0x97,
	0x05, 0xb8, 0xf5, 0xeb, 0xc0, 0xdb, 0x77, 0x4b, 0x9e, 0x4f, 0xc9, 0xae, 0xe0, 0x2e, 0xe8, 0x2e,
	0x0b, 0xce, 0xb3, 0x84, 0xb3, 0xd5, 0x3f, 0xfd, 0x0e, 0xea, 0xa2, 0x33, 0xf2, 0x75, 0x67, 0xa2,
	0x9b, 0x9d, 0x89, 0xbe, 0xef, 0x4c, 0xf4, 0x79, 0x6f, 0x56, 0x6e, 0xf6, 0x66, 0xe5, 0xdb, 0xde,
	0xac, 0xcc, 0xab, 0xf2, 0xc7, 0x7b, 0xf6, 0x33, 0x00, 0x00, 0xff, 0xff, 0x02, 0xd4, 0x23, 0xca,
	0x85, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DagAPIClient is the client API for DagAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DagAPIClient interface {
	// Dag is a unidirectional rpc allowing manipulation of low-level ipld objects
	Dag(ctx context.Context, in *DagRequest, opts ...grpc.CallOption) (*DagResponse, error)
	// DagStream is like Dag but with bidirectional streams
	DagStream(ctx context.Context, opts ...grpc.CallOption) (DagAPI_DagStreamClient, error)
}

type dagAPIClient struct {
	cc *grpc.ClientConn
}

func NewDagAPIClient(cc *grpc.ClientConn) DagAPIClient {
	return &dagAPIClient{cc}
}

func (c *dagAPIClient) Dag(ctx context.Context, in *DagRequest, opts ...grpc.CallOption) (*DagResponse, error) {
	out := new(DagResponse)
	err := c.cc.Invoke(ctx, "/pb.DagAPI/Dag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagAPIClient) DagStream(ctx context.Context, opts ...grpc.CallOption) (DagAPI_DagStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DagAPI_serviceDesc.Streams[0], "/pb.DagAPI/DagStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dagAPIDagStreamClient{stream}
	return x, nil
}

type DagAPI_DagStreamClient interface {
	Send(*DagRequest) error
	Recv() (*DagResponse, error)
	grpc.ClientStream
}

type dagAPIDagStreamClient struct {
	grpc.ClientStream
}

func (x *dagAPIDagStreamClient) Send(m *DagRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dagAPIDagStreamClient) Recv() (*DagResponse, error) {
	m := new(DagResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DagAPIServer is the server API for DagAPI service.
type DagAPIServer interface {
	// Dag is a unidirectional rpc allowing manipulation of low-level ipld objects
	Dag(context.Context, *DagRequest) (*DagResponse, error)
	// DagStream is like Dag but with bidirectional streams
	DagStream(DagAPI_DagStreamServer) error
}

// UnimplementedDagAPIServer can be embedded to have forward compatible implementations.
type UnimplementedDagAPIServer struct {
}

func (*UnimplementedDagAPIServer) Dag(ctx context.Context, req *DagRequest) (*DagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dag not implemented")
}
func (*UnimplementedDagAPIServer) DagStream(srv DagAPI_DagStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DagStream not implemented")
}

func RegisterDagAPIServer(s *grpc.Server, srv DagAPIServer) {
	s.RegisterService(&_DagAPI_serviceDesc, srv)
}

func _DagAPI_Dag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagAPIServer).Dag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DagAPI/Dag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagAPIServer).Dag(ctx, req.(*DagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DagAPI_DagStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DagAPIServer).DagStream(&dagAPIDagStreamServer{stream})
}

type DagAPI_DagStreamServer interface {
	Send(*DagResponse) error
	Recv() (*DagRequest, error)
	grpc.ServerStream
}

type dagAPIDagStreamServer struct {
	grpc.ServerStream
}

func (x *dagAPIDagStreamServer) Send(m *DagResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dagAPIDagStreamServer) Recv() (*DagRequest, error) {
	m := new(DagRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DagAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DagAPI",
	HandlerType: (*DagAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dag",
			Handler:    _DagAPI_Dag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DagStream",
			Handler:       _DagAPI_DagStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dag.proto",
}

func (m *DagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Links) > 0 {
		for k := range m.Links {
			v := m.Links[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDag(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDag(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintDag(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CidVersion != 0 {
		i = encodeVarintDag(dAtA, i, uint64(m.CidVersion))
		i--
		dAtA[i] = 0x30
	}
	if len(m.HashFunc) > 0 {
		i -= len(m.HashFunc)
		copy(dAtA[i:], m.HashFunc)
		i = encodeVarintDag(dAtA, i, uint64(len(m.HashFunc)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SerializationFormat) > 0 {
		i -= len(m.SerializationFormat)
		copy(dAtA[i:], m.SerializationFormat)
		i = encodeVarintDag(dAtA, i, uint64(len(m.SerializationFormat)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ObjectEncoding) > 0 {
		i -= len(m.ObjectEncoding)
		copy(dAtA[i:], m.ObjectEncoding)
		i = encodeVarintDag(dAtA, i, uint64(len(m.ObjectEncoding)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDag(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestType != 0 {
		i = encodeVarintDag(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RawData) > 0 {
		i -= len(m.RawData)
		copy(dAtA[i:], m.RawData)
		i = encodeVarintDag(dAtA, i, uint64(len(m.RawData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hashes) > 0 {
		for iNdEx := len(m.Hashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hashes[iNdEx])
			copy(dAtA[i:], m.Hashes[iNdEx])
			i = encodeVarintDag(dAtA, i, uint64(len(m.Hashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RequestType != 0 {
		i = encodeVarintDag(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IPLDLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPLDLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPLDLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintDag(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDag(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintDag(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPLDNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPLDNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPLDNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDag(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDag(dAtA []byte, offset int, v uint64) int {
	offset -= sovDag(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != 0 {
		n += 1 + sovDag(uint64(m.RequestType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDag(uint64(l))
	}
	l = len(m.ObjectEncoding)
	if l > 0 {
		n += 1 + l + sovDag(uint64(l))
	}
	l = len(m.SerializationFormat)
	if l > 0 {
		n += 1 + l + sovDag(uint64(l))
	}
	l = len(m.HashFunc)
	if l > 0 {
		n += 1 + l + sovDag(uint64(l))
	}
	if m.CidVersion != 0 {
		n += 1 + sovDag(uint64(m.CidVersion))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovDag(uint64(l))
	}
	if len(m.Links) > 0 {
		for k, v := range m.Links {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDag(uint64(len(k))) + 1 + len(v) + sovDag(uint64(len(v)))
			n += mapEntrySize + 1 + sovDag(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != 0 {
		n += 1 + sovDag(uint64(m.RequestType))
	}
	if len(m.Hashes) > 0 {
		for _, s := range m.Hashes {
			l = len(s)
			n += 1 + l + sovDag(uint64(l))
		}
	}
	l = len(m.RawData)
	if l > 0 {
		n += 1 + l + sovDag(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovDag(uint64(l))
		}
	}
	return n
}

func (m *IPLDLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovDag(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDag(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovDag(uint64(m.Size_))
	}
	return n
}

func (m *IPLDNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDag(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovDag(uint64(l))
		}
	}
	return n
}

func sovDag(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDag(x uint64) (n int) {
	return sovDag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= DAGREQTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectEncoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializationFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializationFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashFunc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashFunc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CidVersion", wireType)
			}
			m.CidVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CidVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Links == nil {
				m.Links = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDag
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDag
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDag
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDag
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Links[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDag
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= DAGREQTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawData = append(m.RawData[:0], dAtA[iNdEx:postIndex]...)
			if m.RawData == nil {
				m.RawData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &IPLDLink{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDag
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPLDLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPLDLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPLDLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDag
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPLDNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPLDNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPLDNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &IPLDLink{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDag
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDag
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDag
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDag
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDag        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDag          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDag = fmt.Errorf("proto: unexpected end of group")
)
