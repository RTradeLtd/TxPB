// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: p2p.proto

package pb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// equivalent of ipfs p2p close
type CloseRequest struct {
	All           bool   `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	ProtocolName  string `protobuf:"bytes,2,opt,name=protocolName,proto3" json:"protocolName,omitempty"`
	ListenAddress string `protobuf:"bytes,3,opt,name=listenAddress,proto3" json:"listenAddress,omitempty"`
	TargetAddress string `protobuf:"bytes,4,opt,name=targetAddress,proto3" json:"targetAddress,omitempty"`
}

func (m *CloseRequest) Reset()      { *m = CloseRequest{} }
func (*CloseRequest) ProtoMessage() {}
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{0}
}
func (m *CloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRequest.Merge(m, src)
}
func (m *CloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRequest proto.InternalMessageInfo

func (m *CloseRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *CloseRequest) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *CloseRequest) GetListenAddress() string {
	if m != nil {
		return m.ListenAddress
	}
	return ""
}

func (m *CloseRequest) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

// equivalent of ipfs p2p forward
type ForwardRequest struct {
	ProtocolName  string `protobuf:"bytes,1,opt,name=protocolName,proto3" json:"protocolName,omitempty"`
	ListenAddress string `protobuf:"bytes,2,opt,name=listenAddress,proto3" json:"listenAddress,omitempty"`
	TargetAddress string `protobuf:"bytes,3,opt,name=targetAddress,proto3" json:"targetAddress,omitempty"`
}

func (m *ForwardRequest) Reset()      { *m = ForwardRequest{} }
func (*ForwardRequest) ProtoMessage() {}
func (*ForwardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{1}
}
func (m *ForwardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardRequest.Merge(m, src)
}
func (m *ForwardRequest) XXX_Size() int {
	return m.Size()
}
func (m *ForwardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardRequest proto.InternalMessageInfo

func (m *ForwardRequest) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *ForwardRequest) GetListenAddress() string {
	if m != nil {
		return m.ListenAddress
	}
	return ""
}

func (m *ForwardRequest) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

// equivalent of ipfs p2p listen
type ListenRequest struct {
	ProtocolName  string `protobuf:"bytes,1,opt,name=protocolName,proto3" json:"protocolName,omitempty"`
	RemoteAddress string `protobuf:"bytes,2,opt,name=remoteAddress,proto3" json:"remoteAddress,omitempty"`
}

func (m *ListenRequest) Reset()      { *m = ListenRequest{} }
func (*ListenRequest) ProtoMessage() {}
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{2}
}
func (m *ListenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenRequest.Merge(m, src)
}
func (m *ListenRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenRequest proto.InternalMessageInfo

func (m *ListenRequest) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *ListenRequest) GetRemoteAddress() string {
	if m != nil {
		return m.RemoteAddress
	}
	return ""
}

// equivalent of ipfs p2p ls
type LsRequest struct {
	Verbose bool `protobuf:"varint,1,opt,name=verbose,proto3" json:"verbose,omitempty"`
}

func (m *LsRequest) Reset()      { *m = LsRequest{} }
func (*LsRequest) ProtoMessage() {}
func (*LsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{3}
}
func (m *LsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LsRequest.Merge(m, src)
}
func (m *LsRequest) XXX_Size() int {
	return m.Size()
}
func (m *LsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LsRequest proto.InternalMessageInfo

func (m *LsRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

type LsResponse struct {
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *LsResponse) Reset()      { *m = LsResponse{} }
func (*LsResponse) ProtoMessage() {}
func (*LsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{4}
}
func (m *LsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LsResponse.Merge(m, src)
}
func (m *LsResponse) XXX_Size() int {
	return m.Size()
}
func (m *LsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LsResponse proto.InternalMessageInfo

func (m *LsResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func init() {
	proto.RegisterType((*CloseRequest)(nil), "pb.CloseRequest")
	proto.RegisterType((*ForwardRequest)(nil), "pb.ForwardRequest")
	proto.RegisterType((*ListenRequest)(nil), "pb.ListenRequest")
	proto.RegisterType((*LsRequest)(nil), "pb.LsRequest")
	proto.RegisterType((*LsResponse)(nil), "pb.LsResponse")
}

func init() { proto.RegisterFile("p2p.proto", fileDescriptor_e7fdddb109e6467a) }

var fileDescriptor_e7fdddb109e6467a = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x8a, 0xd3, 0x40,
	0x1c, 0xc6, 0xf3, 0x4f, 0xdc, 0xae, 0xf9, 0xb3, 0x5d, 0xd6, 0xc1, 0x43, 0xc8, 0x61, 0x28, 0x83,
	0x2b, 0x41, 0x30, 0x0b, 0xd5, 0x17, 0xa8, 0xa2, 0x20, 0x14, 0x29, 0xb9, 0x79, 0x4c, 0xda, 0x31,
	0x16, 0x92, 0x4e, 0xcc, 0x4c, 0x14, 0x6f, 0x7d, 0x84, 0x3e, 0x86, 0x17, 0xef, 0x3e, 0x82, 0xc7,
	0x1e, 0x7b, 0x6c, 0xd2, 0x17, 0xf0, 0xe8, 0x51, 0x32, 0x69, 0xc0, 0x29, 0x1e, 0xba, 0xb7, 0xf9,
	0x7e, 0xfc, 0x12, 0xbe, 0xf9, 0x06, 0xdd, 0x62, 0x5c, 0x84, 0x45, 0x29, 0x94, 0x20, 0x76, 0x91,
	0xf8, 0x58, 0xa9, 0x65, 0xd6, 0x65, 0xff, 0x79, 0xba, 0x54, 0x9f, 0xaa, 0x24, 0x9c, 0x8b, 0xfc,
	0x2e, 0x15, 0xa9, 0xb8, 0xd3, 0x38, 0xa9, 0x3e, 0xea, 0xa4, 0x83, 0x3e, 0x75, 0x3a, 0xdb, 0x00,
	0x5e, 0xbd, 0xce, 0x84, 0xe4, 0x11, 0xff, 0x5c, 0x71, 0xa9, 0xc8, 0x0d, 0x3a, 0x71, 0x96, 0x79,
	0x30, 0x82, 0xe0, 0x61, 0xd4, 0x1e, 0x09, 0xc3, 0x2b, 0xed, 0xce, 0x45, 0xf6, 0x3e, 0xce, 0xb9,
	0x67, 0x8f, 0x20, 0x70, 0x23, 0x83, 0x91, 0x27, 0x38, 0xcc, 0x96, 0x52, 0xf1, 0xd5, 0x64, 0xb1,
	0x28, 0xb9, 0x94, 0x9e, 0xa3, 0x25, 0x13, 0xb6, 0x96, 0x8a, 0xcb, 0x94, 0xab, 0xde, 0x7a, 0xd0,
	0x59, 0x06, 0x64, 0x6b, 0xc0, 0xeb, 0xb7, 0xa2, 0xfc, 0x1a, 0x97, 0x8b, 0xbe, 0xd4, 0x69, 0x05,
	0x38, 0xa7, 0x82, 0x7d, 0x56, 0x05, 0xe7, 0x7f, 0x15, 0x3e, 0xe0, 0x70, 0xaa, 0x3f, 0xbb, 0x67,
	0x81, 0x92, 0xe7, 0x42, 0xf1, 0x93, 0x02, 0x06, 0x64, 0xb7, 0xe8, 0x4e, 0x65, 0xff, 0x5b, 0x0f,
	0x2f, 0xbf, 0xf0, 0x32, 0x11, 0x92, 0x1f, 0x07, 0xef, 0x23, 0x63, 0x88, 0xad, 0x26, 0x0b, 0xb1,
	0x92, 0x9c, 0x3c, 0xc6, 0x8b, 0x55, 0x9c, 0x73, 0xe9, 0xc1, 0xc8, 0x09, 0xdc, 0xa8, 0x0b, 0xe3,
	0x1f, 0x80, 0x83, 0xd9, 0x78, 0x36, 0x99, 0xbd, 0x23, 0x4f, 0xf1, 0x42, 0xbf, 0x22, 0xb9, 0x09,
	0x8b, 0x24, 0xfc, 0xf7, 0x41, 0x7d, 0xb7, 0x25, 0x6f, 0xf2, 0x42, 0x7d, 0x63, 0x16, 0x79, 0x86,
	0x97, 0xc7, 0x69, 0x09, 0x69, 0xb9, 0xb9, 0xb3, 0xe9, 0x06, 0x38, 0xe8, 0x46, 0x20, 0x8f, 0x5a,
	0x6c, 0x0c, 0x62, 0x9a, 0xb7, 0x68, 0x4f, 0x25, 0x19, 0x6a, 0xab, 0xbf, 0x9b, 0x7f, 0xdd, 0xc7,
	0xee, 0x0e, 0xcc, 0x7a, 0xf5, 0x72, 0x57, 0x53, 0x6b, 0x5f, 0x53, 0xf8, 0x5d, 0x53, 0xf8, 0x53,
	0x53, 0x58, 0x37, 0x14, 0xbe, 0x37, 0x14, 0x7e, 0x36, 0x14, 0x7e, 0x35, 0x14, 0xb6, 0x0d, 0x85,
	0x7d, 0x43, 0x61, 0x73, 0xa0, 0xd6, 0xf6, 0x40, 0xad, 0xdd, 0x81, 0x5a, 0xc9, 0x40, 0x8f, 0xfc,
	0xe2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x00, 0x9a, 0xea, 0xf4, 0x02, 0x00, 0x00,
}

func (this *CloseRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CloseRequest)
	if !ok {
		that2, ok := that.(CloseRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CloseRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CloseRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CloseRequest but is not nil && this == nil")
	}
	if this.All != that1.All {
		return fmt.Errorf("All this(%v) Not Equal that(%v)", this.All, that1.All)
	}
	if this.ProtocolName != that1.ProtocolName {
		return fmt.Errorf("ProtocolName this(%v) Not Equal that(%v)", this.ProtocolName, that1.ProtocolName)
	}
	if this.ListenAddress != that1.ListenAddress {
		return fmt.Errorf("ListenAddress this(%v) Not Equal that(%v)", this.ListenAddress, that1.ListenAddress)
	}
	if this.TargetAddress != that1.TargetAddress {
		return fmt.Errorf("TargetAddress this(%v) Not Equal that(%v)", this.TargetAddress, that1.TargetAddress)
	}
	return nil
}
func (this *CloseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloseRequest)
	if !ok {
		that2, ok := that.(CloseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.All != that1.All {
		return false
	}
	if this.ProtocolName != that1.ProtocolName {
		return false
	}
	if this.ListenAddress != that1.ListenAddress {
		return false
	}
	if this.TargetAddress != that1.TargetAddress {
		return false
	}
	return true
}
func (this *ForwardRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ForwardRequest)
	if !ok {
		that2, ok := that.(ForwardRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ForwardRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ForwardRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ForwardRequest but is not nil && this == nil")
	}
	if this.ProtocolName != that1.ProtocolName {
		return fmt.Errorf("ProtocolName this(%v) Not Equal that(%v)", this.ProtocolName, that1.ProtocolName)
	}
	if this.ListenAddress != that1.ListenAddress {
		return fmt.Errorf("ListenAddress this(%v) Not Equal that(%v)", this.ListenAddress, that1.ListenAddress)
	}
	if this.TargetAddress != that1.TargetAddress {
		return fmt.Errorf("TargetAddress this(%v) Not Equal that(%v)", this.TargetAddress, that1.TargetAddress)
	}
	return nil
}
func (this *ForwardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardRequest)
	if !ok {
		that2, ok := that.(ForwardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProtocolName != that1.ProtocolName {
		return false
	}
	if this.ListenAddress != that1.ListenAddress {
		return false
	}
	if this.TargetAddress != that1.TargetAddress {
		return false
	}
	return true
}
func (this *ListenRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListenRequest)
	if !ok {
		that2, ok := that.(ListenRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListenRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListenRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListenRequest but is not nil && this == nil")
	}
	if this.ProtocolName != that1.ProtocolName {
		return fmt.Errorf("ProtocolName this(%v) Not Equal that(%v)", this.ProtocolName, that1.ProtocolName)
	}
	if this.RemoteAddress != that1.RemoteAddress {
		return fmt.Errorf("RemoteAddress this(%v) Not Equal that(%v)", this.RemoteAddress, that1.RemoteAddress)
	}
	return nil
}
func (this *ListenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListenRequest)
	if !ok {
		that2, ok := that.(ListenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProtocolName != that1.ProtocolName {
		return false
	}
	if this.RemoteAddress != that1.RemoteAddress {
		return false
	}
	return true
}
func (this *LsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LsRequest)
	if !ok {
		that2, ok := that.(LsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *LsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *LsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *LsRequest but is not nil && this == nil")
	}
	if this.Verbose != that1.Verbose {
		return fmt.Errorf("Verbose this(%v) Not Equal that(%v)", this.Verbose, that1.Verbose)
	}
	return nil
}
func (this *LsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LsRequest)
	if !ok {
		that2, ok := that.(LsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Verbose != that1.Verbose {
		return false
	}
	return true
}
func (this *LsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LsResponse)
	if !ok {
		that2, ok := that.(LsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *LsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *LsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *LsResponse but is not nil && this == nil")
	}
	if len(this.Names) != len(that1.Names) {
		return fmt.Errorf("Names this(%v) Not Equal that(%v)", len(this.Names), len(that1.Names))
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return fmt.Errorf("Names this[%v](%v) Not Equal that[%v](%v)", i, this.Names[i], i, that1.Names[i])
		}
	}
	return nil
}
func (this *LsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LsResponse)
	if !ok {
		that2, ok := that.(LsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Names) != len(that1.Names) {
		return false
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return false
		}
	}
	return true
}
func (this *CloseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CloseRequest{")
	s = append(s, "All: "+fmt.Sprintf("%#v", this.All)+",\n")
	s = append(s, "ProtocolName: "+fmt.Sprintf("%#v", this.ProtocolName)+",\n")
	s = append(s, "ListenAddress: "+fmt.Sprintf("%#v", this.ListenAddress)+",\n")
	s = append(s, "TargetAddress: "+fmt.Sprintf("%#v", this.TargetAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForwardRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ForwardRequest{")
	s = append(s, "ProtocolName: "+fmt.Sprintf("%#v", this.ProtocolName)+",\n")
	s = append(s, "ListenAddress: "+fmt.Sprintf("%#v", this.ListenAddress)+",\n")
	s = append(s, "TargetAddress: "+fmt.Sprintf("%#v", this.TargetAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListenRequest{")
	s = append(s, "ProtocolName: "+fmt.Sprintf("%#v", this.ProtocolName)+",\n")
	s = append(s, "RemoteAddress: "+fmt.Sprintf("%#v", this.RemoteAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LsRequest{")
	s = append(s, "Verbose: "+fmt.Sprintf("%#v", this.Verbose)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LsResponse{")
	s = append(s, "Names: "+fmt.Sprintf("%#v", this.Names)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringP2P(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// P2PAPIClient is the client API for P2PAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PAPIClient interface {
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*Empty, error)
	Forward(ctx context.Context, in *ForwardRequest, opts ...grpc.CallOption) (*Empty, error)
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (*Empty, error)
	Ls(ctx context.Context, in *LsRequest, opts ...grpc.CallOption) (*LsResponse, error)
}

type p2PAPIClient struct {
	cc *grpc.ClientConn
}

func NewP2PAPIClient(cc *grpc.ClientConn) P2PAPIClient {
	return &p2PAPIClient{cc}
}

func (c *p2PAPIClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.P2PAPI/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PAPIClient) Forward(ctx context.Context, in *ForwardRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.P2PAPI/Forward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PAPIClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.P2PAPI/Listen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PAPIClient) Ls(ctx context.Context, in *LsRequest, opts ...grpc.CallOption) (*LsResponse, error) {
	out := new(LsResponse)
	err := c.cc.Invoke(ctx, "/pb.P2PAPI/Ls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PAPIServer is the server API for P2PAPI service.
type P2PAPIServer interface {
	Close(context.Context, *CloseRequest) (*Empty, error)
	Forward(context.Context, *ForwardRequest) (*Empty, error)
	Listen(context.Context, *ListenRequest) (*Empty, error)
	Ls(context.Context, *LsRequest) (*LsResponse, error)
}

// UnimplementedP2PAPIServer can be embedded to have forward compatible implementations.
type UnimplementedP2PAPIServer struct {
}

func (*UnimplementedP2PAPIServer) Close(ctx context.Context, req *CloseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedP2PAPIServer) Forward(ctx context.Context, req *ForwardRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forward not implemented")
}
func (*UnimplementedP2PAPIServer) Listen(ctx context.Context, req *ListenRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (*UnimplementedP2PAPIServer) Ls(ctx context.Context, req *LsRequest) (*LsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ls not implemented")
}

func RegisterP2PAPIServer(s *grpc.Server, srv P2PAPIServer) {
	s.RegisterService(&_P2PAPI_serviceDesc, srv)
}

func _P2PAPI_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PAPIServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PAPI/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PAPIServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PAPI_Forward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PAPIServer).Forward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PAPI/Forward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PAPIServer).Forward(ctx, req.(*ForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PAPI_Listen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PAPIServer).Listen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PAPI/Listen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PAPIServer).Listen(ctx, req.(*ListenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PAPI_Ls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PAPIServer).Ls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.P2PAPI/Ls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PAPIServer).Ls(ctx, req.(*LsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _P2PAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.P2PAPI",
	HandlerType: (*P2PAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Close",
			Handler:    _P2PAPI_Close_Handler,
		},
		{
			MethodName: "Forward",
			Handler:    _P2PAPI_Forward_Handler,
		},
		{
			MethodName: "Listen",
			Handler:    _P2PAPI_Listen_Handler,
		},
		{
			MethodName: "Ls",
			Handler:    _P2PAPI_Ls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "p2p.proto",
}

func (m *CloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ListenAddress) > 0 {
		i -= len(m.ListenAddress)
		copy(dAtA[i:], m.ListenAddress)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.ListenAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProtocolName) > 0 {
		i -= len(m.ProtocolName)
		copy(dAtA[i:], m.ProtocolName)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.ProtocolName)))
		i--
		dAtA[i] = 0x12
	}
	if m.All {
		i--
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForwardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ListenAddress) > 0 {
		i -= len(m.ListenAddress)
		copy(dAtA[i:], m.ListenAddress)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.ListenAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProtocolName) > 0 {
		i -= len(m.ProtocolName)
		copy(dAtA[i:], m.ProtocolName)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.ProtocolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteAddress) > 0 {
		i -= len(m.RemoteAddress)
		copy(dAtA[i:], m.RemoteAddress)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.RemoteAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProtocolName) > 0 {
		i -= len(m.ProtocolName)
		copy(dAtA[i:], m.ProtocolName)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.ProtocolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Verbose {
		i--
		if m.Verbose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintP2P(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintP2P(dAtA []byte, offset int, v uint64) int {
	offset -= sovP2P(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedCloseRequest(r randyP2P, easy bool) *CloseRequest {
	this := &CloseRequest{}
	this.All = bool(bool(r.Intn(2) == 0))
	this.ProtocolName = string(randStringP2P(r))
	this.ListenAddress = string(randStringP2P(r))
	this.TargetAddress = string(randStringP2P(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedForwardRequest(r randyP2P, easy bool) *ForwardRequest {
	this := &ForwardRequest{}
	this.ProtocolName = string(randStringP2P(r))
	this.ListenAddress = string(randStringP2P(r))
	this.TargetAddress = string(randStringP2P(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListenRequest(r randyP2P, easy bool) *ListenRequest {
	this := &ListenRequest{}
	this.ProtocolName = string(randStringP2P(r))
	this.RemoteAddress = string(randStringP2P(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLsRequest(r randyP2P, easy bool) *LsRequest {
	this := &LsRequest{}
	this.Verbose = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLsResponse(r randyP2P, easy bool) *LsResponse {
	this := &LsResponse{}
	v1 := r.Intn(10)
	this.Names = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Names[i] = string(randStringP2P(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyP2P interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneP2P(r randyP2P) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringP2P(r randyP2P) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneP2P(r)
	}
	return string(tmps)
}
func randUnrecognizedP2P(r randyP2P, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldP2P(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldP2P(dAtA []byte, r randyP2P, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateP2P(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.All {
		n += 2
	}
	l = len(m.ProtocolName)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.ListenAddress)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	return n
}

func (m *ForwardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProtocolName)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.ListenAddress)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	return n
}

func (m *ListenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProtocolName)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.RemoteAddress)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	return n
}

func (m *LsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Verbose {
		n += 2
	}
	return n
}

func (m *LsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovP2P(uint64(l))
		}
	}
	return n
}

func sovP2P(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozP2P(x uint64) (n int) {
	return sovP2P(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CloseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseRequest{`,
		`All:` + fmt.Sprintf("%v", this.All) + `,`,
		`ProtocolName:` + fmt.Sprintf("%v", this.ProtocolName) + `,`,
		`ListenAddress:` + fmt.Sprintf("%v", this.ListenAddress) + `,`,
		`TargetAddress:` + fmt.Sprintf("%v", this.TargetAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardRequest{`,
		`ProtocolName:` + fmt.Sprintf("%v", this.ProtocolName) + `,`,
		`ListenAddress:` + fmt.Sprintf("%v", this.ListenAddress) + `,`,
		`TargetAddress:` + fmt.Sprintf("%v", this.TargetAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListenRequest{`,
		`ProtocolName:` + fmt.Sprintf("%v", this.ProtocolName) + `,`,
		`RemoteAddress:` + fmt.Sprintf("%v", this.RemoteAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LsRequest{`,
		`Verbose:` + fmt.Sprintf("%v", this.Verbose) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LsResponse{`,
		`Names:` + fmt.Sprintf("%v", this.Names) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringP2P(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verbose = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipP2P(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthP2P
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupP2P
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthP2P
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthP2P        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowP2P          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupP2P = fmt.Errorf("proto: unexpected end of group")
)
