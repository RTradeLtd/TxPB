// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ipns.proto

package pb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NameResolveRequest is used to resolve an IPNS name
type NameResolveRequest struct {
	// the name to resolve
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// recursion depth limit
	Depth uint32 `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	// number of ipns records to retrieve
	// before selecting the best record
	DhtRecordCount uint32 `protobuf:"varint,3,opt,name=dhtRecordCount,proto3" json:"dhtRecordCount,omitempty"`
	// the amount of time to wait
	// for records to be fetched and verified
	DhtTimeout int32 `protobuf:"varint,4,opt,name=dhtTimeout,proto3" json:"dhtTimeout,omitempty"`
}

func (m *NameResolveRequest) Reset()      { *m = NameResolveRequest{} }
func (*NameResolveRequest) ProtoMessage() {}
func (*NameResolveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d5b16fb32bfe8ea, []int{0}
}
func (m *NameResolveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameResolveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameResolveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameResolveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameResolveRequest.Merge(m, src)
}
func (m *NameResolveRequest) XXX_Size() int {
	return m.Size()
}
func (m *NameResolveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NameResolveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NameResolveRequest proto.InternalMessageInfo

func (m *NameResolveRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameResolveRequest) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *NameResolveRequest) GetDhtRecordCount() uint32 {
	if m != nil {
		return m.DhtRecordCount
	}
	return 0
}

func (m *NameResolveRequest) GetDhtTimeout() int32 {
	if m != nil {
		return m.DhtTimeout
	}
	return 0
}

// NameResolveRequest is an answer to a resolve request
type NameResolveResult struct {
	// the path that was resolved
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// an error if any
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *NameResolveResult) Reset()      { *m = NameResolveResult{} }
func (*NameResolveResult) ProtoMessage() {}
func (*NameResolveResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d5b16fb32bfe8ea, []int{1}
}
func (m *NameResolveResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameResolveResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameResolveResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameResolveResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameResolveResult.Merge(m, src)
}
func (m *NameResolveResult) XXX_Size() int {
	return m.Size()
}
func (m *NameResolveResult) XXX_DiscardUnknown() {
	xxx_messageInfo_NameResolveResult.DiscardUnknown(m)
}

var xxx_messageInfo_NameResolveResult proto.InternalMessageInfo

func (m *NameResolveResult) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *NameResolveResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// NamePublishRequest is used to publish a value
type NamePublishRequest struct {
	// the private key (name) for this record
	PrivateKey []byte `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	// the value of this record
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// the eol for this publish, if 0 implies
	// as NameSys::Publish call, if non 0 implies
	// a NameSys:PublishWithEOL call
	Eol int32 `protobuf:"varint,3,opt,name=eol,proto3" json:"eol,omitempty"`
}

func (m *NamePublishRequest) Reset()      { *m = NamePublishRequest{} }
func (*NamePublishRequest) ProtoMessage() {}
func (*NamePublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d5b16fb32bfe8ea, []int{2}
}
func (m *NamePublishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamePublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamePublishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamePublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamePublishRequest.Merge(m, src)
}
func (m *NamePublishRequest) XXX_Size() int {
	return m.Size()
}
func (m *NamePublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NamePublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NamePublishRequest proto.InternalMessageInfo

func (m *NamePublishRequest) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *NamePublishRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NamePublishRequest) GetEol() int32 {
	if m != nil {
		return m.Eol
	}
	return 0
}

func init() {
	proto.RegisterType((*NameResolveRequest)(nil), "pb.NameResolveRequest")
	proto.RegisterType((*NameResolveResult)(nil), "pb.NameResolveResult")
	proto.RegisterType((*NamePublishRequest)(nil), "pb.NamePublishRequest")
}

func init() { proto.RegisterFile("ipns.proto", fileDescriptor_4d5b16fb32bfe8ea) }

var fileDescriptor_4d5b16fb32bfe8ea = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbf, 0xae, 0xd3, 0x30,
	0x18, 0xc5, 0xf3, 0xf5, 0x0f, 0x55, 0x3f, 0x15, 0x04, 0x16, 0xa0, 0x28, 0x83, 0x55, 0x65, 0x40,
	0x5d, 0x48, 0x11, 0x30, 0x21, 0x31, 0x14, 0xc4, 0x50, 0x21, 0x55, 0x95, 0x61, 0x64, 0x49, 0x1a,
	0xd3, 0x44, 0x4a, 0x62, 0x93, 0xd8, 0x95, 0xba, 0x31, 0x31, 0xf3, 0x18, 0x3c, 0x42, 0x1f, 0x81,
	0xb1, 0x63, 0xc7, 0x26, 0x7d, 0x01, 0x46, 0xc6, 0xab, 0x38, 0xad, 0x6e, 0x7b, 0x3b, 0xdd, 0xed,
	0x9c, 0x5f, 0xe2, 0xa3, 0x73, 0x2c, 0x23, 0xc6, 0x32, 0x2b, 0x3c, 0x99, 0x0b, 0x25, 0x48, 0x4b,
	0x06, 0x0e, 0x6a, 0x15, 0x27, 0x8d, 0x77, 0x5e, 0x2e, 0x63, 0x15, 0xe9, 0xc0, 0x5b, 0x88, 0x74,
	0xbc, 0x14, 0x4b, 0x31, 0x36, 0x38, 0xd0, 0xdf, 0x8d, 0x33, 0xc6, 0xa8, 0xe6, 0x77, 0xf7, 0x17,
	0x20, 0x99, 0xf9, 0x29, 0x67, 0xbc, 0x10, 0xc9, 0x8a, 0x33, 0xfe, 0x43, 0xf3, 0x42, 0x11, 0x82,
	0x9d, 0xcc, 0x4f, 0xb9, 0x0d, 0x43, 0x18, 0xf5, 0x99, 0xd1, 0xe4, 0x29, 0x76, 0x43, 0x2e, 0x55,
	0x64, 0xb7, 0x86, 0x30, 0x7a, 0xc8, 0x1a, 0x43, 0x5e, 0xe0, 0xa3, 0x30, 0x52, 0x8c, 0x2f, 0x44,
	0x1e, 0x7e, 0x14, 0x3a, 0x53, 0x76, 0xdb, 0x7c, 0xbe, 0x43, 0x09, 0x45, 0x0c, 0x23, 0xf5, 0x35,
	0x4e, 0xb9, 0xd0, 0xca, 0xee, 0x0c, 0x61, 0xd4, 0x65, 0x67, 0xc4, 0x7d, 0x8f, 0x4f, 0x2e, 0x7a,
	0x14, 0x3a, 0x31, 0x35, 0xa4, 0xaf, 0xa2, 0x53, 0x8d, 0x5a, 0xd7, 0x35, 0x78, 0x9e, 0x8b, 0xdc,
	0xd4, 0xe8, 0xb3, 0xc6, 0xb8, 0xdf, 0x9a, 0x19, 0x73, 0x1d, 0x24, 0x71, 0x11, 0x9d, 0x66, 0x50,
	0x44, 0x99, 0xc7, 0x2b, 0x5f, 0xf1, 0xcf, 0x7c, 0x6d, 0x52, 0x06, 0xec, 0x8c, 0xd4, 0x59, 0x2b,
	0x3f, 0xd1, 0xfc, 0x94, 0x65, 0x0c, 0x79, 0x8c, 0x6d, 0x2e, 0x12, 0xb3, 0xa3, 0xcb, 0x6a, 0xf9,
	0x7a, 0x03, 0xd8, 0x9b, 0xce, 0x67, 0x5f, 0x26, 0xf3, 0x29, 0x79, 0x87, 0xbd, 0x63, 0x49, 0xf2,
	0xdc, 0x93, 0x81, 0x77, 0x7d, 0x7b, 0xce, 0xb3, 0x2b, 0x5e, 0xaf, 0x71, 0x2d, 0x32, 0xc1, 0xc1,
	0x11, 0x4d, 0x8a, 0x75, 0xb6, 0xb8, 0x77, 0xc0, 0x2b, 0x20, 0x1e, 0xf6, 0x8e, 0x23, 0x6f, 0x4f,
	0x5f, 0xae, 0x76, 0xfa, 0x35, 0xff, 0x94, 0x4a, 0xb5, 0x76, 0xad, 0x0f, 0x6f, 0x77, 0x25, 0xb5,
	0xf6, 0x25, 0x85, 0x7f, 0x25, 0x85, 0xff, 0x25, 0x85, 0x9f, 0x15, 0x85, 0x3f, 0x15, 0x85, 0x4d,
	0x45, 0xe1, 0x6f, 0x45, 0x61, 0x5b, 0x51, 0xd8, 0x57, 0x14, 0x7e, 0x1f, 0xa8, 0xb5, 0x3d, 0x50,
	0x6b, 0x77, 0xa0, 0x56, 0xf0, 0xc0, 0xbc, 0x8e, 0x37, 0x37, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b,
	0xbb, 0x89, 0x7f, 0x6a, 0x02, 0x00, 0x00,
}

func (this *NameResolveRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NameResolveRequest)
	if !ok {
		that2, ok := that.(NameResolveRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NameResolveRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NameResolveRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NameResolveRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Depth != that1.Depth {
		return fmt.Errorf("Depth this(%v) Not Equal that(%v)", this.Depth, that1.Depth)
	}
	if this.DhtRecordCount != that1.DhtRecordCount {
		return fmt.Errorf("DhtRecordCount this(%v) Not Equal that(%v)", this.DhtRecordCount, that1.DhtRecordCount)
	}
	if this.DhtTimeout != that1.DhtTimeout {
		return fmt.Errorf("DhtTimeout this(%v) Not Equal that(%v)", this.DhtTimeout, that1.DhtTimeout)
	}
	return nil
}
func (this *NameResolveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameResolveRequest)
	if !ok {
		that2, ok := that.(NameResolveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Depth != that1.Depth {
		return false
	}
	if this.DhtRecordCount != that1.DhtRecordCount {
		return false
	}
	if this.DhtTimeout != that1.DhtTimeout {
		return false
	}
	return true
}
func (this *NameResolveResult) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NameResolveResult)
	if !ok {
		that2, ok := that.(NameResolveResult)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NameResolveResult")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NameResolveResult but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NameResolveResult but is not nil && this == nil")
	}
	if this.Path != that1.Path {
		return fmt.Errorf("Path this(%v) Not Equal that(%v)", this.Path, that1.Path)
	}
	if this.Error != that1.Error {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *NameResolveResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameResolveResult)
	if !ok {
		that2, ok := that.(NameResolveResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *NamePublishRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NamePublishRequest)
	if !ok {
		that2, ok := that.(NamePublishRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NamePublishRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NamePublishRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NamePublishRequest but is not nil && this == nil")
	}
	if !bytes.Equal(this.PrivateKey, that1.PrivateKey) {
		return fmt.Errorf("PrivateKey this(%v) Not Equal that(%v)", this.PrivateKey, that1.PrivateKey)
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	if this.Eol != that1.Eol {
		return fmt.Errorf("Eol this(%v) Not Equal that(%v)", this.Eol, that1.Eol)
	}
	return nil
}
func (this *NamePublishRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamePublishRequest)
	if !ok {
		that2, ok := that.(NamePublishRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PrivateKey, that1.PrivateKey) {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Eol != that1.Eol {
		return false
	}
	return true
}
func (this *NameResolveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.NameResolveRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Depth: "+fmt.Sprintf("%#v", this.Depth)+",\n")
	s = append(s, "DhtRecordCount: "+fmt.Sprintf("%#v", this.DhtRecordCount)+",\n")
	s = append(s, "DhtTimeout: "+fmt.Sprintf("%#v", this.DhtTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NameResolveResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.NameResolveResult{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamePublishRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.NamePublishRequest{")
	s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Eol: "+fmt.Sprintf("%#v", this.Eol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringIpns(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IPNSAPIClient is the client API for IPNSAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPNSAPIClient interface {
	// Resolve is used to resolve a name, waiting for the request to complete
	Resolve(ctx context.Context, in *NameResolveRequest, opts ...grpc.CallOption) (*NameResolveResult, error)
	// ResolveAsync is like Resolve, except instead of waiting for the request
	// to complete, we send back a stream which we will send the result on
	ResolveAsync(ctx context.Context, in *NameResolveRequest, opts ...grpc.CallOption) (IPNSAPI_ResolveAsyncClient, error)
	// Publish is used to publish an IPNS record, with/with-out an EOL
	Publish(ctx context.Context, in *NamePublishRequest, opts ...grpc.CallOption) (*Empty, error)
}

type iPNSAPIClient struct {
	cc *grpc.ClientConn
}

func NewIPNSAPIClient(cc *grpc.ClientConn) IPNSAPIClient {
	return &iPNSAPIClient{cc}
}

func (c *iPNSAPIClient) Resolve(ctx context.Context, in *NameResolveRequest, opts ...grpc.CallOption) (*NameResolveResult, error) {
	out := new(NameResolveResult)
	err := c.cc.Invoke(ctx, "/pb.IPNSAPI/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPNSAPIClient) ResolveAsync(ctx context.Context, in *NameResolveRequest, opts ...grpc.CallOption) (IPNSAPI_ResolveAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IPNSAPI_serviceDesc.Streams[0], "/pb.IPNSAPI/ResolveAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &iPNSAPIResolveAsyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IPNSAPI_ResolveAsyncClient interface {
	Recv() (*NameResolveResult, error)
	grpc.ClientStream
}

type iPNSAPIResolveAsyncClient struct {
	grpc.ClientStream
}

func (x *iPNSAPIResolveAsyncClient) Recv() (*NameResolveResult, error) {
	m := new(NameResolveResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iPNSAPIClient) Publish(ctx context.Context, in *NamePublishRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.IPNSAPI/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPNSAPIServer is the server API for IPNSAPI service.
type IPNSAPIServer interface {
	// Resolve is used to resolve a name, waiting for the request to complete
	Resolve(context.Context, *NameResolveRequest) (*NameResolveResult, error)
	// ResolveAsync is like Resolve, except instead of waiting for the request
	// to complete, we send back a stream which we will send the result on
	ResolveAsync(*NameResolveRequest, IPNSAPI_ResolveAsyncServer) error
	// Publish is used to publish an IPNS record, with/with-out an EOL
	Publish(context.Context, *NamePublishRequest) (*Empty, error)
}

// UnimplementedIPNSAPIServer can be embedded to have forward compatible implementations.
type UnimplementedIPNSAPIServer struct {
}

func (*UnimplementedIPNSAPIServer) Resolve(ctx context.Context, req *NameResolveRequest) (*NameResolveResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (*UnimplementedIPNSAPIServer) ResolveAsync(req *NameResolveRequest, srv IPNSAPI_ResolveAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method ResolveAsync not implemented")
}
func (*UnimplementedIPNSAPIServer) Publish(ctx context.Context, req *NamePublishRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterIPNSAPIServer(s *grpc.Server, srv IPNSAPIServer) {
	s.RegisterService(&_IPNSAPI_serviceDesc, srv)
}

func _IPNSAPI_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPNSAPIServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IPNSAPI/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPNSAPIServer).Resolve(ctx, req.(*NameResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPNSAPI_ResolveAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NameResolveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IPNSAPIServer).ResolveAsync(m, &iPNSAPIResolveAsyncServer{stream})
}

type IPNSAPI_ResolveAsyncServer interface {
	Send(*NameResolveResult) error
	grpc.ServerStream
}

type iPNSAPIResolveAsyncServer struct {
	grpc.ServerStream
}

func (x *iPNSAPIResolveAsyncServer) Send(m *NameResolveResult) error {
	return x.ServerStream.SendMsg(m)
}

func _IPNSAPI_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamePublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPNSAPIServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IPNSAPI/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPNSAPIServer).Publish(ctx, req.(*NamePublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPNSAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.IPNSAPI",
	HandlerType: (*IPNSAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _IPNSAPI_Resolve_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _IPNSAPI_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ResolveAsync",
			Handler:       _IPNSAPI_ResolveAsync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ipns.proto",
}

func (m *NameResolveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameResolveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameResolveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DhtTimeout != 0 {
		i = encodeVarintIpns(dAtA, i, uint64(m.DhtTimeout))
		i--
		dAtA[i] = 0x20
	}
	if m.DhtRecordCount != 0 {
		i = encodeVarintIpns(dAtA, i, uint64(m.DhtRecordCount))
		i--
		dAtA[i] = 0x18
	}
	if m.Depth != 0 {
		i = encodeVarintIpns(dAtA, i, uint64(m.Depth))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIpns(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameResolveResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameResolveResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameResolveResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintIpns(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintIpns(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamePublishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamePublishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamePublishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Eol != 0 {
		i = encodeVarintIpns(dAtA, i, uint64(m.Eol))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintIpns(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintIpns(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIpns(dAtA []byte, offset int, v uint64) int {
	offset -= sovIpns(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedNameResolveRequest(r randyIpns, easy bool) *NameResolveRequest {
	this := &NameResolveRequest{}
	this.Name = string(randStringIpns(r))
	this.Depth = uint32(r.Uint32())
	this.DhtRecordCount = uint32(r.Uint32())
	this.DhtTimeout = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.DhtTimeout *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNameResolveResult(r randyIpns, easy bool) *NameResolveResult {
	this := &NameResolveResult{}
	this.Path = string(randStringIpns(r))
	this.Error = string(randStringIpns(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNamePublishRequest(r randyIpns, easy bool) *NamePublishRequest {
	this := &NamePublishRequest{}
	v1 := r.Intn(100)
	this.PrivateKey = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.PrivateKey[i] = byte(r.Intn(256))
	}
	this.Value = string(randStringIpns(r))
	this.Eol = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Eol *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyIpns interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneIpns(r randyIpns) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringIpns(r randyIpns) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneIpns(r)
	}
	return string(tmps)
}
func randUnrecognizedIpns(r randyIpns, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldIpns(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldIpns(dAtA []byte, r randyIpns, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateIpns(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateIpns(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateIpns(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateIpns(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateIpns(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateIpns(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateIpns(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *NameResolveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIpns(uint64(l))
	}
	if m.Depth != 0 {
		n += 1 + sovIpns(uint64(m.Depth))
	}
	if m.DhtRecordCount != 0 {
		n += 1 + sovIpns(uint64(m.DhtRecordCount))
	}
	if m.DhtTimeout != 0 {
		n += 1 + sovIpns(uint64(m.DhtTimeout))
	}
	return n
}

func (m *NameResolveResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovIpns(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovIpns(uint64(l))
	}
	return n
}

func (m *NamePublishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovIpns(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovIpns(uint64(l))
	}
	if m.Eol != 0 {
		n += 1 + sovIpns(uint64(m.Eol))
	}
	return n
}

func sovIpns(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIpns(x uint64) (n int) {
	return sovIpns(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NameResolveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NameResolveRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Depth:` + fmt.Sprintf("%v", this.Depth) + `,`,
		`DhtRecordCount:` + fmt.Sprintf("%v", this.DhtRecordCount) + `,`,
		`DhtTimeout:` + fmt.Sprintf("%v", this.DhtTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NameResolveResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NameResolveResult{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamePublishRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamePublishRequest{`,
		`PrivateKey:` + fmt.Sprintf("%v", this.PrivateKey) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Eol:` + fmt.Sprintf("%v", this.Eol) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIpns(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NameResolveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameResolveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameResolveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DhtRecordCount", wireType)
			}
			m.DhtRecordCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DhtRecordCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DhtTimeout", wireType)
			}
			m.DhtTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DhtTimeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpns
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIpns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameResolveResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameResolveResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameResolveResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpns
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIpns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamePublishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamePublishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamePublishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpns
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIpns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = append(m.PrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivateKey == nil {
				m.PrivateKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eol", wireType)
			}
			m.Eol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eol |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpns
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIpns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIpns(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIpns
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpns
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIpns
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthIpns
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIpns
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIpns(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthIpns
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIpns = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIpns   = fmt.Errorf("proto: integer overflow")
)
