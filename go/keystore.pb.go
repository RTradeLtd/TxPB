// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: keystore.proto

package pb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// KSREQTYPE indicates the particular KeystoreAPI request being performed
type KSREQTYPE int32

const (
	// KS_HAS is used to check if the key exists in our keystore
	KSREQTYPE_KS_HAS KSREQTYPE = 0
	// KS_GET is used to retrieve private key bytes from our keystore
	KSREQTYPE_KS_GET KSREQTYPE = 1
	// KS_PUT is used to store private key bytes in our keystore
	KSREQTYPE_KS_PUT KSREQTYPE = 2
	// KS_DELETE is used to delete private keys from our keystore
	KSREQTYPE_KS_DELETE KSREQTYPE = 3
	// KS_LIST is used to list all keys in our keystore by their name
	KSREQTYPE_KS_LIST KSREQTYPE = 4
)

var KSREQTYPE_name = map[int32]string{
	0: "KS_HAS",
	1: "KS_GET",
	2: "KS_PUT",
	3: "KS_DELETE",
	4: "KS_LIST",
}

var KSREQTYPE_value = map[string]int32{
	"KS_HAS":    0,
	"KS_GET":    1,
	"KS_PUT":    2,
	"KS_DELETE": 3,
	"KS_LIST":   4,
}

func (x KSREQTYPE) String() string {
	return proto.EnumName(KSREQTYPE_name, int32(x))
}

func (KSREQTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac3dafe49d0dc795, []int{0}
}

// Used to submit a request to Keystore RPC
type KeystoreRequest struct {
	// indicates the request type being performed
	RequestType KSREQTYPE `protobuf:"varint,1,opt,name=requestType,proto3,enum=pb.KSREQTYPE" json:"requestType,omitempty"`
	// name of the key the request is for
	// sent by: KS_HAS, KS_GET, KS_PUT, KS_DELETE
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// the actual private key bytes
	// sent by: KS_PUT
	PrivateKey []byte `protobuf:"bytes,3,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
}

func (m *KeystoreRequest) Reset()         { *m = KeystoreRequest{} }
func (m *KeystoreRequest) String() string { return proto.CompactTextString(m) }
func (*KeystoreRequest) ProtoMessage()    {}
func (*KeystoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3dafe49d0dc795, []int{0}
}
func (m *KeystoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeystoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeystoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeystoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeystoreRequest.Merge(m, src)
}
func (m *KeystoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeystoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeystoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeystoreRequest proto.InternalMessageInfo

func (m *KeystoreRequest) GetRequestType() KSREQTYPE {
	if m != nil {
		return m.RequestType
	}
	return KSREQTYPE_KS_HAS
}

func (m *KeystoreRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeystoreRequest) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// Used in response to a Keystore RPC
type KeystoreResponse struct {
	// indicates the request type being performed
	RequestType KSREQTYPE `protobuf:"varint,1,opt,name=requestType,proto3,enum=pb.KSREQTYPE" json:"requestType,omitempty"`
	// the private key bytes
	// sent by: KS_GET
	PrivateKey []byte `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	// contains all known key names
	// sent by: KS_LIST
	KeyNames []string `protobuf:"bytes,3,rep,name=keyNames,proto3" json:"keyNames,omitempty"`
	// indicates if we have the key in our keystore
	// sent by: KS_HAS
	Has bool `protobuf:"varint,4,opt,name=has,proto3" json:"has,omitempty"`
}

func (m *KeystoreResponse) Reset()         { *m = KeystoreResponse{} }
func (m *KeystoreResponse) String() string { return proto.CompactTextString(m) }
func (*KeystoreResponse) ProtoMessage()    {}
func (*KeystoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3dafe49d0dc795, []int{1}
}
func (m *KeystoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeystoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeystoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeystoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeystoreResponse.Merge(m, src)
}
func (m *KeystoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeystoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeystoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeystoreResponse proto.InternalMessageInfo

func (m *KeystoreResponse) GetRequestType() KSREQTYPE {
	if m != nil {
		return m.RequestType
	}
	return KSREQTYPE_KS_HAS
}

func (m *KeystoreResponse) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *KeystoreResponse) GetKeyNames() []string {
	if m != nil {
		return m.KeyNames
	}
	return nil
}

func (m *KeystoreResponse) GetHas() bool {
	if m != nil {
		return m.Has
	}
	return false
}

func init() {
	proto.RegisterEnum("pb.KSREQTYPE", KSREQTYPE_name, KSREQTYPE_value)
	proto.RegisterType((*KeystoreRequest)(nil), "pb.KeystoreRequest")
	proto.RegisterType((*KeystoreResponse)(nil), "pb.KeystoreResponse")
}

func init() { proto.RegisterFile("keystore.proto", fileDescriptor_ac3dafe49d0dc795) }

var fileDescriptor_ac3dafe49d0dc795 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xbd, 0x4e, 0x32, 0x41,
	0x14, 0x86, 0x77, 0x76, 0x09, 0x1f, 0x1c, 0x3e, 0x70, 0x72, 0xb4, 0xd8, 0x50, 0x4c, 0x36, 0x54,
	0x1b, 0x0b, 0x4c, 0xb0, 0xb0, 0xc6, 0x38, 0x2a, 0x19, 0x62, 0x70, 0x76, 0x2c, 0xac, 0xc8, 0x92,
	0x4c, 0xa2, 0x21, 0xb0, 0xe3, 0xce, 0x4a, 0xb2, 0x77, 0xa1, 0x77, 0x65, 0x49, 0x69, 0x69, 0xe0,
	0x46, 0x0c, 0xbf, 0xb2, 0x76, 0x76, 0xcf, 0x79, 0x33, 0x93, 0x27, 0xe7, 0x3d, 0xd0, 0x18, 0xeb,
	0xdc, 0x66, 0x49, 0xaa, 0xdb, 0x26, 0x4d, 0xb2, 0x04, 0x5d, 0x33, 0x6a, 0xcd, 0xe0, 0x48, 0x6c,
	0x53, 0xa9, 0x5f, 0x5e, 0xb5, 0xcd, 0xf0, 0x0c, 0x6a, 0xe9, 0x06, 0x55, 0x6e, 0xb4, 0x4f, 0x02,
	0x12, 0x36, 0x3a, 0xf5, 0xb6, 0x19, 0xb5, 0x45, 0x24, 0xf9, 0xbd, 0x7a, 0x1c, 0x70, 0x79, 0xf8,
	0x02, 0x11, 0x4a, 0xd3, 0x78, 0xa2, 0x7d, 0x37, 0x20, 0x61, 0x55, 0xae, 0x19, 0x19, 0x80, 0x49,
	0x9f, 0x67, 0x71, 0xa6, 0x85, 0xce, 0x7d, 0x2f, 0x20, 0xe1, 0x7f, 0x79, 0x90, 0xb4, 0xde, 0x09,
	0xd0, 0x1f, 0xb1, 0x35, 0xc9, 0xd4, 0xea, 0xbf, 0x9b, 0x8b, 0x16, 0xf7, 0xb7, 0x05, 0x9b, 0x50,
	0x19, 0xeb, 0xfc, 0x2e, 0x9e, 0x68, 0xeb, 0x7b, 0x81, 0x17, 0x56, 0xe5, 0x7e, 0x46, 0x0a, 0xde,
	0x53, 0x6c, 0xfd, 0x52, 0x40, 0xc2, 0x8a, 0x5c, 0xe1, 0xa9, 0x80, 0xea, 0xde, 0x83, 0x00, 0x65,
	0x11, 0x0d, 0x6f, 0xbb, 0x11, 0x75, 0xb6, 0x7c, 0xc3, 0x15, 0x25, 0x5b, 0x1e, 0x3c, 0x28, 0xea,
	0x62, 0x7d, 0xf5, 0x61, 0x78, 0xc5, 0xfb, 0x5c, 0x71, 0xea, 0x61, 0x0d, 0xfe, 0x89, 0x68, 0xd8,
	0xef, 0x45, 0x8a, 0x96, 0x3a, 0xd7, 0x50, 0xdb, 0xed, 0xd7, 0x1d, 0xf4, 0xf0, 0x02, 0x2a, 0xbb,
	0x11, 0x8f, 0xd7, 0x1b, 0x15, 0x5b, 0x6f, 0x9e, 0x14, 0xc3, 0x4d, 0x23, 0x2d, 0xe7, 0xd2, 0xff,
	0x58, 0x30, 0x32, 0x5f, 0x30, 0xf2, 0xb5, 0x60, 0xe4, 0x6d, 0xc9, 0x9c, 0xf9, 0x92, 0x39, 0x9f,
	0x4b, 0xe6, 0x8c, 0xca, 0xeb, 0x2b, 0x9e, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x06, 0x47, 0x3e,
	0x74, 0xd7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeystoreAPIClient is the client API for KeystoreAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeystoreAPIClient interface {
	//Keystore is a unidirectional RPC allowing management of ipfs keystores
	Keystore(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error)
}

type keystoreAPIClient struct {
	cc *grpc.ClientConn
}

func NewKeystoreAPIClient(cc *grpc.ClientConn) KeystoreAPIClient {
	return &keystoreAPIClient{cc}
}

func (c *keystoreAPIClient) Keystore(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/pb.KeystoreAPI/Keystore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeystoreAPIServer is the server API for KeystoreAPI service.
type KeystoreAPIServer interface {
	//Keystore is a unidirectional RPC allowing management of ipfs keystores
	Keystore(context.Context, *KeystoreRequest) (*KeystoreResponse, error)
}

// UnimplementedKeystoreAPIServer can be embedded to have forward compatible implementations.
type UnimplementedKeystoreAPIServer struct {
}

func (*UnimplementedKeystoreAPIServer) Keystore(ctx context.Context, req *KeystoreRequest) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keystore not implemented")
}

func RegisterKeystoreAPIServer(s *grpc.Server, srv KeystoreAPIServer) {
	s.RegisterService(&_KeystoreAPI_serviceDesc, srv)
}

func _KeystoreAPI_Keystore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreAPIServer).Keystore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeystoreAPI/Keystore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreAPIServer).Keystore(ctx, req.(*KeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeystoreAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.KeystoreAPI",
	HandlerType: (*KeystoreAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Keystore",
			Handler:    _KeystoreAPI_Keystore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keystore.proto",
}

func (m *KeystoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeystoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeystoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintKeystore(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintKeystore(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestType != 0 {
		i = encodeVarintKeystore(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KeystoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeystoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeystoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Has {
		i--
		if m.Has {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.KeyNames) > 0 {
		for iNdEx := len(m.KeyNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyNames[iNdEx])
			copy(dAtA[i:], m.KeyNames[iNdEx])
			i = encodeVarintKeystore(dAtA, i, uint64(len(m.KeyNames[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintKeystore(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestType != 0 {
		i = encodeVarintKeystore(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeystore(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeystore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeystoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != 0 {
		n += 1 + sovKeystore(uint64(m.RequestType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovKeystore(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovKeystore(uint64(l))
	}
	return n
}

func (m *KeystoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != 0 {
		n += 1 + sovKeystore(uint64(m.RequestType))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovKeystore(uint64(l))
	}
	if len(m.KeyNames) > 0 {
		for _, s := range m.KeyNames {
			l = len(s)
			n += 1 + l + sovKeystore(uint64(l))
		}
	}
	if m.Has {
		n += 2
	}
	return n
}

func sovKeystore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeystore(x uint64) (n int) {
	return sovKeystore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeystoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeystore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeystoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeystoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= KSREQTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeystore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeystore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeystore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeystore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = append(m.PrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivateKey == nil {
				m.PrivateKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeystore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeystore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeystore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeystoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeystore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeystoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeystoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= KSREQTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeystore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeystore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = append(m.PrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivateKey == nil {
				m.PrivateKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeystore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeystore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyNames = append(m.KeyNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Has", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Has = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKeystore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeystore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeystore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeystore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeystore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeystore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeystore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeystore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeystore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeystore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeystore = fmt.Errorf("proto: unexpected end of group")
)
