// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: keystore.proto

package pb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// KeystoreRequest is a message used in any keystore API request
type KeystoreRequest struct {
	// name of the key the request is for
	// applicable to: has, get, put, delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the actual private key
	// applicable to: put
	PrivateKey []byte `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
}

func (m *KeystoreRequest) Reset()      { *m = KeystoreRequest{} }
func (*KeystoreRequest) ProtoMessage() {}
func (*KeystoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3dafe49d0dc795, []int{0}
}
func (m *KeystoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeystoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeystoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeystoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeystoreRequest.Merge(m, src)
}
func (m *KeystoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeystoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeystoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeystoreRequest proto.InternalMessageInfo

func (m *KeystoreRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeystoreRequest) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// KeystoreResponse is a responsed to any keystore API request
type KeystoreResponse struct {
	// a generic status message
	// returned by Has requests
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// the actual private key
	// returned by Get requests
	PrivateKey []byte `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	// names of keys returned by a List request
	KeyNames []string `protobuf:"bytes,3,rep,name=keyNames,proto3" json:"keyNames,omitempty"`
}

func (m *KeystoreResponse) Reset()      { *m = KeystoreResponse{} }
func (*KeystoreResponse) ProtoMessage() {}
func (*KeystoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac3dafe49d0dc795, []int{1}
}
func (m *KeystoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeystoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeystoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeystoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeystoreResponse.Merge(m, src)
}
func (m *KeystoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeystoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeystoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeystoreResponse proto.InternalMessageInfo

func (m *KeystoreResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *KeystoreResponse) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *KeystoreResponse) GetKeyNames() []string {
	if m != nil {
		return m.KeyNames
	}
	return nil
}

func init() {
	proto.RegisterType((*KeystoreRequest)(nil), "pb.KeystoreRequest")
	proto.RegisterType((*KeystoreResponse)(nil), "pb.KeystoreResponse")
}

func init() { proto.RegisterFile("keystore.proto", fileDescriptor_ac3dafe49d0dc795) }

var fileDescriptor_ac3dafe49d0dc795 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4e, 0xad, 0x2c,
	0x2e, 0xc9, 0x2f, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xd2,
	0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7,
	0x07, 0x4b, 0x25, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1, 0xa2, 0xe4, 0xca, 0xc5,
	0xef, 0x0d, 0x35, 0x24, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x88, 0x8b, 0x25, 0x2f,
	0x31, 0x37, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0x16, 0x92, 0xe3, 0xe2, 0x2a,
	0x28, 0xca, 0x2c, 0x4b, 0x2c, 0x49, 0xf5, 0x4e, 0xad, 0x94, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x09,
	0x42, 0x12, 0x51, 0x4a, 0xe3, 0x12, 0x40, 0x18, 0x53, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24,
	0xc6, 0xc5, 0x56, 0x5c, 0x92, 0x58, 0x52, 0x5a, 0x0c, 0x35, 0x09, 0xca, 0x23, 0x64, 0x96, 0x90,
	0x14, 0x17, 0x47, 0x76, 0x6a, 0xa5, 0x5f, 0x62, 0x6e, 0x6a, 0xb1, 0x04, 0xb3, 0x02, 0xb3, 0x06,
	0x67, 0x10, 0x9c, 0x6f, 0x34, 0x95, 0x89, 0x8b, 0x1b, 0x66, 0x91, 0x63, 0x80, 0xa7, 0x90, 0x11,
	0x17, 0xb3, 0x47, 0x62, 0xb1, 0x90, 0xb0, 0x5e, 0x41, 0x92, 0x1e, 0x9a, 0x3f, 0xa4, 0x44, 0x50,
	0x05, 0x21, 0xae, 0x52, 0x62, 0x00, 0xe9, 0x71, 0x4f, 0x2d, 0x21, 0x59, 0x4f, 0x40, 0x29, 0x89,
	0x7a, 0x4c, 0xb9, 0xd8, 0x5c, 0x52, 0x73, 0x52, 0x4b, 0x52, 0x49, 0xd3, 0x66, 0xcc, 0xc5, 0xe2,
	0x93, 0x59, 0x4c, 0x9a, 0x5d, 0x4e, 0x26, 0x37, 0x1e, 0xca, 0x31, 0x3c, 0x78, 0x28, 0xc7, 0xf8,
	0xe1, 0xa1, 0x1c, 0xe3, 0x8f, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63,
	0xdc, 0xf1, 0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92,
	0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0x92, 0xd8,
	0xc0, 0x69, 0xc0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x8d, 0xcb, 0x9c, 0x48, 0x02, 0x00,
	0x00,
}

func (this *KeystoreRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*KeystoreRequest)
	if !ok {
		that2, ok := that.(KeystoreRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *KeystoreRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *KeystoreRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *KeystoreRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !bytes.Equal(this.PrivateKey, that1.PrivateKey) {
		return fmt.Errorf("PrivateKey this(%v) Not Equal that(%v)", this.PrivateKey, that1.PrivateKey)
	}
	return nil
}
func (this *KeystoreRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KeystoreRequest)
	if !ok {
		that2, ok := that.(KeystoreRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.PrivateKey, that1.PrivateKey) {
		return false
	}
	return true
}
func (this *KeystoreResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*KeystoreResponse)
	if !ok {
		that2, ok := that.(KeystoreResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *KeystoreResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *KeystoreResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *KeystoreResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.PrivateKey, that1.PrivateKey) {
		return fmt.Errorf("PrivateKey this(%v) Not Equal that(%v)", this.PrivateKey, that1.PrivateKey)
	}
	if len(this.KeyNames) != len(that1.KeyNames) {
		return fmt.Errorf("KeyNames this(%v) Not Equal that(%v)", len(this.KeyNames), len(that1.KeyNames))
	}
	for i := range this.KeyNames {
		if this.KeyNames[i] != that1.KeyNames[i] {
			return fmt.Errorf("KeyNames this[%v](%v) Not Equal that[%v](%v)", i, this.KeyNames[i], i, that1.KeyNames[i])
		}
	}
	return nil
}
func (this *KeystoreResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KeystoreResponse)
	if !ok {
		that2, ok := that.(KeystoreResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.PrivateKey, that1.PrivateKey) {
		return false
	}
	if len(this.KeyNames) != len(that1.KeyNames) {
		return false
	}
	for i := range this.KeyNames {
		if this.KeyNames[i] != that1.KeyNames[i] {
			return false
		}
	}
	return true
}
func (this *KeystoreRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.KeystoreRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KeystoreResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.KeystoreResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	s = append(s, "KeyNames: "+fmt.Sprintf("%#v", this.KeyNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringKeystore(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeystoreAPIClient is the client API for KeystoreAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeystoreAPIClient interface {
	// Has is used to check if we have the key in our store
	Has(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error)
	// Get is used to return a key from our store
	Get(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error)
	// Put is used to store a key in our store
	Put(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error)
	// Delete is used to remove a key from our store
	Delete(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error)
	// List is used to returns all keyIDs of keys in our store
	List(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error)
}

type keystoreAPIClient struct {
	cc *grpc.ClientConn
}

func NewKeystoreAPIClient(cc *grpc.ClientConn) KeystoreAPIClient {
	return &keystoreAPIClient{cc}
}

func (c *keystoreAPIClient) Has(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/pb.KeystoreAPI/Has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoreAPIClient) Get(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/pb.KeystoreAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoreAPIClient) Put(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/pb.KeystoreAPI/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoreAPIClient) Delete(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/pb.KeystoreAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoreAPIClient) List(ctx context.Context, in *KeystoreRequest, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/pb.KeystoreAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeystoreAPIServer is the server API for KeystoreAPI service.
type KeystoreAPIServer interface {
	// Has is used to check if we have the key in our store
	Has(context.Context, *KeystoreRequest) (*KeystoreResponse, error)
	// Get is used to return a key from our store
	Get(context.Context, *KeystoreRequest) (*KeystoreResponse, error)
	// Put is used to store a key in our store
	Put(context.Context, *KeystoreRequest) (*KeystoreResponse, error)
	// Delete is used to remove a key from our store
	Delete(context.Context, *KeystoreRequest) (*KeystoreResponse, error)
	// List is used to returns all keyIDs of keys in our store
	List(context.Context, *KeystoreRequest) (*KeystoreResponse, error)
}

// UnimplementedKeystoreAPIServer can be embedded to have forward compatible implementations.
type UnimplementedKeystoreAPIServer struct {
}

func (*UnimplementedKeystoreAPIServer) Has(ctx context.Context, req *KeystoreRequest) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}
func (*UnimplementedKeystoreAPIServer) Get(ctx context.Context, req *KeystoreRequest) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedKeystoreAPIServer) Put(ctx context.Context, req *KeystoreRequest) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedKeystoreAPIServer) Delete(ctx context.Context, req *KeystoreRequest) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedKeystoreAPIServer) List(ctx context.Context, req *KeystoreRequest) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterKeystoreAPIServer(s *grpc.Server, srv KeystoreAPIServer) {
	s.RegisterService(&_KeystoreAPI_serviceDesc, srv)
}

func _KeystoreAPI_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreAPIServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeystoreAPI/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreAPIServer).Has(ctx, req.(*KeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeystoreAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeystoreAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreAPIServer).Get(ctx, req.(*KeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeystoreAPI_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreAPIServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeystoreAPI/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreAPIServer).Put(ctx, req.(*KeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeystoreAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeystoreAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreAPIServer).Delete(ctx, req.(*KeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeystoreAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeystoreAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreAPIServer).List(ctx, req.(*KeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeystoreAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.KeystoreAPI",
	HandlerType: (*KeystoreAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Has",
			Handler:    _KeystoreAPI_Has_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KeystoreAPI_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _KeystoreAPI_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KeystoreAPI_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _KeystoreAPI_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keystore.proto",
}

func (m *KeystoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeystoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeystoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintKeystore(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintKeystore(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeystoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeystoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeystoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyNames) > 0 {
		for iNdEx := len(m.KeyNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyNames[iNdEx])
			copy(dAtA[i:], m.KeyNames[iNdEx])
			i = encodeVarintKeystore(dAtA, i, uint64(len(m.KeyNames[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintKeystore(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintKeystore(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeystore(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeystore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedKeystoreRequest(r randyKeystore, easy bool) *KeystoreRequest {
	this := &KeystoreRequest{}
	this.Name = string(randStringKeystore(r))
	v1 := r.Intn(100)
	this.PrivateKey = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.PrivateKey[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKeystoreResponse(r randyKeystore, easy bool) *KeystoreResponse {
	this := &KeystoreResponse{}
	this.Status = string(randStringKeystore(r))
	v2 := r.Intn(100)
	this.PrivateKey = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.PrivateKey[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(10)
	this.KeyNames = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.KeyNames[i] = string(randStringKeystore(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyKeystore interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneKeystore(r randyKeystore) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringKeystore(r randyKeystore) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneKeystore(r)
	}
	return string(tmps)
}
func randUnrecognizedKeystore(r randyKeystore, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldKeystore(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldKeystore(dAtA []byte, r randyKeystore, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateKeystore(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateKeystore(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateKeystore(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateKeystore(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateKeystore(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateKeystore(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateKeystore(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *KeystoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovKeystore(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovKeystore(uint64(l))
	}
	return n
}

func (m *KeystoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovKeystore(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovKeystore(uint64(l))
	}
	if len(m.KeyNames) > 0 {
		for _, s := range m.KeyNames {
			l = len(s)
			n += 1 + l + sovKeystore(uint64(l))
		}
	}
	return n
}

func sovKeystore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeystore(x uint64) (n int) {
	return sovKeystore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *KeystoreRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeystoreRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PrivateKey:` + fmt.Sprintf("%v", this.PrivateKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeystoreResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeystoreResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`PrivateKey:` + fmt.Sprintf("%v", this.PrivateKey) + `,`,
		`KeyNames:` + fmt.Sprintf("%v", this.KeyNames) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringKeystore(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *KeystoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeystore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeystoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeystoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeystore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeystore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeystore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeystore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = append(m.PrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivateKey == nil {
				m.PrivateKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeystore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeystore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeystore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeystoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeystore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeystoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeystoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeystore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeystore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeystore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeystore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = append(m.PrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivateKey == nil {
				m.PrivateKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeystore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeystore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyNames = append(m.KeyNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeystore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeystore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthKeystore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeystore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeystore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeystore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeystore
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthKeystore
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKeystore
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKeystore(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthKeystore
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKeystore = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeystore   = fmt.Errorf("proto: integer overflow")
)
