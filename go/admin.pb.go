// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: admin.proto

package pb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BSREQTYPE is a particular blockstore request type
type BSREQTYPE int32

const (
	// BS_DELETE is used to delete a block from the store
	BSREQTYPE_BS_DELETE BSREQTYPE = 0
	// BS_PUT is used to put a single block in the store
	BSREQTYPE_BS_PUT BSREQTYPE = 1
	// BS_PUT_MANY is used to put many blocks in the store
	BSREQTYPE_BS_PUT_MANY BSREQTYPE = 2
	// BS_GET is used to get a block from the store
	BSREQTYPE_BS_GET BSREQTYPE = 3
	// BS_GET_MANY is used to get many blocks from the store
	BSREQTYPE_BS_GET_MANY BSREQTYPE = 4
)

var BSREQTYPE_name = map[int32]string{
	0: "BS_DELETE",
	1: "BS_PUT",
	2: "BS_PUT_MANY",
	3: "BS_GET",
	4: "BS_GET_MANY",
}

var BSREQTYPE_value = map[string]int32{
	"BS_DELETE":   0,
	"BS_PUT":      1,
	"BS_PUT_MANY": 2,
	"BS_GET":      3,
	"BS_GET_MANY": 4,
}

func (x BSREQTYPE) String() string {
	return proto.EnumName(BSREQTYPE_name, int32(x))
}

func (BSREQTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{0}
}

// BSREQOPTS are options for blockstore requests
type BSREQOPTS int32

const (
	// DEFAULT indicates to use the default settings
	BSREQOPTS_DEFAULT BSREQOPTS = 0
	// BS_FORCE indicates to force the request regardless of any possible issues
	BSREQOPTS_BS_FORCE BSREQOPTS = 1
)

var BSREQOPTS_name = map[int32]string{
	0: "DEFAULT",
	1: "BS_FORCE",
}

var BSREQOPTS_value = map[string]int32{
	"DEFAULT":  0,
	"BS_FORCE": 1,
}

func (x BSREQOPTS) String() string {
	return proto.EnumName(BSREQOPTS_name, int32(x))
}

func (BSREQOPTS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{1}
}

// GCREQTYPE specifies the type of GC management call being performed
type GCREQTYPE int32

const (
	// GC_START is used to start gc
	GCREQTYPE_GC_START GCREQTYPE = 0
	// C_STOP is used to stop GC
	GCREQTYPE_GC_STOP GCREQTYPE = 1
	// GC_STATUS is used to retrieve gc status
	GCREQTYPE_GC_STATUS GCREQTYPE = 2
)

var GCREQTYPE_name = map[int32]string{
	0: "GC_START",
	1: "GC_STOP",
	2: "GC_STATUS",
}

var GCREQTYPE_value = map[string]int32{
	"GC_START":  0,
	"GC_STOP":   1,
	"GC_STATUS": 2,
}

func (x GCREQTYPE) String() string {
	return proto.EnumName(GCREQTYPE_name, int32(x))
}

func (GCREQTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{2}
}

// REFREQTYPE is used to indicate the type of ref count request being made
type REFREQTYPE int32

const (
	// REF_GET_COUNT is used to get the reference count of a particular cid
	REFREQTYPE_REF_GET_COUNT REFREQTYPE = 0
	REFREQTYPE_REF_DELETE    REFREQTYPE = 1
)

var REFREQTYPE_name = map[int32]string{
	0: "REF_GET_COUNT",
	1: "REF_DELETE",
}

var REFREQTYPE_value = map[string]int32{
	"REF_GET_COUNT": 0,
	"REF_DELETE":    1,
}

func (x REFREQTYPE) String() string {
	return proto.EnumName(REFREQTYPE_name, int32(x))
}

func (REFREQTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{3}
}

// REFREQOPTS are options for fine-tuning ref count requests
type REFREQOPTS int32

const (
	REFREQOPTS_REF_FORCE REFREQOPTS = 0
)

var REFREQOPTS_name = map[int32]string{
	0: "REF_FORCE",
}

var REFREQOPTS_value = map[string]int32{
	"REF_FORCE": 0,
}

func (x REFREQOPTS) String() string {
	return proto.EnumName(REFREQOPTS_name, int32(x))
}

func (REFREQOPTS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{4}
}

// BlockstoreRequest is a message used to control blockstores
type BlockstoreRequest struct {
	// cids holds at least 1 cid, to hold 0 is considered an error
	Cids []string `protobuf:"bytes,1,rep,name=cids,proto3" json:"cids,omitempty"`
	// reqType is used to indicate the particular request being mande
	ReqType BSREQTYPE `protobuf:"varint,2,opt,name=reqType,proto3,enum=pb.BSREQTYPE" json:"reqType,omitempty"`
	// reqOpts is an optional parameter that can be used for fine-tuned request control
	ReqOpts BSREQOPTS `protobuf:"varint,3,opt,name=reqOpts,proto3,enum=pb.BSREQOPTS" json:"reqOpts,omitempty"`
}

func (m *BlockstoreRequest) Reset()         { *m = BlockstoreRequest{} }
func (m *BlockstoreRequest) String() string { return proto.CompactTextString(m) }
func (*BlockstoreRequest) ProtoMessage()    {}
func (*BlockstoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{0}
}
func (m *BlockstoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockstoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockstoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockstoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockstoreRequest.Merge(m, src)
}
func (m *BlockstoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockstoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockstoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockstoreRequest proto.InternalMessageInfo

func (m *BlockstoreRequest) GetCids() []string {
	if m != nil {
		return m.Cids
	}
	return nil
}

func (m *BlockstoreRequest) GetReqType() BSREQTYPE {
	if m != nil {
		return m.ReqType
	}
	return BSREQTYPE_BS_DELETE
}

func (m *BlockstoreRequest) GetReqOpts() BSREQOPTS {
	if m != nil {
		return m.ReqOpts
	}
	return BSREQOPTS_DEFAULT
}

// BlockstoreResponse is a response to a BlockstoreqRequest
type BlockstoreResponse struct {
	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *BlockstoreResponse) Reset()         { *m = BlockstoreResponse{} }
func (m *BlockstoreResponse) String() string { return proto.CompactTextString(m) }
func (*BlockstoreResponse) ProtoMessage()    {}
func (*BlockstoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{1}
}
func (m *BlockstoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockstoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockstoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockstoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockstoreResponse.Merge(m, src)
}
func (m *BlockstoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockstoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockstoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockstoreResponse proto.InternalMessageInfo

func (m *BlockstoreResponse) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// Block is a single block of ipfs data
type Block struct {
	// cid is the identifier of the block
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// data is the actual contnets of this block
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{2}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Block) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ManageGCRequest is a message used to control TemporalX garbage collection
type ManageGCRequest struct {
	// type is the type of gc request being performed
	Type GCREQTYPE `protobuf:"varint,1,opt,name=type,proto3,enum=pb.GCREQTYPE" json:"type,omitempty"`
}

func (m *ManageGCRequest) Reset()         { *m = ManageGCRequest{} }
func (m *ManageGCRequest) String() string { return proto.CompactTextString(m) }
func (*ManageGCRequest) ProtoMessage()    {}
func (*ManageGCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{3}
}
func (m *ManageGCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManageGCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManageGCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManageGCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManageGCRequest.Merge(m, src)
}
func (m *ManageGCRequest) XXX_Size() int {
	return m.Size()
}
func (m *ManageGCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ManageGCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ManageGCRequest proto.InternalMessageInfo

func (m *ManageGCRequest) GetType() GCREQTYPE {
	if m != nil {
		return m.Type
	}
	return GCREQTYPE_GC_START
}

// ManageGCResponse is a message used as a response to gc control requests
type ManageGCResponse struct {
	// status contains a status message
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *ManageGCResponse) Reset()         { *m = ManageGCResponse{} }
func (m *ManageGCResponse) String() string { return proto.CompactTextString(m) }
func (*ManageGCResponse) ProtoMessage()    {}
func (*ManageGCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{4}
}
func (m *ManageGCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManageGCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManageGCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManageGCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManageGCResponse.Merge(m, src)
}
func (m *ManageGCResponse) XXX_Size() int {
	return m.Size()
}
func (m *ManageGCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ManageGCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ManageGCResponse proto.InternalMessageInfo

func (m *ManageGCResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// RefCountRequest is used to analyze the reference
// counter store, and retrieve usage information
type RefCountRequest struct {
	// cids are optional cids to filter our requests by
	Cids []string `protobuf:"bytes,1,rep,name=cids,proto3" json:"cids,omitempty"`
	// can be used to apply limits to the number of store requests made, search limits, etc..
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *RefCountRequest) Reset()         { *m = RefCountRequest{} }
func (m *RefCountRequest) String() string { return proto.CompactTextString(m) }
func (*RefCountRequest) ProtoMessage()    {}
func (*RefCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{5}
}
func (m *RefCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefCountRequest.Merge(m, src)
}
func (m *RefCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefCountRequest proto.InternalMessageInfo

func (m *RefCountRequest) GetCids() []string {
	if m != nil {
		return m.Cids
	}
	return nil
}

func (m *RefCountRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// RefCountResponse is used to return the information
// gathered by a RefCount rpc call.
type RefCountResponse struct {
	// cids is a mapping of the cid to its reference count
	Cids map[string]int64 `protobuf:"bytes,1,rep,name=cids,proto3" json:"cids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *RefCountResponse) Reset()         { *m = RefCountResponse{} }
func (m *RefCountResponse) String() string { return proto.CompactTextString(m) }
func (*RefCountResponse) ProtoMessage()    {}
func (*RefCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{6}
}
func (m *RefCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefCountResponse.Merge(m, src)
}
func (m *RefCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *RefCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefCountResponse proto.InternalMessageInfo

func (m *RefCountResponse) GetCids() map[string]int64 {
	if m != nil {
		return m.Cids
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.BSREQTYPE", BSREQTYPE_name, BSREQTYPE_value)
	proto.RegisterEnum("pb.BSREQOPTS", BSREQOPTS_name, BSREQOPTS_value)
	proto.RegisterEnum("pb.GCREQTYPE", GCREQTYPE_name, GCREQTYPE_value)
	proto.RegisterEnum("pb.REFREQTYPE", REFREQTYPE_name, REFREQTYPE_value)
	proto.RegisterEnum("pb.REFREQOPTS", REFREQOPTS_name, REFREQOPTS_value)
	proto.RegisterType((*BlockstoreRequest)(nil), "pb.BlockstoreRequest")
	proto.RegisterType((*BlockstoreResponse)(nil), "pb.BlockstoreResponse")
	proto.RegisterType((*Block)(nil), "pb.Block")
	proto.RegisterType((*ManageGCRequest)(nil), "pb.ManageGCRequest")
	proto.RegisterType((*ManageGCResponse)(nil), "pb.ManageGCResponse")
	proto.RegisterType((*RefCountRequest)(nil), "pb.RefCountRequest")
	proto.RegisterType((*RefCountResponse)(nil), "pb.RefCountResponse")
	proto.RegisterMapType((map[string]int64)(nil), "pb.RefCountResponse.CidsEntry")
}

func init() { proto.RegisterFile("admin.proto", fileDescriptor_73a7fc70dcc2027c) }

var fileDescriptor_73a7fc70dcc2027c = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0xf5, 0x42, 0x42, 0xe2, 0x71, 0x08, 0xce, 0x36, 0x8d, 0x10, 0x95, 0x2c, 0xe2, 0x43, 0x8b,
	0x2c, 0x95, 0x4a, 0xb4, 0x15, 0x55, 0xab, 0x1e, 0xc0, 0x59, 0x50, 0xa5, 0x24, 0xd0, 0xb5, 0x39,
	0xe4, 0x84, 0x0c, 0xb8, 0x95, 0x05, 0xc1, 0x0e, 0x5e, 0x2a, 0x71, 0xea, 0x2f, 0xf4, 0x7f, 0xfa,
	0x03, 0x3d, 0xe6, 0xd8, 0x63, 0x05, 0x3f, 0x52, 0xed, 0xda, 0x0b, 0xd4, 0x87, 0xde, 0x66, 0xe6,
	0xcd, 0xdb, 0x79, 0x33, 0xb3, 0x03, 0x9a, 0x37, 0xb9, 0x0f, 0xe6, 0xf5, 0x68, 0x11, 0xb2, 0x10,
	0xe7, 0xa2, 0x91, 0xb9, 0x82, 0xb3, 0xf6, 0x2c, 0x1c, 0x4f, 0x63, 0x16, 0x2e, 0x7c, 0xea, 0x3f,
	0x2c, 0xfd, 0x98, 0x61, 0x0c, 0x07, 0xe3, 0x60, 0x12, 0x97, 0x51, 0x35, 0x5f, 0x53, 0xa9, 0xb0,
	0xf1, 0x0b, 0x38, 0x5a, 0xf8, 0x0f, 0xee, 0x2a, 0xf2, 0xcb, 0xb9, 0x2a, 0xaa, 0x9d, 0x36, 0x8a,
	0xf5, 0x68, 0x54, 0x6f, 0x3b, 0x94, 0x7c, 0x76, 0xef, 0xfa, 0x84, 0x4a, 0x34, 0x4d, 0xec, 0x45,
	0x2c, 0x2e, 0xe7, 0x33, 0x89, 0xbd, 0xbe, 0xeb, 0x50, 0x89, 0x9a, 0x4d, 0xc0, 0xfb, 0xa5, 0xe3,
	0x28, 0x9c, 0xc7, 0x3e, 0xbe, 0x84, 0xc2, 0x48, 0x44, 0x45, 0x75, 0xad, 0xa1, 0x0a, 0x36, 0x8f,
	0xd0, 0x14, 0x30, 0x5f, 0xc2, 0xa1, 0x08, 0x60, 0x1d, 0xf2, 0xe3, 0x60, 0x52, 0x46, 0x55, 0x54,
	0x53, 0x29, 0x37, 0xb9, 0xf2, 0x89, 0xc7, 0x3c, 0x21, 0xf1, 0x84, 0x0a, 0xdb, 0x7c, 0x03, 0xa5,
	0x1b, 0x6f, 0xee, 0x7d, 0xf5, 0xbb, 0xb6, 0x6c, 0xf0, 0x12, 0x0e, 0x18, 0xef, 0x04, 0xed, 0x04,
	0x76, 0x6d, 0xd9, 0x89, 0x80, 0x4c, 0x0b, 0xf4, 0x1d, 0x2b, 0xd5, 0x76, 0x01, 0x85, 0x98, 0x79,
	0x6c, 0x19, 0xa7, 0x25, 0x53, 0xcf, 0xfc, 0x00, 0x25, 0xea, 0x7f, 0xb1, 0xc3, 0xe5, 0x9c, 0xfd,
	0x6f, 0x84, 0xe7, 0x70, 0x38, 0x0b, 0xee, 0x03, 0x26, 0xd4, 0xe5, 0x69, 0xe2, 0x98, 0xdf, 0x41,
	0xdf, 0x91, 0xd3, 0x42, 0x8d, 0x3d, 0xb6, 0xd6, 0x30, 0xb8, 0xbe, 0x6c, 0x4e, 0xdd, 0x0e, 0x26,
	0x31, 0x99, 0xb3, 0xc5, 0x2a, 0x79, 0xbd, 0xd2, 0x04, 0x75, 0x1b, 0xe2, 0x93, 0x99, 0xfa, 0x2b,
	0x39, 0x99, 0xa9, 0xbf, 0xe2, 0xc5, 0xbf, 0x79, 0xb3, 0xa5, 0x2f, 0x8b, 0x0b, 0xe7, 0x7d, 0xee,
	0x1d, 0xb2, 0x5c, 0x50, 0xb7, 0x6b, 0xc4, 0x45, 0xee, 0x0c, 0xaf, 0xc8, 0x35, 0x71, 0x89, 0xae,
	0x60, 0x80, 0x42, 0xdb, 0x19, 0xf6, 0x07, 0xae, 0x8e, 0x70, 0x09, 0xb4, 0xc4, 0x1e, 0xde, 0xb4,
	0x6e, 0xef, 0xf4, 0x5c, 0x0a, 0x76, 0x89, 0xab, 0xe7, 0x53, 0xb0, 0x4b, 0x52, 0xf0, 0xc0, 0x7a,
	0x9e, 0xbe, 0xca, 0x77, 0x8e, 0x35, 0x38, 0xba, 0x22, 0x9d, 0xd6, 0xe0, 0xda, 0xd5, 0x15, 0x7c,
	0x02, 0xc7, 0x6d, 0x67, 0xd8, 0xe9, 0x51, 0x9b, 0xe8, 0xc8, 0x7a, 0x0b, 0xea, 0x76, 0xf4, 0x1c,
	0xea, 0xda, 0x43, 0xc7, 0x6d, 0x51, 0x9e, 0xa8, 0xc1, 0x91, 0xf0, 0x7a, 0x7d, 0x1d, 0x71, 0x61,
	0x09, 0xe4, 0x0e, 0x1c, 0x3d, 0x67, 0xbd, 0x02, 0xa0, 0xa4, 0x23, 0x79, 0x67, 0x50, 0xa4, 0xa4,
	0x23, 0xca, 0xdb, 0xbd, 0xc1, 0x2d, 0x27, 0x9f, 0x8a, 0x04, 0xd9, 0x09, 0xb2, 0x9e, 0x49, 0x82,
	0x10, 0x54, 0x04, 0x95, 0xa3, 0x89, 0x08, 0xa5, 0xf1, 0x13, 0xc1, 0x71, 0x8b, 0x5f, 0x46, 0xab,
	0xff, 0x09, 0x37, 0xe1, 0x58, 0x6e, 0x1e, 0x3f, 0xe1, 0xa3, 0xcf, 0xfc, 0x9e, 0xca, 0xf9, 0xbf,
	0xc1, 0x64, 0x1f, 0xa6, 0xc2, 0x89, 0x72, 0x4b, 0x09, 0x31, 0xf3, 0x29, 0x12, 0x62, 0x76, 0x91,
	0xa6, 0x82, 0x3f, 0x02, 0xec, 0x2e, 0x01, 0x3f, 0xdd, 0xfe, 0xf8, 0xfd, 0xa3, 0xac, 0x5c, 0x64,
	0xc3, 0x92, 0xde, 0x2e, 0xff, 0x5a, 0x1b, 0xe8, 0x71, 0x6d, 0xa0, 0x3f, 0x6b, 0x03, 0xfd, 0xd8,
	0x18, 0xca, 0xe3, 0xc6, 0x50, 0x7e, 0x6f, 0x0c, 0x65, 0x54, 0x10, 0x87, 0xfe, 0xfa, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc5, 0x09, 0xee, 0xe5, 0xf7, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminAPIClient is the client API for AdminAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminAPIClient interface {
	// ManageGC is used to manage TemporalX's garbage collection process
	ManageGC(ctx context.Context, in *ManageGCRequest, opts ...grpc.CallOption) (*ManageGCResponse, error)
	// RefCount is used to analyze the counter store and pull reference count information
	RefCount(ctx context.Context, in *RefCountRequest, opts ...grpc.CallOption) (*RefCountResponse, error)
	// Blockstore allows management of the blockstore, and optionally, the counted store
	Blockstore(ctx context.Context, in *BlockstoreRequest, opts ...grpc.CallOption) (*BlockstoreResponse, error)
}

type adminAPIClient struct {
	cc *grpc.ClientConn
}

func NewAdminAPIClient(cc *grpc.ClientConn) AdminAPIClient {
	return &adminAPIClient{cc}
}

func (c *adminAPIClient) ManageGC(ctx context.Context, in *ManageGCRequest, opts ...grpc.CallOption) (*ManageGCResponse, error) {
	out := new(ManageGCResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAPI/ManageGC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) RefCount(ctx context.Context, in *RefCountRequest, opts ...grpc.CallOption) (*RefCountResponse, error) {
	out := new(RefCountResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAPI/RefCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) Blockstore(ctx context.Context, in *BlockstoreRequest, opts ...grpc.CallOption) (*BlockstoreResponse, error) {
	out := new(BlockstoreResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAPI/Blockstore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAPIServer is the server API for AdminAPI service.
type AdminAPIServer interface {
	// ManageGC is used to manage TemporalX's garbage collection process
	ManageGC(context.Context, *ManageGCRequest) (*ManageGCResponse, error)
	// RefCount is used to analyze the counter store and pull reference count information
	RefCount(context.Context, *RefCountRequest) (*RefCountResponse, error)
	// Blockstore allows management of the blockstore, and optionally, the counted store
	Blockstore(context.Context, *BlockstoreRequest) (*BlockstoreResponse, error)
}

// UnimplementedAdminAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAdminAPIServer struct {
}

func (*UnimplementedAdminAPIServer) ManageGC(ctx context.Context, req *ManageGCRequest) (*ManageGCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageGC not implemented")
}
func (*UnimplementedAdminAPIServer) RefCount(ctx context.Context, req *RefCountRequest) (*RefCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefCount not implemented")
}
func (*UnimplementedAdminAPIServer) Blockstore(ctx context.Context, req *BlockstoreRequest) (*BlockstoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blockstore not implemented")
}

func RegisterAdminAPIServer(s *grpc.Server, srv AdminAPIServer) {
	s.RegisterService(&_AdminAPI_serviceDesc, srv)
}

func _AdminAPI_ManageGC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).ManageGC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAPI/ManageGC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).ManageGC(ctx, req.(*ManageGCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_RefCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).RefCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAPI/RefCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).RefCount(ctx, req.(*RefCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_Blockstore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockstoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).Blockstore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAPI/Blockstore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).Blockstore(ctx, req.(*BlockstoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AdminAPI",
	HandlerType: (*AdminAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ManageGC",
			Handler:    _AdminAPI_ManageGC_Handler,
		},
		{
			MethodName: "RefCount",
			Handler:    _AdminAPI_RefCount_Handler,
		},
		{
			MethodName: "Blockstore",
			Handler:    _AdminAPI_Blockstore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}

func (m *BlockstoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockstoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockstoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReqOpts != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.ReqOpts))
		i--
		dAtA[i] = 0x18
	}
	if m.ReqType != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.ReqType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cids) > 0 {
		for iNdEx := len(m.Cids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cids[iNdEx])
			copy(dAtA[i:], m.Cids[iNdEx])
			i = encodeVarintAdmin(dAtA, i, uint64(len(m.Cids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockstoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockstoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockstoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdmin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ManageGCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManageGCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManageGCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ManageGCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManageGCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManageGCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RefCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cids) > 0 {
		for iNdEx := len(m.Cids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cids[iNdEx])
			copy(dAtA[i:], m.Cids[iNdEx])
			i = encodeVarintAdmin(dAtA, i, uint64(len(m.Cids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RefCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cids) > 0 {
		for k := range m.Cids {
			v := m.Cids[k]
			baseI := i
			i = encodeVarintAdmin(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAdmin(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAdmin(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdmin(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdmin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockstoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cids) > 0 {
		for _, s := range m.Cids {
			l = len(s)
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	if m.ReqType != 0 {
		n += 1 + sovAdmin(uint64(m.ReqType))
	}
	if m.ReqOpts != 0 {
		n += 1 + sovAdmin(uint64(m.ReqOpts))
	}
	return n
}

func (m *BlockstoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	return n
}

func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *ManageGCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAdmin(uint64(m.Type))
	}
	return n
}

func (m *ManageGCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *RefCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cids) > 0 {
		for _, s := range m.Cids {
			l = len(s)
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovAdmin(uint64(m.Limit))
	}
	return n
}

func (m *RefCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cids) > 0 {
		for k, v := range m.Cids {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAdmin(uint64(len(k))) + 1 + sovAdmin(uint64(v))
			n += mapEntrySize + 1 + sovAdmin(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAdmin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdmin(x uint64) (n int) {
	return sovAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockstoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockstoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockstoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cids = append(m.Cids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqType", wireType)
			}
			m.ReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqType |= BSREQTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqOpts", wireType)
			}
			m.ReqOpts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqOpts |= BSREQOPTS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockstoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockstoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockstoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManageGCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManageGCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManageGCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= GCREQTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManageGCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManageGCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManageGCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cids = append(m.Cids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cids == nil {
				m.Cids = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAdmin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAdmin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAdmin
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAdmin
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAdmin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAdmin(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAdmin
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Cids[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdmin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdmin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdmin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdmin = fmt.Errorf("proto: unexpected end of group")
)
