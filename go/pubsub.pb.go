// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pubsub.proto

package pb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PubSubListPeersRequest is used to return a list of
// peers that are subscribed to the given topic(s)
type PubSubListPeersRequest struct {
	// the topics for which we should
	// list peers for
	Topics []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (m *PubSubListPeersRequest) Reset()      { *m = PubSubListPeersRequest{} }
func (*PubSubListPeersRequest) ProtoMessage() {}
func (*PubSubListPeersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{0}
}
func (m *PubSubListPeersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubListPeersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubListPeersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubListPeersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubListPeersRequest.Merge(m, src)
}
func (m *PubSubListPeersRequest) XXX_Size() int {
	return m.Size()
}
func (m *PubSubListPeersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubListPeersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubListPeersRequest proto.InternalMessageInfo

func (m *PubSubListPeersRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

// PubSubListPeersResponse is a response to a ListPeersRequest
type PubSubListPeersResponse struct {
	Peers []*PubSubListPeersResponse_Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *PubSubListPeersResponse) Reset()      { *m = PubSubListPeersResponse{} }
func (*PubSubListPeersResponse) ProtoMessage() {}
func (*PubSubListPeersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{1}
}
func (m *PubSubListPeersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubListPeersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubListPeersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubListPeersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubListPeersResponse.Merge(m, src)
}
func (m *PubSubListPeersResponse) XXX_Size() int {
	return m.Size()
}
func (m *PubSubListPeersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubListPeersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubListPeersResponse proto.InternalMessageInfo

func (m *PubSubListPeersResponse) GetPeers() []*PubSubListPeersResponse_Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// peer is a single peer
type PubSubListPeersResponse_Peer struct {
	// topic is the topic this peer is a part of
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// lists the peerid for this peer
	PeerID string `protobuf:"bytes,2,opt,name=peerID,proto3" json:"peerID,omitempty"`
}

func (m *PubSubListPeersResponse_Peer) Reset()      { *m = PubSubListPeersResponse_Peer{} }
func (*PubSubListPeersResponse_Peer) ProtoMessage() {}
func (*PubSubListPeersResponse_Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{1, 0}
}
func (m *PubSubListPeersResponse_Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubListPeersResponse_Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubListPeersResponse_Peer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubListPeersResponse_Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubListPeersResponse_Peer.Merge(m, src)
}
func (m *PubSubListPeersResponse_Peer) XXX_Size() int {
	return m.Size()
}
func (m *PubSubListPeersResponse_Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubListPeersResponse_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubListPeersResponse_Peer proto.InternalMessageInfo

func (m *PubSubListPeersResponse_Peer) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PubSubListPeersResponse_Peer) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

// PubSubPublishRequest is a message used to publish data to a topic
type PubSubPublishRequest struct {
	// the topic we are publishing too
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// the data we are publishing
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// whether or not we should engage in advertise operations
	Advertise bool `protobuf:"varint,3,opt,name=advertise,proto3" json:"advertise,omitempty"`
}

func (m *PubSubPublishRequest) Reset()      { *m = PubSubPublishRequest{} }
func (*PubSubPublishRequest) ProtoMessage() {}
func (*PubSubPublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{2}
}
func (m *PubSubPublishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubPublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubPublishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubPublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubPublishRequest.Merge(m, src)
}
func (m *PubSubPublishRequest) XXX_Size() int {
	return m.Size()
}
func (m *PubSubPublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubPublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubPublishRequest proto.InternalMessageInfo

func (m *PubSubPublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PubSubPublishRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PubSubPublishRequest) GetAdvertise() bool {
	if m != nil {
		return m.Advertise
	}
	return false
}

// PubSubSubscribeRequest is used to initiate a subscription
// to a given pubsub topic and stream received messages
type PubSubSubscribeRequest struct {
	// the topic we should subscribe to
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// indicates whether the server should
	// perform service discover for peers on the same topic
	Discover bool `protobuf:"varint,2,opt,name=discover,proto3" json:"discover,omitempty"`
}

func (m *PubSubSubscribeRequest) Reset()      { *m = PubSubSubscribeRequest{} }
func (*PubSubSubscribeRequest) ProtoMessage() {}
func (*PubSubSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{3}
}
func (m *PubSubSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubSubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubSubscribeRequest.Merge(m, src)
}
func (m *PubSubSubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *PubSubSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubSubscribeRequest proto.InternalMessageInfo

func (m *PubSubSubscribeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PubSubSubscribeRequest) GetDiscover() bool {
	if m != nil {
		return m.Discover
	}
	return false
}

// PubSubTopics is a response that returns
// the names of all known topics
type PubSubTopicsResponse struct {
	// the names of topics
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *PubSubTopicsResponse) Reset()      { *m = PubSubTopicsResponse{} }
func (*PubSubTopicsResponse) ProtoMessage() {}
func (*PubSubTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{4}
}
func (m *PubSubTopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubTopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubTopicsResponse.Merge(m, src)
}
func (m *PubSubTopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *PubSubTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubTopicsResponse proto.InternalMessageInfo

func (m *PubSubTopicsResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// PubSubMessageResposne is a received pubsub message
// sent as a response to a subscription rpc call
type PubSubMessageResponse struct {
	// who this message is from
	From []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// the data of this message
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// the sequence number of this message
	Seqno []byte `protobuf:"bytes,3,opt,name=seqno,proto3" json:"seqno,omitempty"`
	// the topic IDs this message is sent to
	TopicIDs []string `protobuf:"bytes,4,rep,name=topicIDs,proto3" json:"topicIDs,omitempty"`
	// the signature of the sender
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	// the key of the sender
	Key []byte `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *PubSubMessageResponse) Reset()      { *m = PubSubMessageResponse{} }
func (*PubSubMessageResponse) ProtoMessage() {}
func (*PubSubMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{5}
}
func (m *PubSubMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubMessageResponse.Merge(m, src)
}
func (m *PubSubMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *PubSubMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubMessageResponse proto.InternalMessageInfo

func (m *PubSubMessageResponse) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *PubSubMessageResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PubSubMessageResponse) GetSeqno() []byte {
	if m != nil {
		return m.Seqno
	}
	return nil
}

func (m *PubSubMessageResponse) GetTopicIDs() []string {
	if m != nil {
		return m.TopicIDs
	}
	return nil
}

func (m *PubSubMessageResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PubSubMessageResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterType((*PubSubListPeersRequest)(nil), "pb.PubSubListPeersRequest")
	proto.RegisterType((*PubSubListPeersResponse)(nil), "pb.PubSubListPeersResponse")
	proto.RegisterType((*PubSubListPeersResponse_Peer)(nil), "pb.PubSubListPeersResponse.Peer")
	proto.RegisterType((*PubSubPublishRequest)(nil), "pb.PubSubPublishRequest")
	proto.RegisterType((*PubSubSubscribeRequest)(nil), "pb.PubSubSubscribeRequest")
	proto.RegisterType((*PubSubTopicsResponse)(nil), "pb.PubSubTopicsResponse")
	proto.RegisterType((*PubSubMessageResponse)(nil), "pb.PubSubMessageResponse")
}

func init() { proto.RegisterFile("pubsub.proto", fileDescriptor_91df006b05e20cf7) }

var fileDescriptor_91df006b05e20cf7 = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xc7, 0x7d, 0xf9, 0xa7, 0xe4, 0xf9, 0xe5, 0x27, 0xd0, 0x29, 0x14, 0x63, 0xd0, 0x29, 0xf2,
	0x94, 0x01, 0xd2, 0xaa, 0x54, 0xa8, 0x2b, 0xa8, 0x08, 0x05, 0x15, 0x29, 0x72, 0x99, 0x91, 0x7c,
	0xc9, 0xd5, 0xb5, 0x68, 0x72, 0xae, 0xef, 0xae, 0x52, 0x37, 0x36, 0x56, 0x76, 0x26, 0x36, 0x5e,
	0x02, 0x2f, 0x81, 0xb1, 0x63, 0xc7, 0xc6, 0x79, 0x03, 0x8c, 0x8c, 0xc8, 0xcf, 0xd5, 0x76, 0x52,
	0x42, 0xb7, 0xe7, 0xf3, 0xf8, 0xf9, 0xfb, 0xbd, 0xc7, 0xd0, 0x4d, 0x0c, 0x57, 0x86, 0x0f, 0x93,
	0x54, 0x6a, 0x49, 0x6b, 0x09, 0xf7, 0xc0, 0xe8, 0xf8, 0xd4, 0xb2, 0xf7, 0x2c, 0x8a, 0xf5, 0x89,
	0xe1, 0xc3, 0x89, 0x9c, 0x6d, 0x47, 0x32, 0x92, 0xdb, 0xe8, 0xe6, 0xe6, 0x18, 0x09, 0x01, 0x2d,
	0x1b, 0xee, 0xef, 0xc0, 0xd6, 0xd8, 0xf0, 0x23, 0xc3, 0x0f, 0x63, 0xa5, 0xc7, 0x42, 0xa4, 0x2a,
	0x10, 0x67, 0x46, 0x28, 0x4d, 0xb7, 0xa0, 0xa5, 0x65, 0x12, 0x4f, 0x94, 0x4b, 0xfa, 0xf5, 0x41,
	0x27, 0xb8, 0x21, 0xff, 0x33, 0x81, 0x87, 0x7f, 0xa5, 0xa8, 0x44, 0xce, 0x95, 0xa0, 0x2f, 0xa0,
	0x99, 0xe4, 0x0e, 0x4c, 0xf9, 0x6f, 0xb7, 0x3f, 0x4c, 0xf8, 0xf0, 0x1f, 0xb1, 0xc3, 0x9c, 0x02,
	0x1b, 0xee, 0xed, 0x41, 0x23, 0x47, 0xda, 0x83, 0x26, 0x76, 0x71, 0x49, 0x9f, 0x0c, 0x3a, 0x81,
	0x85, 0x7c, 0x92, 0x3c, 0x6c, 0x74, 0xe0, 0xd6, 0xd0, 0x7d, 0x43, 0xfe, 0x07, 0xe8, 0xd9, 0xe2,
	0x63, 0xc3, 0x4f, 0x63, 0x75, 0x52, 0x4c, 0xbe, 0xb9, 0x0a, 0x85, 0xc6, 0x34, 0xd4, 0x21, 0xd6,
	0xe8, 0x06, 0x68, 0xd3, 0x27, 0xd0, 0x09, 0xa7, 0xe7, 0x22, 0xd5, 0xb1, 0x12, 0x6e, 0xbd, 0x4f,
	0x06, 0xed, 0xa0, 0x72, 0xf8, 0x6f, 0x0b, 0x6d, 0x8e, 0x0c, 0x57, 0x93, 0x34, 0xe6, 0xe2, 0xee,
	0x0e, 0x1e, 0xb4, 0xa7, 0xb1, 0x9a, 0xc8, 0x73, 0x91, 0x62, 0x97, 0x76, 0x50, 0xb2, 0xff, 0xb4,
	0x98, 0xf5, 0x3d, 0xaa, 0x58, 0x2a, 0xd6, 0x83, 0xe6, 0x3c, 0x9c, 0x89, 0x42, 0x64, 0x0b, 0xfe,
	0x37, 0x02, 0x0f, 0x6c, 0xf8, 0x3b, 0xa1, 0x54, 0x18, 0x89, 0x32, 0x9e, 0x42, 0xe3, 0x38, 0x95,
	0x33, 0x6c, 0xdc, 0x0d, 0xd0, 0xde, 0xb8, 0x59, 0x0f, 0x9a, 0x4a, 0x9c, 0xcd, 0x25, 0x6e, 0xd5,
	0x0d, 0x2c, 0xe4, 0x13, 0xe2, 0xa8, 0xa3, 0x03, 0xe5, 0x36, 0xb0, 0x61, 0xc9, 0xb9, 0x16, 0x2a,
	0x8e, 0xe6, 0xa1, 0x36, 0xa9, 0x70, 0x9b, 0x98, 0x55, 0x39, 0xe8, 0x7d, 0xa8, 0x7f, 0x14, 0x17,
	0x6e, 0x0b, 0xfd, 0xb9, 0xb9, 0xfb, 0xb5, 0x06, 0x1d, 0x3b, 0xe3, 0xcb, 0xf1, 0x88, 0xee, 0xc3,
	0x3d, 0x0b, 0x6f, 0x84, 0xb6, 0x2b, 0xd2, 0x4e, 0xfe, 0xfa, 0xaf, 0x67, 0x89, 0xbe, 0xf0, 0xdc,
	0xea, 0x10, 0xd6, 0xf7, 0xf7, 0x1d, 0x7a, 0x58, 0x64, 0x96, 0x27, 0x42, 0xbd, 0x8d, 0x77, 0x83,
	0xd2, 0x7b, 0x8f, 0xef, 0xb8, 0xa9, 0xd5, 0x6a, 0xe5, 0x9b, 0xad, 0x56, 0xbb, 0xfd, 0x90, 0xde,
	0xa3, 0xea, 0xdb, 0x2d, 0xa5, 0x7d, 0x67, 0x87, 0xd0, 0x7d, 0xf8, 0x7f, 0xed, 0xc2, 0xe8, 0xca,
	0x22, 0xeb, 0x47, 0xe7, 0x55, 0xdb, 0xfa, 0xce, 0x80, 0xbc, 0xda, 0xbb, 0x5a, 0x30, 0xe7, 0x7a,
	0xc1, 0xc8, 0xaf, 0x05, 0x23, 0xbf, 0x17, 0x8c, 0x7c, 0xca, 0x18, 0xf9, 0x9e, 0x31, 0xf2, 0x23,
	0x63, 0xe4, 0x67, 0xc6, 0xc8, 0x65, 0xc6, 0xc8, 0x75, 0xc6, 0xc8, 0x97, 0x25, 0x73, 0x2e, 0x97,
	0xcc, 0xb9, 0x5a, 0x32, 0x87, 0xb7, 0xf0, 0xa7, 0x7c, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xcb,
	0x2a, 0xee, 0xa5, 0xe3, 0x03, 0x00, 0x00,
}

func (this *PubSubListPeersRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PubSubListPeersRequest)
	if !ok {
		that2, ok := that.(PubSubListPeersRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PubSubListPeersRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PubSubListPeersRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PubSubListPeersRequest but is not nil && this == nil")
	}
	if len(this.Topics) != len(that1.Topics) {
		return fmt.Errorf("Topics this(%v) Not Equal that(%v)", len(this.Topics), len(that1.Topics))
	}
	for i := range this.Topics {
		if this.Topics[i] != that1.Topics[i] {
			return fmt.Errorf("Topics this[%v](%v) Not Equal that[%v](%v)", i, this.Topics[i], i, that1.Topics[i])
		}
	}
	return nil
}
func (this *PubSubListPeersRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubListPeersRequest)
	if !ok {
		that2, ok := that.(PubSubListPeersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if this.Topics[i] != that1.Topics[i] {
			return false
		}
	}
	return true
}
func (this *PubSubListPeersResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PubSubListPeersResponse)
	if !ok {
		that2, ok := that.(PubSubListPeersResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PubSubListPeersResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PubSubListPeersResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PubSubListPeersResponse but is not nil && this == nil")
	}
	if len(this.Peers) != len(that1.Peers) {
		return fmt.Errorf("Peers this(%v) Not Equal that(%v)", len(this.Peers), len(that1.Peers))
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return fmt.Errorf("Peers this[%v](%v) Not Equal that[%v](%v)", i, this.Peers[i], i, that1.Peers[i])
		}
	}
	return nil
}
func (this *PubSubListPeersResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubListPeersResponse)
	if !ok {
		that2, ok := that.(PubSubListPeersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	return true
}
func (this *PubSubListPeersResponse_Peer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PubSubListPeersResponse_Peer)
	if !ok {
		that2, ok := that.(PubSubListPeersResponse_Peer)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PubSubListPeersResponse_Peer")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PubSubListPeersResponse_Peer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PubSubListPeersResponse_Peer but is not nil && this == nil")
	}
	if this.Topic != that1.Topic {
		return fmt.Errorf("Topic this(%v) Not Equal that(%v)", this.Topic, that1.Topic)
	}
	if this.PeerID != that1.PeerID {
		return fmt.Errorf("PeerID this(%v) Not Equal that(%v)", this.PeerID, that1.PeerID)
	}
	return nil
}
func (this *PubSubListPeersResponse_Peer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubListPeersResponse_Peer)
	if !ok {
		that2, ok := that.(PubSubListPeersResponse_Peer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if this.PeerID != that1.PeerID {
		return false
	}
	return true
}
func (this *PubSubPublishRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PubSubPublishRequest)
	if !ok {
		that2, ok := that.(PubSubPublishRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PubSubPublishRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PubSubPublishRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PubSubPublishRequest but is not nil && this == nil")
	}
	if this.Topic != that1.Topic {
		return fmt.Errorf("Topic this(%v) Not Equal that(%v)", this.Topic, that1.Topic)
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if this.Advertise != that1.Advertise {
		return fmt.Errorf("Advertise this(%v) Not Equal that(%v)", this.Advertise, that1.Advertise)
	}
	return nil
}
func (this *PubSubPublishRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubPublishRequest)
	if !ok {
		that2, ok := that.(PubSubPublishRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Advertise != that1.Advertise {
		return false
	}
	return true
}
func (this *PubSubSubscribeRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PubSubSubscribeRequest)
	if !ok {
		that2, ok := that.(PubSubSubscribeRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PubSubSubscribeRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PubSubSubscribeRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PubSubSubscribeRequest but is not nil && this == nil")
	}
	if this.Topic != that1.Topic {
		return fmt.Errorf("Topic this(%v) Not Equal that(%v)", this.Topic, that1.Topic)
	}
	if this.Discover != that1.Discover {
		return fmt.Errorf("Discover this(%v) Not Equal that(%v)", this.Discover, that1.Discover)
	}
	return nil
}
func (this *PubSubSubscribeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubSubscribeRequest)
	if !ok {
		that2, ok := that.(PubSubSubscribeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if this.Discover != that1.Discover {
		return false
	}
	return true
}
func (this *PubSubTopicsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PubSubTopicsResponse)
	if !ok {
		that2, ok := that.(PubSubTopicsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PubSubTopicsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PubSubTopicsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PubSubTopicsResponse but is not nil && this == nil")
	}
	if len(this.Names) != len(that1.Names) {
		return fmt.Errorf("Names this(%v) Not Equal that(%v)", len(this.Names), len(that1.Names))
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return fmt.Errorf("Names this[%v](%v) Not Equal that[%v](%v)", i, this.Names[i], i, that1.Names[i])
		}
	}
	return nil
}
func (this *PubSubTopicsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubTopicsResponse)
	if !ok {
		that2, ok := that.(PubSubTopicsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Names) != len(that1.Names) {
		return false
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return false
		}
	}
	return true
}
func (this *PubSubMessageResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PubSubMessageResponse)
	if !ok {
		that2, ok := that.(PubSubMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PubSubMessageResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PubSubMessageResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PubSubMessageResponse but is not nil && this == nil")
	}
	if !bytes.Equal(this.From, that1.From) {
		return fmt.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.Seqno, that1.Seqno) {
		return fmt.Errorf("Seqno this(%v) Not Equal that(%v)", this.Seqno, that1.Seqno)
	}
	if len(this.TopicIDs) != len(that1.TopicIDs) {
		return fmt.Errorf("TopicIDs this(%v) Not Equal that(%v)", len(this.TopicIDs), len(that1.TopicIDs))
	}
	for i := range this.TopicIDs {
		if this.TopicIDs[i] != that1.TopicIDs[i] {
			return fmt.Errorf("TopicIDs this[%v](%v) Not Equal that[%v](%v)", i, this.TopicIDs[i], i, that1.TopicIDs[i])
		}
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	return nil
}
func (this *PubSubMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubMessageResponse)
	if !ok {
		that2, ok := that.(PubSubMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.From, that1.From) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if !bytes.Equal(this.Seqno, that1.Seqno) {
		return false
	}
	if len(this.TopicIDs) != len(that1.TopicIDs) {
		return false
	}
	for i := range this.TopicIDs {
		if this.TopicIDs[i] != that1.TopicIDs[i] {
			return false
		}
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *PubSubListPeersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.PubSubListPeersRequest{")
	s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubListPeersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.PubSubListPeersResponse{")
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubListPeersResponse_Peer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.PubSubListPeersResponse_Peer{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "PeerID: "+fmt.Sprintf("%#v", this.PeerID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubPublishRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.PubSubPublishRequest{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Advertise: "+fmt.Sprintf("%#v", this.Advertise)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubSubscribeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.PubSubSubscribeRequest{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "Discover: "+fmt.Sprintf("%#v", this.Discover)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubTopicsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.PubSubTopicsResponse{")
	s = append(s, "Names: "+fmt.Sprintf("%#v", this.Names)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.PubSubMessageResponse{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Seqno: "+fmt.Sprintf("%#v", this.Seqno)+",\n")
	s = append(s, "TopicIDs: "+fmt.Sprintf("%#v", this.TopicIDs)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPubsub(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubSubAPIClient is the client API for PubSubAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubSubAPIClient interface {
	// PubSubGetTopics is used to return a list of all
	// known topics the pubsub instance is subscribed to.
	PubSubGetTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PubSubTopicsResponse, error)
	// PubSubListPeers is used to return a list of peers subscribed
	// to a given topic or topics.
	PubSubListPeers(ctx context.Context, in *PubSubListPeersRequest, opts ...grpc.CallOption) (*PubSubListPeersResponse, error)
	// PubSubSubscribe is used to subscribe to a topic and receive messages
	// Server will stream the messages received on the topic specified
	// during the initial subscription call, and send each message
	// back to the client as it is received.
	PubSubSubscribe(ctx context.Context, in *PubSubSubscribeRequest, opts ...grpc.CallOption) (PubSubAPI_PubSubSubscribeClient, error)
	// PubSubPublish is used to send a stream of messages to a pubsub topic.
	PubSubPublish(ctx context.Context, opts ...grpc.CallOption) (PubSubAPI_PubSubPublishClient, error)
}

type pubSubAPIClient struct {
	cc *grpc.ClientConn
}

func NewPubSubAPIClient(cc *grpc.ClientConn) PubSubAPIClient {
	return &pubSubAPIClient{cc}
}

func (c *pubSubAPIClient) PubSubGetTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PubSubTopicsResponse, error) {
	out := new(PubSubTopicsResponse)
	err := c.cc.Invoke(ctx, "/pb.PubSubAPI/PubSubGetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubAPIClient) PubSubListPeers(ctx context.Context, in *PubSubListPeersRequest, opts ...grpc.CallOption) (*PubSubListPeersResponse, error) {
	out := new(PubSubListPeersResponse)
	err := c.cc.Invoke(ctx, "/pb.PubSubAPI/PubSubListPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubAPIClient) PubSubSubscribe(ctx context.Context, in *PubSubSubscribeRequest, opts ...grpc.CallOption) (PubSubAPI_PubSubSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSubAPI_serviceDesc.Streams[0], "/pb.PubSubAPI/PubSubSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubAPIPubSubSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSubAPI_PubSubSubscribeClient interface {
	Recv() (*PubSubMessageResponse, error)
	grpc.ClientStream
}

type pubSubAPIPubSubSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubSubAPIPubSubSubscribeClient) Recv() (*PubSubMessageResponse, error) {
	m := new(PubSubMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubSubAPIClient) PubSubPublish(ctx context.Context, opts ...grpc.CallOption) (PubSubAPI_PubSubPublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSubAPI_serviceDesc.Streams[1], "/pb.PubSubAPI/PubSubPublish", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubAPIPubSubPublishClient{stream}
	return x, nil
}

type PubSubAPI_PubSubPublishClient interface {
	Send(*PubSubPublishRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type pubSubAPIPubSubPublishClient struct {
	grpc.ClientStream
}

func (x *pubSubAPIPubSubPublishClient) Send(m *PubSubPublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubSubAPIPubSubPublishClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubAPIServer is the server API for PubSubAPI service.
type PubSubAPIServer interface {
	// PubSubGetTopics is used to return a list of all
	// known topics the pubsub instance is subscribed to.
	PubSubGetTopics(context.Context, *Empty) (*PubSubTopicsResponse, error)
	// PubSubListPeers is used to return a list of peers subscribed
	// to a given topic or topics.
	PubSubListPeers(context.Context, *PubSubListPeersRequest) (*PubSubListPeersResponse, error)
	// PubSubSubscribe is used to subscribe to a topic and receive messages
	// Server will stream the messages received on the topic specified
	// during the initial subscription call, and send each message
	// back to the client as it is received.
	PubSubSubscribe(*PubSubSubscribeRequest, PubSubAPI_PubSubSubscribeServer) error
	// PubSubPublish is used to send a stream of messages to a pubsub topic.
	PubSubPublish(PubSubAPI_PubSubPublishServer) error
}

// UnimplementedPubSubAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPubSubAPIServer struct {
}

func (*UnimplementedPubSubAPIServer) PubSubGetTopics(ctx context.Context, req *Empty) (*PubSubTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubSubGetTopics not implemented")
}
func (*UnimplementedPubSubAPIServer) PubSubListPeers(ctx context.Context, req *PubSubListPeersRequest) (*PubSubListPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubSubListPeers not implemented")
}
func (*UnimplementedPubSubAPIServer) PubSubSubscribe(req *PubSubSubscribeRequest, srv PubSubAPI_PubSubSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method PubSubSubscribe not implemented")
}
func (*UnimplementedPubSubAPIServer) PubSubPublish(srv PubSubAPI_PubSubPublishServer) error {
	return status.Errorf(codes.Unimplemented, "method PubSubPublish not implemented")
}

func RegisterPubSubAPIServer(s *grpc.Server, srv PubSubAPIServer) {
	s.RegisterService(&_PubSubAPI_serviceDesc, srv)
}

func _PubSubAPI_PubSubGetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubAPIServer).PubSubGetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PubSubAPI/PubSubGetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubAPIServer).PubSubGetTopics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubAPI_PubSubListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubSubListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubAPIServer).PubSubListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PubSubAPI/PubSubListPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubAPIServer).PubSubListPeers(ctx, req.(*PubSubListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubAPI_PubSubSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PubSubSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubAPIServer).PubSubSubscribe(m, &pubSubAPIPubSubSubscribeServer{stream})
}

type PubSubAPI_PubSubSubscribeServer interface {
	Send(*PubSubMessageResponse) error
	grpc.ServerStream
}

type pubSubAPIPubSubSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubSubAPIPubSubSubscribeServer) Send(m *PubSubMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PubSubAPI_PubSubPublish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PubSubAPIServer).PubSubPublish(&pubSubAPIPubSubPublishServer{stream})
}

type PubSubAPI_PubSubPublishServer interface {
	SendAndClose(*Empty) error
	Recv() (*PubSubPublishRequest, error)
	grpc.ServerStream
}

type pubSubAPIPubSubPublishServer struct {
	grpc.ServerStream
}

func (x *pubSubAPIPubSubPublishServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubSubAPIPubSubPublishServer) Recv() (*PubSubPublishRequest, error) {
	m := new(PubSubPublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PubSubAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PubSubAPI",
	HandlerType: (*PubSubAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PubSubGetTopics",
			Handler:    _PubSubAPI_PubSubGetTopics_Handler,
		},
		{
			MethodName: "PubSubListPeers",
			Handler:    _PubSubAPI_PubSubListPeers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PubSubSubscribe",
			Handler:       _PubSubAPI_PubSubSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PubSubPublish",
			Handler:       _PubSubAPI_PubSubPublish_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}

func (m *PubSubListPeersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubListPeersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubListPeersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintPubsub(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PubSubListPeersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubListPeersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubListPeersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPubsub(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PubSubListPeersResponse_Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubListPeersResponse_Peer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubListPeersResponse_Peer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubSubPublishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubPublishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubPublishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Advertise {
		i--
		if m.Advertise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubSubSubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubSubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubSubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Discover {
		i--
		if m.Discover {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubSubTopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubTopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubTopicsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintPubsub(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PubSubMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TopicIDs) > 0 {
		for iNdEx := len(m.TopicIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TopicIDs[iNdEx])
			copy(dAtA[i:], m.TopicIDs[iNdEx])
			i = encodeVarintPubsub(dAtA, i, uint64(len(m.TopicIDs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Seqno) > 0 {
		i -= len(m.Seqno)
		copy(dAtA[i:], m.Seqno)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Seqno)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPubsub(dAtA []byte, offset int, v uint64) int {
	offset -= sovPubsub(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedPubSubListPeersRequest(r randyPubsub, easy bool) *PubSubListPeersRequest {
	this := &PubSubListPeersRequest{}
	v1 := r.Intn(10)
	this.Topics = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Topics[i] = string(randStringPubsub(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPubSubListPeersResponse(r randyPubsub, easy bool) *PubSubListPeersResponse {
	this := &PubSubListPeersResponse{}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Peers = make([]*PubSubListPeersResponse_Peer, v2)
		for i := 0; i < v2; i++ {
			this.Peers[i] = NewPopulatedPubSubListPeersResponse_Peer(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPubSubListPeersResponse_Peer(r randyPubsub, easy bool) *PubSubListPeersResponse_Peer {
	this := &PubSubListPeersResponse_Peer{}
	this.Topic = string(randStringPubsub(r))
	this.PeerID = string(randStringPubsub(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPubSubPublishRequest(r randyPubsub, easy bool) *PubSubPublishRequest {
	this := &PubSubPublishRequest{}
	this.Topic = string(randStringPubsub(r))
	v3 := r.Intn(100)
	this.Data = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	this.Advertise = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPubSubSubscribeRequest(r randyPubsub, easy bool) *PubSubSubscribeRequest {
	this := &PubSubSubscribeRequest{}
	this.Topic = string(randStringPubsub(r))
	this.Discover = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPubSubTopicsResponse(r randyPubsub, easy bool) *PubSubTopicsResponse {
	this := &PubSubTopicsResponse{}
	v4 := r.Intn(10)
	this.Names = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.Names[i] = string(randStringPubsub(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPubSubMessageResponse(r randyPubsub, easy bool) *PubSubMessageResponse {
	this := &PubSubMessageResponse{}
	v5 := r.Intn(100)
	this.From = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.From[i] = byte(r.Intn(256))
	}
	v6 := r.Intn(100)
	this.Data = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	v7 := r.Intn(100)
	this.Seqno = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Seqno[i] = byte(r.Intn(256))
	}
	v8 := r.Intn(10)
	this.TopicIDs = make([]string, v8)
	for i := 0; i < v8; i++ {
		this.TopicIDs[i] = string(randStringPubsub(r))
	}
	v9 := r.Intn(100)
	this.Signature = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	v10 := r.Intn(100)
	this.Key = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyPubsub interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePubsub(r randyPubsub) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPubsub(r randyPubsub) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RunePubsub(r)
	}
	return string(tmps)
}
func randUnrecognizedPubsub(r randyPubsub, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPubsub(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPubsub(dAtA []byte, r randyPubsub, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePubsub(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulatePubsub(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulatePubsub(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePubsub(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePubsub(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePubsub(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePubsub(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PubSubListPeersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			l = len(s)
			n += 1 + l + sovPubsub(uint64(l))
		}
	}
	return n
}

func (m *PubSubListPeersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovPubsub(uint64(l))
		}
	}
	return n
}

func (m *PubSubListPeersResponse_Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *PubSubPublishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.Advertise {
		n += 2
	}
	return n
}

func (m *PubSubSubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.Discover {
		n += 2
	}
	return n
}

func (m *PubSubTopicsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovPubsub(uint64(l))
		}
	}
	return n
}

func (m *PubSubMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Seqno)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if len(m.TopicIDs) > 0 {
		for _, s := range m.TopicIDs {
			l = len(s)
			n += 1 + l + sovPubsub(uint64(l))
		}
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func sovPubsub(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPubsub(x uint64) (n int) {
	return sovPubsub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PubSubListPeersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubListPeersRequest{`,
		`Topics:` + fmt.Sprintf("%v", this.Topics) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubListPeersResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeers := "[]*PubSubListPeersResponse_Peer{"
	for _, f := range this.Peers {
		repeatedStringForPeers += strings.Replace(fmt.Sprintf("%v", f), "PubSubListPeersResponse_Peer", "PubSubListPeersResponse_Peer", 1) + ","
	}
	repeatedStringForPeers += "}"
	s := strings.Join([]string{`&PubSubListPeersResponse{`,
		`Peers:` + repeatedStringForPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubListPeersResponse_Peer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubListPeersResponse_Peer{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`PeerID:` + fmt.Sprintf("%v", this.PeerID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubPublishRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubPublishRequest{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Advertise:` + fmt.Sprintf("%v", this.Advertise) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubSubscribeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubSubscribeRequest{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Discover:` + fmt.Sprintf("%v", this.Discover) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubTopicsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubTopicsResponse{`,
		`Names:` + fmt.Sprintf("%v", this.Names) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubMessageResponse{`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Seqno:` + fmt.Sprintf("%v", this.Seqno) + `,`,
		`TopicIDs:` + fmt.Sprintf("%v", this.TopicIDs) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPubsub(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PubSubListPeersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubListPeersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubListPeersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubListPeersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubListPeersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubListPeersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &PubSubListPeersResponse_Peer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubListPeersResponse_Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubPublishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubPublishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubPublishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advertise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Advertise = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubSubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubSubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubSubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discover", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Discover = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubTopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubTopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubTopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seqno = append(m.Seqno[:0], dAtA[iNdEx:postIndex]...)
			if m.Seqno == nil {
				m.Seqno = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicIDs = append(m.TopicIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubsub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPubsub
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPubsub
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPubsub
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPubsub        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubsub          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPubsub = fmt.Errorf("proto: unexpected end of group")
)
