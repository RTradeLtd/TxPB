// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pubsub.proto

package pb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PSREQTYPE int32

const (
	PSREQTYPE_GET_TOPICS PSREQTYPE = 0
	PSREQTYPE_LIST_PEERS PSREQTYPE = 1
	PSREQTYPE_SUBSCRIBE  PSREQTYPE = 2
	PSREQTYPE_PUBLISH    PSREQTYPE = 3
)

var PSREQTYPE_name = map[int32]string{
	0: "GET_TOPICS",
	1: "LIST_PEERS",
	2: "SUBSCRIBE",
	3: "PUBLISH",
}

var PSREQTYPE_value = map[string]int32{
	"GET_TOPICS": 0,
	"LIST_PEERS": 1,
	"SUBSCRIBE":  2,
	"PUBLISH":    3,
}

func (x PSREQTYPE) String() string {
	return proto.EnumName(PSREQTYPE_name, int32(x))
}

func (PSREQTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{0}
}

type PubSubRequest struct {
	RequestType PSREQTYPE     `protobuf:"varint,1,opt,name=requestType,proto3,enum=pb.PSREQTYPE" json:"requestType,omitempty"`
	Peers       []*PubSubPeer `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
	Topics      []string      `protobuf:"bytes,3,rep,name=topics,proto3" json:"topics,omitempty"`
	Topic       string        `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	Data        []byte        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Advertise   bool          `protobuf:"varint,6,opt,name=advertise,proto3" json:"advertise,omitempty"`
	Discover    bool          `protobuf:"varint,7,opt,name=discover,proto3" json:"discover,omitempty"`
}

func (m *PubSubRequest) Reset()         { *m = PubSubRequest{} }
func (m *PubSubRequest) String() string { return proto.CompactTextString(m) }
func (*PubSubRequest) ProtoMessage()    {}
func (*PubSubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{0}
}
func (m *PubSubRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubRequest.Merge(m, src)
}
func (m *PubSubRequest) XXX_Size() int {
	return m.Size()
}
func (m *PubSubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubRequest proto.InternalMessageInfo

func (m *PubSubRequest) GetRequestType() PSREQTYPE {
	if m != nil {
		return m.RequestType
	}
	return PSREQTYPE_GET_TOPICS
}

func (m *PubSubRequest) GetPeers() []*PubSubPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *PubSubRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *PubSubRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PubSubRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PubSubRequest) GetAdvertise() bool {
	if m != nil {
		return m.Advertise
	}
	return false
}

func (m *PubSubRequest) GetDiscover() bool {
	if m != nil {
		return m.Discover
	}
	return false
}

type PubSubResponse struct {
	RequestType PSREQTYPE      `protobuf:"varint,1,opt,name=requestType,proto3,enum=pb.PSREQTYPE" json:"requestType,omitempty"`
	Message     *PubSubMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Names       []string       `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *PubSubResponse) Reset()         { *m = PubSubResponse{} }
func (m *PubSubResponse) String() string { return proto.CompactTextString(m) }
func (*PubSubResponse) ProtoMessage()    {}
func (*PubSubResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{1}
}
func (m *PubSubResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubResponse.Merge(m, src)
}
func (m *PubSubResponse) XXX_Size() int {
	return m.Size()
}
func (m *PubSubResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubResponse proto.InternalMessageInfo

func (m *PubSubResponse) GetRequestType() PSREQTYPE {
	if m != nil {
		return m.RequestType
	}
	return PSREQTYPE_GET_TOPICS
}

func (m *PubSubResponse) GetMessage() *PubSubMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PubSubResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type PubSubMessage struct {
	// who this message is from
	From []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// the data of this message
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// the sequence number of this message
	Seqno []byte `protobuf:"bytes,3,opt,name=seqno,proto3" json:"seqno,omitempty"`
	// the topic IDs this message is sent to
	TopicIDs []string `protobuf:"bytes,4,rep,name=topicIDs,proto3" json:"topicIDs,omitempty"`
	// the signature of the sender
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	// the key of the sender
	Key []byte `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *PubSubMessage) Reset()         { *m = PubSubMessage{} }
func (m *PubSubMessage) String() string { return proto.CompactTextString(m) }
func (*PubSubMessage) ProtoMessage()    {}
func (*PubSubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{2}
}
func (m *PubSubMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubMessage.Merge(m, src)
}
func (m *PubSubMessage) XXX_Size() int {
	return m.Size()
}
func (m *PubSubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubMessage proto.InternalMessageInfo

func (m *PubSubMessage) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *PubSubMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PubSubMessage) GetSeqno() []byte {
	if m != nil {
		return m.Seqno
	}
	return nil
}

func (m *PubSubMessage) GetTopicIDs() []string {
	if m != nil {
		return m.TopicIDs
	}
	return nil
}

func (m *PubSubMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PubSubMessage) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type PubSubPeer struct {
	Topic  string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	PeerID string `protobuf:"bytes,2,opt,name=peerID,proto3" json:"peerID,omitempty"`
}

func (m *PubSubPeer) Reset()         { *m = PubSubPeer{} }
func (m *PubSubPeer) String() string { return proto.CompactTextString(m) }
func (*PubSubPeer) ProtoMessage()    {}
func (*PubSubPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{3}
}
func (m *PubSubPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubPeer.Merge(m, src)
}
func (m *PubSubPeer) XXX_Size() int {
	return m.Size()
}
func (m *PubSubPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubPeer.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubPeer proto.InternalMessageInfo

func (m *PubSubPeer) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PubSubPeer) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.PSREQTYPE", PSREQTYPE_name, PSREQTYPE_value)
	proto.RegisterType((*PubSubRequest)(nil), "pb.PubSubRequest")
	proto.RegisterType((*PubSubResponse)(nil), "pb.PubSubResponse")
	proto.RegisterType((*PubSubMessage)(nil), "pb.PubSubMessage")
	proto.RegisterType((*PubSubPeer)(nil), "pb.PubSubPeer")
}

func init() { proto.RegisterFile("pubsub.proto", fileDescriptor_91df006b05e20cf7) }

var fileDescriptor_91df006b05e20cf7 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x6b, 0x9c, 0x40,
	0x18, 0xc6, 0x1d, 0xdd, 0x75, 0xe3, 0xbb, 0x7f, 0xb0, 0x43, 0x08, 0x43, 0x28, 0x22, 0xd2, 0x83,
	0xb4, 0xb0, 0x2d, 0x5b, 0x7a, 0xe9, 0xad, 0x26, 0x92, 0x0a, 0x29, 0xb5, 0xa3, 0x39, 0xf4, 0x14,
	0x34, 0x3b, 0x0d, 0x4b, 0xd9, 0xd5, 0x38, 0x1a, 0xc8, 0xbd, 0x1f, 0xa0, 0xd7, 0x7e, 0xa3, 0x1e,
	0xf7, 0xd8, 0x63, 0x71, 0xbf, 0x48, 0x71, 0xc6, 0x55, 0xaf, 0xbd, 0xbd, 0xcf, 0xfb, 0xbe, 0x3a,
	0xf3, 0x7b, 0x9e, 0x81, 0x59, 0x5e, 0xa5, 0xbc, 0x4a, 0x97, 0x79, 0x91, 0x95, 0x19, 0x56, 0xf3,
	0xd4, 0xa9, 0x11, 0xcc, 0xc3, 0x2a, 0x8d, 0xaa, 0x94, 0xb2, 0x87, 0x8a, 0xf1, 0x12, 0xbf, 0x86,
	0x69, 0x21, 0xcb, 0xf8, 0x29, 0x67, 0x04, 0xd9, 0xc8, 0x5d, 0xac, 0xe6, 0xcb, 0x3c, 0x5d, 0x86,
	0x11, 0xf5, 0xbf, 0xc4, 0x5f, 0x43, 0x9f, 0x0e, 0x37, 0xf0, 0x0b, 0x18, 0xe7, 0x8c, 0x15, 0x9c,
	0xa8, 0xb6, 0xe6, 0x4e, 0x57, 0x0b, 0xb1, 0x2a, 0x7e, 0x19, 0x32, 0x56, 0x50, 0x39, 0xc4, 0x67,
	0xa0, 0x97, 0x59, 0xbe, 0xb9, 0xe3, 0x44, 0xb3, 0x35, 0xd7, 0xa0, 0xad, 0xc2, 0xa7, 0x30, 0x16,
	0x15, 0x19, 0xd9, 0xc8, 0x35, 0xa8, 0x14, 0x18, 0xc3, 0x68, 0x9d, 0x94, 0x09, 0x19, 0xdb, 0xc8,
	0x9d, 0x51, 0x51, 0xe3, 0xe7, 0x60, 0x24, 0xeb, 0x47, 0x56, 0x94, 0x1b, 0xce, 0x88, 0x6e, 0x23,
	0xf7, 0x84, 0xf6, 0x0d, 0x7c, 0x0e, 0x27, 0xeb, 0x0d, 0xbf, 0xcb, 0x1e, 0x59, 0x41, 0x26, 0x62,
	0xd8, 0x69, 0xe7, 0x07, 0x82, 0xc5, 0x11, 0x92, 0xe7, 0xd9, 0x8e, 0xb3, 0xff, 0xa7, 0x7c, 0x05,
	0x93, 0x2d, 0xe3, 0x3c, 0xb9, 0x67, 0x44, 0xb5, 0x91, 0x3b, 0x5d, 0x3d, 0xeb, 0x39, 0x3f, 0xc9,
	0x01, 0x3d, 0x6e, 0x34, 0x50, 0xbb, 0x64, 0xcb, 0x8e, 0xac, 0x52, 0x38, 0xbf, 0x3a, 0xaf, 0xdb,
	0x0f, 0x1a, 0xcc, 0x6f, 0x45, 0xb6, 0x15, 0xc7, 0xcf, 0xa8, 0xa8, 0x3b, 0x74, 0x75, 0x80, 0x7e,
	0x0a, 0x63, 0xce, 0x1e, 0x76, 0x19, 0xd1, 0x44, 0x53, 0x8a, 0x06, 0x59, 0xb8, 0x15, 0x5c, 0x72,
	0x32, 0x12, 0x07, 0x75, 0xba, 0x31, 0x8b, 0x6f, 0xee, 0x77, 0x49, 0x59, 0x15, 0xac, 0x75, 0xb1,
	0x6f, 0x60, 0x13, 0xb4, 0xef, 0xec, 0x49, 0x98, 0x38, 0xa3, 0x4d, 0xe9, 0xbc, 0x07, 0xe8, 0x33,
	0xeb, 0x43, 0x41, 0xc3, 0x50, 0xce, 0x40, 0x6f, 0xb2, 0x0c, 0x2e, 0xc5, 0xdd, 0x0c, 0xda, 0xaa,
	0x97, 0x57, 0x60, 0x74, 0xa6, 0xe1, 0x05, 0xc0, 0x95, 0x1f, 0xdf, 0xc6, 0x9f, 0xc3, 0xe0, 0x22,
	0x32, 0x95, 0x46, 0x5f, 0x07, 0x51, 0x7c, 0x1b, 0xfa, 0x3e, 0x8d, 0x4c, 0x84, 0xe7, 0x60, 0x44,
	0x37, 0x5e, 0x74, 0x41, 0x03, 0xcf, 0x37, 0x55, 0x3c, 0x85, 0x49, 0x78, 0xe3, 0x5d, 0x07, 0xd1,
	0x47, 0x53, 0x5b, 0x79, 0x60, 0xc8, 0x4b, 0x7c, 0x08, 0x03, 0xfc, 0x0e, 0x74, 0x29, 0xf0, 0xc0,
	0xe9, 0xf6, 0x91, 0x9e, 0xe3, 0x61, 0x4b, 0x46, 0xea, 0x28, 0x2e, 0x7a, 0x83, 0x3c, 0xf2, 0xbb,
	0xb6, 0xd0, 0xbe, 0xb6, 0xd0, 0xdf, 0xda, 0x42, 0x3f, 0x0f, 0x96, 0xb2, 0x3f, 0x58, 0xca, 0x9f,
	0x83, 0xa5, 0xa4, 0xba, 0x78, 0xf5, 0x6f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x32, 0x9a, 0x88,
	0x75, 0x05, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubSubAPIClient is the client API for PubSubAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubSubAPIClient interface {
	// PubSub allows controlling libp2p pubsub topics and subscriptions
	PubSub(ctx context.Context, opts ...grpc.CallOption) (PubSubAPI_PubSubClient, error)
}

type pubSubAPIClient struct {
	cc *grpc.ClientConn
}

func NewPubSubAPIClient(cc *grpc.ClientConn) PubSubAPIClient {
	return &pubSubAPIClient{cc}
}

func (c *pubSubAPIClient) PubSub(ctx context.Context, opts ...grpc.CallOption) (PubSubAPI_PubSubClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSubAPI_serviceDesc.Streams[0], "/pb.PubSubAPI/PubSub", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubAPIPubSubClient{stream}
	return x, nil
}

type PubSubAPI_PubSubClient interface {
	Send(*PubSubRequest) error
	Recv() (*PubSubResponse, error)
	grpc.ClientStream
}

type pubSubAPIPubSubClient struct {
	grpc.ClientStream
}

func (x *pubSubAPIPubSubClient) Send(m *PubSubRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubSubAPIPubSubClient) Recv() (*PubSubResponse, error) {
	m := new(PubSubResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubAPIServer is the server API for PubSubAPI service.
type PubSubAPIServer interface {
	// PubSub allows controlling libp2p pubsub topics and subscriptions
	PubSub(PubSubAPI_PubSubServer) error
}

// UnimplementedPubSubAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPubSubAPIServer struct {
}

func (*UnimplementedPubSubAPIServer) PubSub(srv PubSubAPI_PubSubServer) error {
	return status.Errorf(codes.Unimplemented, "method PubSub not implemented")
}

func RegisterPubSubAPIServer(s *grpc.Server, srv PubSubAPIServer) {
	s.RegisterService(&_PubSubAPI_serviceDesc, srv)
}

func _PubSubAPI_PubSub_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PubSubAPIServer).PubSub(&pubSubAPIPubSubServer{stream})
}

type PubSubAPI_PubSubServer interface {
	Send(*PubSubResponse) error
	Recv() (*PubSubRequest, error)
	grpc.ServerStream
}

type pubSubAPIPubSubServer struct {
	grpc.ServerStream
}

func (x *pubSubAPIPubSubServer) Send(m *PubSubResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubSubAPIPubSubServer) Recv() (*PubSubRequest, error) {
	m := new(PubSubRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PubSubAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PubSubAPI",
	HandlerType: (*PubSubAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PubSub",
			Handler:       _PubSubAPI_PubSub_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}

func (m *PubSubRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Discover {
		i--
		if m.Discover {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Advertise {
		i--
		if m.Advertise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintPubsub(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPubsub(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RequestType != 0 {
		i = encodeVarintPubsub(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubSubResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintPubsub(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPubsub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RequestType != 0 {
		i = encodeVarintPubsub(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubSubMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TopicIDs) > 0 {
		for iNdEx := len(m.TopicIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TopicIDs[iNdEx])
			copy(dAtA[i:], m.TopicIDs[iNdEx])
			i = encodeVarintPubsub(dAtA, i, uint64(len(m.TopicIDs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Seqno) > 0 {
		i -= len(m.Seqno)
		copy(dAtA[i:], m.Seqno)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Seqno)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubSubPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPubsub(dAtA []byte, offset int, v uint64) int {
	offset -= sovPubsub(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PubSubRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != 0 {
		n += 1 + sovPubsub(uint64(m.RequestType))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovPubsub(uint64(l))
		}
	}
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			l = len(s)
			n += 1 + l + sovPubsub(uint64(l))
		}
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.Advertise {
		n += 2
	}
	if m.Discover {
		n += 2
	}
	return n
}

func (m *PubSubResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != 0 {
		n += 1 + sovPubsub(uint64(m.RequestType))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovPubsub(uint64(l))
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovPubsub(uint64(l))
		}
	}
	return n
}

func (m *PubSubMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Seqno)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if len(m.TopicIDs) > 0 {
		for _, s := range m.TopicIDs {
			l = len(s)
			n += 1 + l + sovPubsub(uint64(l))
		}
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *PubSubPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func sovPubsub(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPubsub(x uint64) (n int) {
	return sovPubsub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PubSubRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= PSREQTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &PubSubPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advertise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Advertise = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discover", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Discover = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= PSREQTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &PubSubMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seqno = append(m.Seqno[:0], dAtA[iNdEx:postIndex]...)
			if m.Seqno == nil {
				m.Seqno = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicIDs = append(m.TopicIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubsub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPubsub
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPubsub
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPubsub
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPubsub        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubsub          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPubsub = fmt.Errorf("proto: unexpected end of group")
)
