// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: namesys.proto
#ifndef GRPC_namesys_2eproto__INCLUDED
#define GRPC_namesys_2eproto__INCLUDED

#include "namesys.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace pb {

// NameSysAPI provides a generic name resolution API
class NameSysAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "pb.NameSysAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // NameSysResolve is used to resolve a name, waiting for the request to complete
    virtual ::grpc::Status NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::pb::NameSysResolveResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::NameSysResolveResult>> AsyncNameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::NameSysResolveResult>>(AsyncNameSysResolveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::NameSysResolveResult>> PrepareAsyncNameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::NameSysResolveResult>>(PrepareAsyncNameSysResolveRaw(context, request, cq));
    }
    // NameSysResolveAsync is like Resolve, except instead of waiting for the request
    // to complete, we send back a stream which we will send the result on
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::NameSysResolveResult>> NameSysResolveAsync(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::NameSysResolveResult>>(NameSysResolveAsyncRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::NameSysResolveResult>> AsyncNameSysResolveAsync(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::NameSysResolveResult>>(AsyncNameSysResolveAsyncRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::NameSysResolveResult>> PrepareAsyncNameSysResolveAsync(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::NameSysResolveResult>>(PrepareAsyncNameSysResolveAsyncRaw(context, request, cq));
    }
    // NameSysPublish is used to publish an IPNS record, with/with-out an EOL
    virtual ::grpc::Status NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::pb::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>> AsyncNameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>>(AsyncNameSysPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>> PrepareAsyncNameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>>(PrepareAsyncNameSysPublishRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // NameSysResolve is used to resolve a name, waiting for the request to complete
      virtual void NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NameSysResolve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::NameSysResolveResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NameSysResolve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::NameSysResolveResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NameSysResolve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::NameSysResolveResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // NameSysResolveAsync is like Resolve, except instead of waiting for the request
      // to complete, we send back a stream which we will send the result on
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NameSysResolveAsync(::grpc::ClientContext* context, ::pb::NameSysResolveRequest* request, ::grpc::ClientReadReactor< ::pb::NameSysResolveResult>* reactor) = 0;
      #else
      virtual void NameSysResolveAsync(::grpc::ClientContext* context, ::pb::NameSysResolveRequest* request, ::grpc::experimental::ClientReadReactor< ::pb::NameSysResolveResult>* reactor) = 0;
      #endif
      // NameSysPublish is used to publish an IPNS record, with/with-out an EOL
      virtual void NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NameSysPublish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NameSysPublish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NameSysPublish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::NameSysResolveResult>* AsyncNameSysResolveRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::NameSysResolveResult>* PrepareAsyncNameSysResolveRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pb::NameSysResolveResult>* NameSysResolveAsyncRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::NameSysResolveResult>* AsyncNameSysResolveAsyncRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::NameSysResolveResult>* PrepareAsyncNameSysResolveAsyncRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>* AsyncNameSysPublishRaw(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>* PrepareAsyncNameSysPublishRaw(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::pb::NameSysResolveResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::NameSysResolveResult>> AsyncNameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::NameSysResolveResult>>(AsyncNameSysResolveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::NameSysResolveResult>> PrepareAsyncNameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::NameSysResolveResult>>(PrepareAsyncNameSysResolveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pb::NameSysResolveResult>> NameSysResolveAsync(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::NameSysResolveResult>>(NameSysResolveAsyncRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::NameSysResolveResult>> AsyncNameSysResolveAsync(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::NameSysResolveResult>>(AsyncNameSysResolveAsyncRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::NameSysResolveResult>> PrepareAsyncNameSysResolveAsync(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::NameSysResolveResult>>(PrepareAsyncNameSysResolveAsyncRaw(context, request, cq));
    }
    ::grpc::Status NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::pb::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Empty>> AsyncNameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Empty>>(AsyncNameSysPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Empty>> PrepareAsyncNameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Empty>>(PrepareAsyncNameSysPublishRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response, std::function<void(::grpc::Status)>) override;
      void NameSysResolve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::NameSysResolveResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NameSysResolve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::NameSysResolveResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NameSysResolve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::NameSysResolveResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NameSysResolveAsync(::grpc::ClientContext* context, ::pb::NameSysResolveRequest* request, ::grpc::ClientReadReactor< ::pb::NameSysResolveResult>* reactor) override;
      #else
      void NameSysResolveAsync(::grpc::ClientContext* context, ::pb::NameSysResolveRequest* request, ::grpc::experimental::ClientReadReactor< ::pb::NameSysResolveResult>* reactor) override;
      #endif
      void NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response, std::function<void(::grpc::Status)>) override;
      void NameSysPublish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NameSysPublish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NameSysPublish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pb::NameSysResolveResult>* AsyncNameSysResolveRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::NameSysResolveResult>* PrepareAsyncNameSysResolveRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pb::NameSysResolveResult>* NameSysResolveAsyncRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request) override;
    ::grpc::ClientAsyncReader< ::pb::NameSysResolveResult>* AsyncNameSysResolveAsyncRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::NameSysResolveResult>* PrepareAsyncNameSysResolveAsyncRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::Empty>* AsyncNameSysPublishRaw(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::Empty>* PrepareAsyncNameSysPublishRaw(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NameSysResolve_;
    const ::grpc::internal::RpcMethod rpcmethod_NameSysResolveAsync_;
    const ::grpc::internal::RpcMethod rpcmethod_NameSysPublish_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // NameSysResolve is used to resolve a name, waiting for the request to complete
    virtual ::grpc::Status NameSysResolve(::grpc::ServerContext* context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response);
    // NameSysResolveAsync is like Resolve, except instead of waiting for the request
    // to complete, we send back a stream which we will send the result on
    virtual ::grpc::Status NameSysResolveAsync(::grpc::ServerContext* context, const ::pb::NameSysResolveRequest* request, ::grpc::ServerWriter< ::pb::NameSysResolveResult>* writer);
    // NameSysPublish is used to publish an IPNS record, with/with-out an EOL
    virtual ::grpc::Status NameSysPublish(::grpc::ServerContext* context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NameSysResolve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NameSysResolve() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NameSysResolve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysResolve(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::pb::NameSysResolveResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNameSysResolve(::grpc::ServerContext* context, ::pb::NameSysResolveRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::NameSysResolveResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NameSysResolveAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NameSysResolveAsync() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NameSysResolveAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysResolveAsync(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::grpc::ServerWriter< ::pb::NameSysResolveResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNameSysResolveAsync(::grpc::ServerContext* context, ::pb::NameSysResolveRequest* request, ::grpc::ServerAsyncWriter< ::pb::NameSysResolveResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NameSysPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NameSysPublish() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NameSysPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysPublish(::grpc::ServerContext* /*context*/, const ::pb::NameSysPublishRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNameSysPublish(::grpc::ServerContext* context, ::pb::NameSysPublishRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NameSysResolve<WithAsyncMethod_NameSysResolveAsync<WithAsyncMethod_NameSysPublish<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NameSysResolve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NameSysResolve() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::NameSysResolveRequest, ::pb::NameSysResolveResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response) { return this->NameSysResolve(context, request, response); }));}
    void SetMessageAllocatorFor_NameSysResolve(
        ::grpc::experimental::MessageAllocator< ::pb::NameSysResolveRequest, ::pb::NameSysResolveResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::NameSysResolveRequest, ::pb::NameSysResolveResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NameSysResolve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysResolve(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::pb::NameSysResolveResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NameSysResolve(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::pb::NameSysResolveResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NameSysResolve(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::pb::NameSysResolveResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NameSysResolveAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NameSysResolveAsync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::pb::NameSysResolveRequest, ::pb::NameSysResolveResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::NameSysResolveRequest* request) { return this->NameSysResolveAsync(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_NameSysResolveAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysResolveAsync(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::grpc::ServerWriter< ::pb::NameSysResolveResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::pb::NameSysResolveResult>* NameSysResolveAsync(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::pb::NameSysResolveResult>* NameSysResolveAsync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NameSysPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NameSysPublish() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::NameSysPublishRequest, ::pb::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response) { return this->NameSysPublish(context, request, response); }));}
    void SetMessageAllocatorFor_NameSysPublish(
        ::grpc::experimental::MessageAllocator< ::pb::NameSysPublishRequest, ::pb::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::NameSysPublishRequest, ::pb::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NameSysPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysPublish(::grpc::ServerContext* /*context*/, const ::pb::NameSysPublishRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NameSysPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::NameSysPublishRequest* /*request*/, ::pb::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NameSysPublish(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::NameSysPublishRequest* /*request*/, ::pb::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_NameSysResolve<ExperimentalWithCallbackMethod_NameSysResolveAsync<ExperimentalWithCallbackMethod_NameSysPublish<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_NameSysResolve<ExperimentalWithCallbackMethod_NameSysResolveAsync<ExperimentalWithCallbackMethod_NameSysPublish<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NameSysResolve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NameSysResolve() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NameSysResolve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysResolve(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::pb::NameSysResolveResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NameSysResolveAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NameSysResolveAsync() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NameSysResolveAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysResolveAsync(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::grpc::ServerWriter< ::pb::NameSysResolveResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NameSysPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NameSysPublish() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NameSysPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysPublish(::grpc::ServerContext* /*context*/, const ::pb::NameSysPublishRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NameSysResolve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NameSysResolve() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NameSysResolve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysResolve(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::pb::NameSysResolveResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNameSysResolve(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NameSysResolveAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NameSysResolveAsync() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NameSysResolveAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysResolveAsync(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::grpc::ServerWriter< ::pb::NameSysResolveResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNameSysResolveAsync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NameSysPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NameSysPublish() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_NameSysPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysPublish(::grpc::ServerContext* /*context*/, const ::pb::NameSysPublishRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNameSysPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NameSysResolve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NameSysResolve() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NameSysResolve(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NameSysResolve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysResolve(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::pb::NameSysResolveResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NameSysResolve(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NameSysResolve(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NameSysResolveAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NameSysResolveAsync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->NameSysResolveAsync(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_NameSysResolveAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysResolveAsync(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::grpc::ServerWriter< ::pb::NameSysResolveResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* NameSysResolveAsync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* NameSysResolveAsync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NameSysPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NameSysPublish() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NameSysPublish(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NameSysPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NameSysPublish(::grpc::ServerContext* /*context*/, const ::pb::NameSysPublishRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NameSysPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NameSysPublish(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NameSysResolve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NameSysResolve() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::NameSysResolveRequest, ::pb::NameSysResolveResult>(std::bind(&WithStreamedUnaryMethod_NameSysResolve<BaseClass>::StreamedNameSysResolve, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NameSysResolve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NameSysResolve(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::pb::NameSysResolveResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNameSysResolve(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::NameSysResolveRequest,::pb::NameSysResolveResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NameSysPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NameSysPublish() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::NameSysPublishRequest, ::pb::Empty>(std::bind(&WithStreamedUnaryMethod_NameSysPublish<BaseClass>::StreamedNameSysPublish, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NameSysPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NameSysPublish(::grpc::ServerContext* /*context*/, const ::pb::NameSysPublishRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNameSysPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::NameSysPublishRequest,::pb::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NameSysResolve<WithStreamedUnaryMethod_NameSysPublish<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_NameSysResolveAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_NameSysResolveAsync() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::pb::NameSysResolveRequest, ::pb::NameSysResolveResult>(std::bind(&WithSplitStreamingMethod_NameSysResolveAsync<BaseClass>::StreamedNameSysResolveAsync, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_NameSysResolveAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NameSysResolveAsync(::grpc::ServerContext* /*context*/, const ::pb::NameSysResolveRequest* /*request*/, ::grpc::ServerWriter< ::pb::NameSysResolveResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedNameSysResolveAsync(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::NameSysResolveRequest,::pb::NameSysResolveResult>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_NameSysResolveAsync<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_NameSysResolve<WithSplitStreamingMethod_NameSysResolveAsync<WithStreamedUnaryMethod_NameSysPublish<Service > > > StreamedService;
};

}  // namespace pb


#endif  // GRPC_namesys_2eproto__INCLUDED
