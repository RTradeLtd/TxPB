// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: namesys.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_namesys_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_namesys_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "util.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_namesys_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_namesys_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_namesys_2eproto;
namespace pb {
class NameSysPublishRequest;
class NameSysPublishRequestDefaultTypeInternal;
extern NameSysPublishRequestDefaultTypeInternal _NameSysPublishRequest_default_instance_;
class NameSysResolveRequest;
class NameSysResolveRequestDefaultTypeInternal;
extern NameSysResolveRequestDefaultTypeInternal _NameSysResolveRequest_default_instance_;
class NameSysResolveResult;
class NameSysResolveResultDefaultTypeInternal;
extern NameSysResolveResultDefaultTypeInternal _NameSysResolveResult_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::NameSysPublishRequest* Arena::CreateMaybeMessage<::pb::NameSysPublishRequest>(Arena*);
template<> ::pb::NameSysResolveRequest* Arena::CreateMaybeMessage<::pb::NameSysResolveRequest>(Arena*);
template<> ::pb::NameSysResolveResult* Arena::CreateMaybeMessage<::pb::NameSysResolveResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class NameSysResolveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.NameSysResolveRequest) */ {
 public:
  NameSysResolveRequest();
  virtual ~NameSysResolveRequest();

  NameSysResolveRequest(const NameSysResolveRequest& from);
  NameSysResolveRequest(NameSysResolveRequest&& from) noexcept
    : NameSysResolveRequest() {
    *this = ::std::move(from);
  }

  inline NameSysResolveRequest& operator=(const NameSysResolveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameSysResolveRequest& operator=(NameSysResolveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameSysResolveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameSysResolveRequest* internal_default_instance() {
    return reinterpret_cast<const NameSysResolveRequest*>(
               &_NameSysResolveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NameSysResolveRequest& a, NameSysResolveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NameSysResolveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameSysResolveRequest* New() const final {
    return CreateMaybeMessage<NameSysResolveRequest>(nullptr);
  }

  NameSysResolveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameSysResolveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameSysResolveRequest& from);
  void MergeFrom(const NameSysResolveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameSysResolveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.NameSysResolveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_namesys_2eproto);
    return ::descriptor_table_namesys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDepthFieldNumber = 2,
    kDhtRecordCountFieldNumber = 3,
    kDhtTimeoutFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 depth = 2;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dhtRecordCount = 3;
  void clear_dhtrecordcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 dhtrecordcount() const;
  void set_dhtrecordcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dhtrecordcount() const;
  void _internal_set_dhtrecordcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 dhtTimeout = 4;
  void clear_dhttimeout();
  ::PROTOBUF_NAMESPACE_ID::int32 dhttimeout() const;
  void set_dhttimeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dhttimeout() const;
  void _internal_set_dhttimeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.NameSysResolveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 depth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dhtrecordcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 dhttimeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namesys_2eproto;
};
// -------------------------------------------------------------------

class NameSysResolveResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.NameSysResolveResult) */ {
 public:
  NameSysResolveResult();
  virtual ~NameSysResolveResult();

  NameSysResolveResult(const NameSysResolveResult& from);
  NameSysResolveResult(NameSysResolveResult&& from) noexcept
    : NameSysResolveResult() {
    *this = ::std::move(from);
  }

  inline NameSysResolveResult& operator=(const NameSysResolveResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameSysResolveResult& operator=(NameSysResolveResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameSysResolveResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameSysResolveResult* internal_default_instance() {
    return reinterpret_cast<const NameSysResolveResult*>(
               &_NameSysResolveResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NameSysResolveResult& a, NameSysResolveResult& b) {
    a.Swap(&b);
  }
  inline void Swap(NameSysResolveResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameSysResolveResult* New() const final {
    return CreateMaybeMessage<NameSysResolveResult>(nullptr);
  }

  NameSysResolveResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameSysResolveResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameSysResolveResult& from);
  void MergeFrom(const NameSysResolveResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameSysResolveResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.NameSysResolveResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_namesys_2eproto);
    return ::descriptor_table_namesys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:pb.NameSysResolveResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namesys_2eproto;
};
// -------------------------------------------------------------------

class NameSysPublishRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.NameSysPublishRequest) */ {
 public:
  NameSysPublishRequest();
  virtual ~NameSysPublishRequest();

  NameSysPublishRequest(const NameSysPublishRequest& from);
  NameSysPublishRequest(NameSysPublishRequest&& from) noexcept
    : NameSysPublishRequest() {
    *this = ::std::move(from);
  }

  inline NameSysPublishRequest& operator=(const NameSysPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameSysPublishRequest& operator=(NameSysPublishRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameSysPublishRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameSysPublishRequest* internal_default_instance() {
    return reinterpret_cast<const NameSysPublishRequest*>(
               &_NameSysPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NameSysPublishRequest& a, NameSysPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NameSysPublishRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameSysPublishRequest* New() const final {
    return CreateMaybeMessage<NameSysPublishRequest>(nullptr);
  }

  NameSysPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameSysPublishRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameSysPublishRequest& from);
  void MergeFrom(const NameSysPublishRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameSysPublishRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.NameSysPublishRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_namesys_2eproto);
    return ::descriptor_table_namesys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kEolFieldNumber = 3,
    kTtlFieldNumber = 4,
  };
  // bytes privateKey = 1;
  void clear_privatekey();
  const std::string& privatekey() const;
  void set_privatekey(const std::string& value);
  void set_privatekey(std::string&& value);
  void set_privatekey(const char* value);
  void set_privatekey(const void* value, size_t size);
  std::string* mutable_privatekey();
  std::string* release_privatekey();
  void set_allocated_privatekey(std::string* privatekey);
  private:
  const std::string& _internal_privatekey() const;
  void _internal_set_privatekey(const std::string& value);
  std::string* _internal_mutable_privatekey();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 eol = 3;
  void clear_eol();
  ::PROTOBUF_NAMESPACE_ID::int32 eol() const;
  void set_eol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eol() const;
  void _internal_set_eol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ttl = 4;
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::int32 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.NameSysPublishRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privatekey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 eol_;
  ::PROTOBUF_NAMESPACE_ID::int32 ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_namesys_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NameSysResolveRequest

// string name = 1;
inline void NameSysResolveRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NameSysResolveRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.NameSysResolveRequest.name)
  return _internal_name();
}
inline void NameSysResolveRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.NameSysResolveRequest.name)
}
inline std::string* NameSysResolveRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.NameSysResolveRequest.name)
  return _internal_mutable_name();
}
inline const std::string& NameSysResolveRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void NameSysResolveRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NameSysResolveRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.NameSysResolveRequest.name)
}
inline void NameSysResolveRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.NameSysResolveRequest.name)
}
inline void NameSysResolveRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.NameSysResolveRequest.name)
}
inline std::string* NameSysResolveRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NameSysResolveRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.NameSysResolveRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NameSysResolveRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.NameSysResolveRequest.name)
}

// uint32 depth = 2;
inline void NameSysResolveRequest::clear_depth() {
  depth_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NameSysResolveRequest::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NameSysResolveRequest::depth() const {
  // @@protoc_insertion_point(field_get:pb.NameSysResolveRequest.depth)
  return _internal_depth();
}
inline void NameSysResolveRequest::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  depth_ = value;
}
inline void NameSysResolveRequest::set_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:pb.NameSysResolveRequest.depth)
}

// uint32 dhtRecordCount = 3;
inline void NameSysResolveRequest::clear_dhtrecordcount() {
  dhtrecordcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NameSysResolveRequest::_internal_dhtrecordcount() const {
  return dhtrecordcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NameSysResolveRequest::dhtrecordcount() const {
  // @@protoc_insertion_point(field_get:pb.NameSysResolveRequest.dhtRecordCount)
  return _internal_dhtrecordcount();
}
inline void NameSysResolveRequest::_internal_set_dhtrecordcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dhtrecordcount_ = value;
}
inline void NameSysResolveRequest::set_dhtrecordcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dhtrecordcount(value);
  // @@protoc_insertion_point(field_set:pb.NameSysResolveRequest.dhtRecordCount)
}

// int32 dhtTimeout = 4;
inline void NameSysResolveRequest::clear_dhttimeout() {
  dhttimeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NameSysResolveRequest::_internal_dhttimeout() const {
  return dhttimeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NameSysResolveRequest::dhttimeout() const {
  // @@protoc_insertion_point(field_get:pb.NameSysResolveRequest.dhtTimeout)
  return _internal_dhttimeout();
}
inline void NameSysResolveRequest::_internal_set_dhttimeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dhttimeout_ = value;
}
inline void NameSysResolveRequest::set_dhttimeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dhttimeout(value);
  // @@protoc_insertion_point(field_set:pb.NameSysResolveRequest.dhtTimeout)
}

// -------------------------------------------------------------------

// NameSysResolveResult

// string path = 1;
inline void NameSysResolveResult::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NameSysResolveResult::path() const {
  // @@protoc_insertion_point(field_get:pb.NameSysResolveResult.path)
  return _internal_path();
}
inline void NameSysResolveResult::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:pb.NameSysResolveResult.path)
}
inline std::string* NameSysResolveResult::mutable_path() {
  // @@protoc_insertion_point(field_mutable:pb.NameSysResolveResult.path)
  return _internal_mutable_path();
}
inline const std::string& NameSysResolveResult::_internal_path() const {
  return path_.GetNoArena();
}
inline void NameSysResolveResult::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NameSysResolveResult::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.NameSysResolveResult.path)
}
inline void NameSysResolveResult::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.NameSysResolveResult.path)
}
inline void NameSysResolveResult::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.NameSysResolveResult.path)
}
inline std::string* NameSysResolveResult::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NameSysResolveResult::release_path() {
  // @@protoc_insertion_point(field_release:pb.NameSysResolveResult.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NameSysResolveResult::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:pb.NameSysResolveResult.path)
}

// string error = 2;
inline void NameSysResolveResult::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NameSysResolveResult::error() const {
  // @@protoc_insertion_point(field_get:pb.NameSysResolveResult.error)
  return _internal_error();
}
inline void NameSysResolveResult::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:pb.NameSysResolveResult.error)
}
inline std::string* NameSysResolveResult::mutable_error() {
  // @@protoc_insertion_point(field_mutable:pb.NameSysResolveResult.error)
  return _internal_mutable_error();
}
inline const std::string& NameSysResolveResult::_internal_error() const {
  return error_.GetNoArena();
}
inline void NameSysResolveResult::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NameSysResolveResult::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.NameSysResolveResult.error)
}
inline void NameSysResolveResult::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.NameSysResolveResult.error)
}
inline void NameSysResolveResult::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.NameSysResolveResult.error)
}
inline std::string* NameSysResolveResult::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NameSysResolveResult::release_error() {
  // @@protoc_insertion_point(field_release:pb.NameSysResolveResult.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NameSysResolveResult::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:pb.NameSysResolveResult.error)
}

// -------------------------------------------------------------------

// NameSysPublishRequest

// bytes privateKey = 1;
inline void NameSysPublishRequest::clear_privatekey() {
  privatekey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NameSysPublishRequest::privatekey() const {
  // @@protoc_insertion_point(field_get:pb.NameSysPublishRequest.privateKey)
  return _internal_privatekey();
}
inline void NameSysPublishRequest::set_privatekey(const std::string& value) {
  _internal_set_privatekey(value);
  // @@protoc_insertion_point(field_set:pb.NameSysPublishRequest.privateKey)
}
inline std::string* NameSysPublishRequest::mutable_privatekey() {
  // @@protoc_insertion_point(field_mutable:pb.NameSysPublishRequest.privateKey)
  return _internal_mutable_privatekey();
}
inline const std::string& NameSysPublishRequest::_internal_privatekey() const {
  return privatekey_.GetNoArena();
}
inline void NameSysPublishRequest::_internal_set_privatekey(const std::string& value) {
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NameSysPublishRequest::set_privatekey(std::string&& value) {
  
  privatekey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.NameSysPublishRequest.privateKey)
}
inline void NameSysPublishRequest::set_privatekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.NameSysPublishRequest.privateKey)
}
inline void NameSysPublishRequest::set_privatekey(const void* value, size_t size) {
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.NameSysPublishRequest.privateKey)
}
inline std::string* NameSysPublishRequest::_internal_mutable_privatekey() {
  
  return privatekey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NameSysPublishRequest::release_privatekey() {
  // @@protoc_insertion_point(field_release:pb.NameSysPublishRequest.privateKey)
  
  return privatekey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NameSysPublishRequest::set_allocated_privatekey(std::string* privatekey) {
  if (privatekey != nullptr) {
    
  } else {
    
  }
  privatekey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), privatekey);
  // @@protoc_insertion_point(field_set_allocated:pb.NameSysPublishRequest.privateKey)
}

// string value = 2;
inline void NameSysPublishRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NameSysPublishRequest::value() const {
  // @@protoc_insertion_point(field_get:pb.NameSysPublishRequest.value)
  return _internal_value();
}
inline void NameSysPublishRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pb.NameSysPublishRequest.value)
}
inline std::string* NameSysPublishRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:pb.NameSysPublishRequest.value)
  return _internal_mutable_value();
}
inline const std::string& NameSysPublishRequest::_internal_value() const {
  return value_.GetNoArena();
}
inline void NameSysPublishRequest::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NameSysPublishRequest::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.NameSysPublishRequest.value)
}
inline void NameSysPublishRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.NameSysPublishRequest.value)
}
inline void NameSysPublishRequest::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.NameSysPublishRequest.value)
}
inline std::string* NameSysPublishRequest::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NameSysPublishRequest::release_value() {
  // @@protoc_insertion_point(field_release:pb.NameSysPublishRequest.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NameSysPublishRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pb.NameSysPublishRequest.value)
}

// int32 eol = 3;
inline void NameSysPublishRequest::clear_eol() {
  eol_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NameSysPublishRequest::_internal_eol() const {
  return eol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NameSysPublishRequest::eol() const {
  // @@protoc_insertion_point(field_get:pb.NameSysPublishRequest.eol)
  return _internal_eol();
}
inline void NameSysPublishRequest::_internal_set_eol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eol_ = value;
}
inline void NameSysPublishRequest::set_eol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eol(value);
  // @@protoc_insertion_point(field_set:pb.NameSysPublishRequest.eol)
}

// int32 ttl = 4;
inline void NameSysPublishRequest::clear_ttl() {
  ttl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NameSysPublishRequest::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NameSysPublishRequest::ttl() const {
  // @@protoc_insertion_point(field_get:pb.NameSysPublishRequest.ttl)
  return _internal_ttl();
}
inline void NameSysPublishRequest::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ttl_ = value;
}
inline void NameSysPublishRequest::set_ttl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:pb.NameSysPublishRequest.ttl)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_namesys_2eproto
