// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: namesys.proto

#include "namesys.pb.h"
#include "namesys.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pb {

static const char* NameSysAPI_method_names[] = {
  "/pb.NameSysAPI/NameSysResolve",
  "/pb.NameSysAPI/NameSysResolveAsync",
  "/pb.NameSysAPI/NameSysPublish",
};

std::unique_ptr< NameSysAPI::Stub> NameSysAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NameSysAPI::Stub> stub(new NameSysAPI::Stub(channel));
  return stub;
}

NameSysAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_NameSysResolve_(NameSysAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NameSysResolveAsync_(NameSysAPI_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_NameSysPublish_(NameSysAPI_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NameSysAPI::Stub::NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::pb::NameSysResolveResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NameSysResolve_, context, request, response);
}

void NameSysAPI::Stub::experimental_async::NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NameSysResolve_, context, request, response, std::move(f));
}

void NameSysAPI::Stub::experimental_async::NameSysResolve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::NameSysResolveResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NameSysResolve_, context, request, response, std::move(f));
}

void NameSysAPI::Stub::experimental_async::NameSysResolve(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NameSysResolve_, context, request, response, reactor);
}

void NameSysAPI::Stub::experimental_async::NameSysResolve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::NameSysResolveResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NameSysResolve_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::NameSysResolveResult>* NameSysAPI::Stub::AsyncNameSysResolveRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::NameSysResolveResult>::Create(channel_.get(), cq, rpcmethod_NameSysResolve_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::NameSysResolveResult>* NameSysAPI::Stub::PrepareAsyncNameSysResolveRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::NameSysResolveResult>::Create(channel_.get(), cq, rpcmethod_NameSysResolve_, context, request, false);
}

::grpc::ClientReader< ::pb::NameSysResolveResult>* NameSysAPI::Stub::NameSysResolveAsyncRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::pb::NameSysResolveResult>::Create(channel_.get(), rpcmethod_NameSysResolveAsync_, context, request);
}

void NameSysAPI::Stub::experimental_async::NameSysResolveAsync(::grpc::ClientContext* context, ::pb::NameSysResolveRequest* request, ::grpc::experimental::ClientReadReactor< ::pb::NameSysResolveResult>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::pb::NameSysResolveResult>::Create(stub_->channel_.get(), stub_->rpcmethod_NameSysResolveAsync_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::pb::NameSysResolveResult>* NameSysAPI::Stub::AsyncNameSysResolveAsyncRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::pb::NameSysResolveResult>::Create(channel_.get(), cq, rpcmethod_NameSysResolveAsync_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::pb::NameSysResolveResult>* NameSysAPI::Stub::PrepareAsyncNameSysResolveAsyncRaw(::grpc::ClientContext* context, const ::pb::NameSysResolveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::pb::NameSysResolveResult>::Create(channel_.get(), cq, rpcmethod_NameSysResolveAsync_, context, request, false, nullptr);
}

::grpc::Status NameSysAPI::Stub::NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::pb::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NameSysPublish_, context, request, response);
}

void NameSysAPI::Stub::experimental_async::NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NameSysPublish_, context, request, response, std::move(f));
}

void NameSysAPI::Stub::experimental_async::NameSysPublish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NameSysPublish_, context, request, response, std::move(f));
}

void NameSysAPI::Stub::experimental_async::NameSysPublish(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NameSysPublish_, context, request, response, reactor);
}

void NameSysAPI::Stub::experimental_async::NameSysPublish(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NameSysPublish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::Empty>* NameSysAPI::Stub::AsyncNameSysPublishRaw(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::Empty>::Create(channel_.get(), cq, rpcmethod_NameSysPublish_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::Empty>* NameSysAPI::Stub::PrepareAsyncNameSysPublishRaw(::grpc::ClientContext* context, const ::pb::NameSysPublishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::Empty>::Create(channel_.get(), cq, rpcmethod_NameSysPublish_, context, request, false);
}

NameSysAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameSysAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameSysAPI::Service, ::pb::NameSysResolveRequest, ::pb::NameSysResolveResult>(
          std::mem_fn(&NameSysAPI::Service::NameSysResolve), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameSysAPI_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NameSysAPI::Service, ::pb::NameSysResolveRequest, ::pb::NameSysResolveResult>(
          std::mem_fn(&NameSysAPI::Service::NameSysResolveAsync), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameSysAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameSysAPI::Service, ::pb::NameSysPublishRequest, ::pb::Empty>(
          std::mem_fn(&NameSysAPI::Service::NameSysPublish), this)));
}

NameSysAPI::Service::~Service() {
}

::grpc::Status NameSysAPI::Service::NameSysResolve(::grpc::ServerContext* context, const ::pb::NameSysResolveRequest* request, ::pb::NameSysResolveResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameSysAPI::Service::NameSysResolveAsync(::grpc::ServerContext* context, const ::pb::NameSysResolveRequest* request, ::grpc::ServerWriter< ::pb::NameSysResolveResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameSysAPI::Service::NameSysPublish(::grpc::ServerContext* context, const ::pb::NameSysPublishRequest* request, ::pb::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb

