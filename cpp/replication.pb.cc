// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replication.proto

#include "replication.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_replication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddrInfo_replication_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerSource_replication_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Subscription_replication_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_replication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionUpdate_replication_2eproto;
namespace pb {
class ReplicationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Replication> _instance;
} _Replication_default_instance_;
class ServerSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerSource> _instance;
} _ServerSource_default_instance_;
class AddrInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddrInfo> _instance;
} _AddrInfo_default_instance_;
class SubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Subscription> _instance;
} _Subscription_default_instance_;
class ReplicationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicationStatus> _instance;
} _ReplicationStatus_default_instance_;
class SubscriptionUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionUpdate> _instance;
} _SubscriptionUpdate_default_instance_;
class SignedSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignedSubscription> _instance;
} _SignedSubscription_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_AddrInfo_replication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_AddrInfo_default_instance_;
    new (ptr) ::pb::AddrInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::AddrInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddrInfo_replication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddrInfo_replication_2eproto}, {}};

static void InitDefaultsscc_info_Replication_replication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Replication_default_instance_;
    new (ptr) ::pb::Replication();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Replication::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Replication_replication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Replication_replication_2eproto}, {
      &scc_info_ServerSource_replication_2eproto.base,}};

static void InitDefaultsscc_info_ReplicationStatus_replication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ReplicationStatus_default_instance_;
    new (ptr) ::pb::ReplicationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ReplicationStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicationStatus_replication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplicationStatus_replication_2eproto}, {}};

static void InitDefaultsscc_info_ServerSource_replication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ServerSource_default_instance_;
    new (ptr) ::pb::ServerSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ServerSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerSource_replication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerSource_replication_2eproto}, {
      &scc_info_AddrInfo_replication_2eproto.base,}};

static void InitDefaultsscc_info_SignedSubscription_replication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SignedSubscription_default_instance_;
    new (ptr) ::pb::SignedSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SignedSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignedSubscription_replication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SignedSubscription_replication_2eproto}, {
      &scc_info_Subscription_replication_2eproto.base,
      &scc_info_SubscriptionUpdate_replication_2eproto.base,}};

static void InitDefaultsscc_info_Subscription_replication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Subscription_default_instance_;
    new (ptr) ::pb::Subscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Subscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Subscription_replication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Subscription_replication_2eproto}, {}};

static void InitDefaultsscc_info_SubscriptionUpdate_replication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SubscriptionUpdate_default_instance_;
    new (ptr) ::pb::SubscriptionUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SubscriptionUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionUpdate_replication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscriptionUpdate_replication_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_replication_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_replication_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_replication_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_replication_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Replication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Replication, header_),
  PROTOBUF_FIELD_OFFSET(::pb::Replication, cids_bytes_),
  PROTOBUF_FIELD_OFFSET(::pb::Replication, servers_),
  PROTOBUF_FIELD_OFFSET(::pb::Replication, replication_factor_),
  PROTOBUF_FIELD_OFFSET(::pb::Replication, refresh_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::pb::Replication, server_down_delay_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ServerSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ServerSource, addr_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::AddrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::AddrInfo, id_bytes_),
  PROTOBUF_FIELD_OFFSET(::pb::AddrInfo, addrs_bytes_),
  PROTOBUF_FIELD_OFFSET(::pb::AddrInfo, grpc_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Subscription, topic_),
  PROTOBUF_FIELD_OFFSET(::pb::Subscription, author_id_bytes_),
  PROTOBUF_FIELD_OFFSET(::pb::Subscription, remove_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ReplicationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ReplicationStatus, ok_),
  PROTOBUF_FIELD_OFFSET(::pb::ReplicationStatus, is_active_),
  PROTOBUF_FIELD_OFFSET(::pb::ReplicationStatus, current_version_),
  PROTOBUF_FIELD_OFFSET(::pb::ReplicationStatus, target_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SubscriptionUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SubscriptionUpdate, version_),
  PROTOBUF_FIELD_OFFSET(::pb::SubscriptionUpdate, replication_bytes_),
  PROTOBUF_FIELD_OFFSET(::pb::SubscriptionUpdate, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SignedSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SignedSubscription, sub_part_),
  PROTOBUF_FIELD_OFFSET(::pb::SignedSubscription, update_part_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::Replication)},
  { 11, -1, sizeof(::pb::ServerSource)},
  { 17, -1, sizeof(::pb::AddrInfo)},
  { 25, -1, sizeof(::pb::Subscription)},
  { 33, -1, sizeof(::pb::ReplicationStatus)},
  { 42, -1, sizeof(::pb::SubscriptionUpdate)},
  { 50, -1, sizeof(::pb::SignedSubscription)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Replication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ServerSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_AddrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Subscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ReplicationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SubscriptionUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SignedSubscription_default_instance_),
};

const char descriptor_table_protodef_replication_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021replication.proto\022\002pb\"\265\001\n\013Replication\022"
  "\016\n\006header\030\001 \001(\t\022\022\n\ncids_bytes\030\002 \003(\014\022!\n\007s"
  "ervers\030\003 \003(\0132\020.pb.ServerSource\022\032\n\022replic"
  "ation_factor\030\004 \001(\005\022 \n\030refresh_interval_s"
  "econds\030\005 \001(\005\022!\n\031server_down_delay_second"
  "s\030\006 \001(\005\"/\n\014ServerSource\022\037\n\taddr_info\030\001 \001"
  "(\0132\014.pb.AddrInfo\"D\n\010AddrInfo\022\020\n\010id_bytes"
  "\030\001 \001(\014\022\023\n\013addrs_bytes\030\002 \003(\014\022\021\n\tgrpc_port"
  "\030\003 \001(\005\"F\n\014Subscription\022\r\n\005topic\030\001 \001(\t\022\027\n"
  "\017author_id_bytes\030\002 \001(\014\022\016\n\006remove\030\003 \001(\010\"c"
  "\n\021ReplicationStatus\022\n\n\002ok\030\001 \001(\010\022\021\n\tis_ac"
  "tive\030\002 \001(\010\022\027\n\017current_version\030\003 \001(\003\022\026\n\016t"
  "arget_version\030\004 \001(\003\"S\n\022SubscriptionUpdat"
  "e\022\017\n\007version\030\001 \001(\003\022\031\n\021replication_bytes\030"
  "\002 \001(\014\022\021\n\tsignature\030\003 \001(\014\"e\n\022SignedSubscr"
  "iption\022\"\n\010sub_part\030\001 \001(\0132\020.pb.Subscripti"
  "on\022+\n\013update_part\030\002 \001(\0132\026.pb.Subscriptio"
  "nUpdate2\374\001\n\nreplicator\0220\n\003Add\022\020.pb.Subsc"
  "ription\032\025.pb.ReplicationStatus0\001\0223\n\006Stat"
  "us\022\020.pb.Subscription\032\025.pb.ReplicationSta"
  "tus0\001\022A\n\025GetSubscriptionUpdate\022\020.pb.Subs"
  "cription\032\026.pb.SubscriptionUpdate\022D\n\021Subm"
  "itReplication\022\026.pb.SignedSubscription\032\025."
  "pb.ReplicationStatus0\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_replication_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_replication_2eproto_sccs[7] = {
  &scc_info_AddrInfo_replication_2eproto.base,
  &scc_info_Replication_replication_2eproto.base,
  &scc_info_ReplicationStatus_replication_2eproto.base,
  &scc_info_ServerSource_replication_2eproto.base,
  &scc_info_SignedSubscription_replication_2eproto.base,
  &scc_info_Subscription_replication_2eproto.base,
  &scc_info_SubscriptionUpdate_replication_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_replication_2eproto_once;
static bool descriptor_table_replication_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_replication_2eproto = {
  &descriptor_table_replication_2eproto_initialized, descriptor_table_protodef_replication_2eproto, "replication.proto", 950,
  &descriptor_table_replication_2eproto_once, descriptor_table_replication_2eproto_sccs, descriptor_table_replication_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_replication_2eproto::offsets,
  file_level_metadata_replication_2eproto, 7, file_level_enum_descriptors_replication_2eproto, file_level_service_descriptors_replication_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_replication_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_replication_2eproto), true);
namespace pb {

// ===================================================================

void Replication::InitAsDefaultInstance() {
}
class Replication::_Internal {
 public:
};

Replication::Replication()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Replication)
}
Replication::Replication(const Replication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cids_bytes_(from.cids_bytes_),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_header().empty()) {
    header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  ::memcpy(&replication_factor_, &from.replication_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_down_delay_seconds_) -
    reinterpret_cast<char*>(&replication_factor_)) + sizeof(server_down_delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:pb.Replication)
}

void Replication::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Replication_replication_2eproto.base);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&replication_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_down_delay_seconds_) -
      reinterpret_cast<char*>(&replication_factor_)) + sizeof(server_down_delay_seconds_));
}

Replication::~Replication() {
  // @@protoc_insertion_point(destructor:pb.Replication)
  SharedDtor();
}

void Replication::SharedDtor() {
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Replication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Replication& Replication::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Replication_replication_2eproto.base);
  return *internal_default_instance();
}


void Replication::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Replication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cids_bytes_.Clear();
  servers_.Clear();
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&replication_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_down_delay_seconds_) -
      reinterpret_cast<char*>(&replication_factor_)) + sizeof(server_down_delay_seconds_));
  _internal_metadata_.Clear();
}

const char* Replication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Replication.header"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes cids_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cids_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.ServerSource servers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 replication_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          replication_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 refresh_interval_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          refresh_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_down_delay_seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          server_down_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Replication::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Replication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string header = 1;
  if (this->header().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Replication.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // repeated bytes cids_bytes = 2;
  for (int i = 0, n = this->_internal_cids_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_cids_bytes(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated .pb.ServerSource servers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_servers(i), target, stream);
  }

  // int32 replication_factor = 4;
  if (this->replication_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_replication_factor(), target);
  }

  // int32 refresh_interval_seconds = 5;
  if (this->refresh_interval_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_refresh_interval_seconds(), target);
  }

  // int32 server_down_delay_seconds = 6;
  if (this->server_down_delay_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_server_down_delay_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Replication)
  return target;
}

size_t Replication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Replication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes cids_bytes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cids_bytes_.size());
  for (int i = 0, n = cids_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      cids_bytes_.Get(i));
  }

  // repeated .pb.ServerSource servers = 3;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string header = 1;
  if (this->header().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());
  }

  // int32 replication_factor = 4;
  if (this->replication_factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_replication_factor());
  }

  // int32 refresh_interval_seconds = 5;
  if (this->refresh_interval_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refresh_interval_seconds());
  }

  // int32 server_down_delay_seconds = 6;
  if (this->server_down_delay_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_down_delay_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Replication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Replication)
  GOOGLE_DCHECK_NE(&from, this);
  const Replication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Replication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Replication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Replication)
    MergeFrom(*source);
  }
}

void Replication::MergeFrom(const Replication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Replication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cids_bytes_.MergeFrom(from.cids_bytes_);
  servers_.MergeFrom(from.servers_);
  if (from.header().size() > 0) {

    header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  if (from.replication_factor() != 0) {
    _internal_set_replication_factor(from._internal_replication_factor());
  }
  if (from.refresh_interval_seconds() != 0) {
    _internal_set_refresh_interval_seconds(from._internal_refresh_interval_seconds());
  }
  if (from.server_down_delay_seconds() != 0) {
    _internal_set_server_down_delay_seconds(from._internal_server_down_delay_seconds());
  }
}

void Replication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Replication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replication::CopyFrom(const Replication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Replication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replication::IsInitialized() const {
  return true;
}

void Replication::InternalSwap(Replication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cids_bytes_.InternalSwap(&other->cids_bytes_);
  servers_.InternalSwap(&other->servers_);
  header_.Swap(&other->header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(replication_factor_, other->replication_factor_);
  swap(refresh_interval_seconds_, other->refresh_interval_seconds_);
  swap(server_down_delay_seconds_, other->server_down_delay_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Replication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerSource::InitAsDefaultInstance() {
  ::pb::_ServerSource_default_instance_._instance.get_mutable()->addr_info_ = const_cast< ::pb::AddrInfo*>(
      ::pb::AddrInfo::internal_default_instance());
}
class ServerSource::_Internal {
 public:
  static const ::pb::AddrInfo& addr_info(const ServerSource* msg);
};

const ::pb::AddrInfo&
ServerSource::_Internal::addr_info(const ServerSource* msg) {
  return *msg->addr_info_;
}
ServerSource::ServerSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ServerSource)
}
ServerSource::ServerSource(const ServerSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_addr_info()) {
    addr_info_ = new ::pb::AddrInfo(*from.addr_info_);
  } else {
    addr_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.ServerSource)
}

void ServerSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerSource_replication_2eproto.base);
  addr_info_ = nullptr;
}

ServerSource::~ServerSource() {
  // @@protoc_insertion_point(destructor:pb.ServerSource)
  SharedDtor();
}

void ServerSource::SharedDtor() {
  if (this != internal_default_instance()) delete addr_info_;
}

void ServerSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerSource& ServerSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerSource_replication_2eproto.base);
  return *internal_default_instance();
}


void ServerSource::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ServerSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && addr_info_ != nullptr) {
    delete addr_info_;
  }
  addr_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ServerSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.AddrInfo addr_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_addr_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ServerSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.AddrInfo addr_info = 1;
  if (this->has_addr_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::addr_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ServerSource)
  return target;
}

size_t ServerSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ServerSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.AddrInfo addr_info = 1;
  if (this->has_addr_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *addr_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ServerSource)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ServerSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ServerSource)
    MergeFrom(*source);
  }
}

void ServerSource::MergeFrom(const ServerSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ServerSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_addr_info()) {
    _internal_mutable_addr_info()->::pb::AddrInfo::MergeFrom(from._internal_addr_info());
  }
}

void ServerSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ServerSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSource::CopyFrom(const ServerSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ServerSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSource::IsInitialized() const {
  return true;
}

void ServerSource::InternalSwap(ServerSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(addr_info_, other->addr_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddrInfo::InitAsDefaultInstance() {
}
class AddrInfo::_Internal {
 public:
};

AddrInfo::AddrInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AddrInfo)
}
AddrInfo::AddrInfo(const AddrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addrs_bytes_(from.addrs_bytes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id_bytes().empty()) {
    id_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_bytes_);
  }
  grpc_port_ = from.grpc_port_;
  // @@protoc_insertion_point(copy_constructor:pb.AddrInfo)
}

void AddrInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddrInfo_replication_2eproto.base);
  id_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grpc_port_ = 0;
}

AddrInfo::~AddrInfo() {
  // @@protoc_insertion_point(destructor:pb.AddrInfo)
  SharedDtor();
}

void AddrInfo::SharedDtor() {
  id_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddrInfo& AddrInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddrInfo_replication_2eproto.base);
  return *internal_default_instance();
}


void AddrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.AddrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addrs_bytes_.Clear();
  id_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grpc_port_ = 0;
  _internal_metadata_.Clear();
}

const char* AddrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes addrs_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addrs_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 grpc_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grpc_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddrInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AddrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id_bytes = 1;
  if (this->id_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id_bytes(), target);
  }

  // repeated bytes addrs_bytes = 2;
  for (int i = 0, n = this->_internal_addrs_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_addrs_bytes(i);
    target = stream->WriteBytes(2, s, target);
  }

  // int32 grpc_port = 3;
  if (this->grpc_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_grpc_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AddrInfo)
  return target;
}

size_t AddrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.AddrInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes addrs_bytes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addrs_bytes_.size());
  for (int i = 0, n = addrs_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      addrs_bytes_.Get(i));
  }

  // bytes id_bytes = 1;
  if (this->id_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id_bytes());
  }

  // int32 grpc_port = 3;
  if (this->grpc_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpc_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddrInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.AddrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AddrInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddrInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.AddrInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.AddrInfo)
    MergeFrom(*source);
  }
}

void AddrInfo::MergeFrom(const AddrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.AddrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrs_bytes_.MergeFrom(from.addrs_bytes_);
  if (from.id_bytes().size() > 0) {

    id_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_bytes_);
  }
  if (from.grpc_port() != 0) {
    _internal_set_grpc_port(from._internal_grpc_port());
  }
}

void AddrInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.AddrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddrInfo::CopyFrom(const AddrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.AddrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddrInfo::IsInitialized() const {
  return true;
}

void AddrInfo::InternalSwap(AddrInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addrs_bytes_.InternalSwap(&other->addrs_bytes_);
  id_bytes_.Swap(&other->id_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(grpc_port_, other->grpc_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddrInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Subscription::InitAsDefaultInstance() {
}
class Subscription::_Internal {
 public:
};

Subscription::Subscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  author_id_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_author_id_bytes().empty()) {
    author_id_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.author_id_bytes_);
  }
  remove_ = from.remove_;
  // @@protoc_insertion_point(copy_constructor:pb.Subscription)
}

void Subscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Subscription_replication_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_id_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remove_ = false;
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:pb.Subscription)
  SharedDtor();
}

void Subscription::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_id_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Subscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Subscription& Subscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Subscription_replication_2eproto.base);
  return *internal_default_instance();
}


void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Subscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_id_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remove_ = false;
  _internal_metadata_.Clear();
}

const char* Subscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Subscription.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes author_id_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_author_id_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool remove = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Subscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Subscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Subscription.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // bytes author_id_bytes = 2;
  if (this->author_id_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_author_id_bytes(), target);
  }

  // bool remove = 3;
  if (this->remove() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_remove(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Subscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // bytes author_id_bytes = 2;
  if (this->author_id_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_author_id_bytes());
  }

  // bool remove = 3;
  if (this->remove() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  const Subscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Subscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Subscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Subscription)
    MergeFrom(*source);
  }
}

void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.author_id_bytes().size() > 0) {

    author_id_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.author_id_bytes_);
  }
  if (from.remove() != 0) {
    _internal_set_remove(from._internal_remove());
  }
}

void Subscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  return true;
}

void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  author_id_bytes_.Swap(&other->author_id_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(remove_, other->remove_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Subscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicationStatus::InitAsDefaultInstance() {
}
class ReplicationStatus::_Internal {
 public:
};

ReplicationStatus::ReplicationStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReplicationStatus)
}
ReplicationStatus::ReplicationStatus(const ReplicationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_version_, &from.current_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&current_version_)) + sizeof(is_active_));
  // @@protoc_insertion_point(copy_constructor:pb.ReplicationStatus)
}

void ReplicationStatus::SharedCtor() {
  ::memset(&current_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&current_version_)) + sizeof(is_active_));
}

ReplicationStatus::~ReplicationStatus() {
  // @@protoc_insertion_point(destructor:pb.ReplicationStatus)
  SharedDtor();
}

void ReplicationStatus::SharedDtor() {
}

void ReplicationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicationStatus& ReplicationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicationStatus_replication_2eproto.base);
  return *internal_default_instance();
}


void ReplicationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReplicationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&current_version_)) + sizeof(is_active_));
  _internal_metadata_.Clear();
}

const char* ReplicationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 current_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          target_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReplicationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // bool is_active = 2;
  if (this->is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_active(), target);
  }

  // int64 current_version = 3;
  if (this->current_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_current_version(), target);
  }

  // int64 target_version = 4;
  if (this->target_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_target_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ReplicationStatus)
  return target;
}

size_t ReplicationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReplicationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 current_version = 3;
  if (this->current_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_current_version());
  }

  // int64 target_version = 4;
  if (this->target_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_version());
  }

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_active = 2;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReplicationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReplicationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReplicationStatus)
    MergeFrom(*source);
  }
}

void ReplicationStatus::MergeFrom(const ReplicationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReplicationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.current_version() != 0) {
    _internal_set_current_version(from._internal_current_version());
  }
  if (from.target_version() != 0) {
    _internal_set_target_version(from._internal_target_version());
  }
  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  if (from.is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
}

void ReplicationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReplicationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicationStatus::CopyFrom(const ReplicationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReplicationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationStatus::IsInitialized() const {
  return true;
}

void ReplicationStatus::InternalSwap(ReplicationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(current_version_, other->current_version_);
  swap(target_version_, other->target_version_);
  swap(ok_, other->ok_);
  swap(is_active_, other->is_active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriptionUpdate::InitAsDefaultInstance() {
}
class SubscriptionUpdate::_Internal {
 public:
};

SubscriptionUpdate::SubscriptionUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SubscriptionUpdate)
}
SubscriptionUpdate::SubscriptionUpdate(const SubscriptionUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replication_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_replication_bytes().empty()) {
    replication_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.replication_bytes_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:pb.SubscriptionUpdate)
}

void SubscriptionUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriptionUpdate_replication_2eproto.base);
  replication_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = PROTOBUF_LONGLONG(0);
}

SubscriptionUpdate::~SubscriptionUpdate() {
  // @@protoc_insertion_point(destructor:pb.SubscriptionUpdate)
  SharedDtor();
}

void SubscriptionUpdate::SharedDtor() {
  replication_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscriptionUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionUpdate& SubscriptionUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionUpdate_replication_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SubscriptionUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replication_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SubscriptionUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes replication_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_replication_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SubscriptionUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_version(), target);
  }

  // bytes replication_bytes = 2;
  if (this->replication_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_replication_bytes(), target);
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SubscriptionUpdate)
  return target;
}

size_t SubscriptionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SubscriptionUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes replication_bytes = 2;
  if (this->replication_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_replication_bytes());
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // int64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SubscriptionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SubscriptionUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SubscriptionUpdate)
    MergeFrom(*source);
  }
}

void SubscriptionUpdate::MergeFrom(const SubscriptionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SubscriptionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.replication_bytes().size() > 0) {

    replication_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.replication_bytes_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void SubscriptionUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SubscriptionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionUpdate::CopyFrom(const SubscriptionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SubscriptionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionUpdate::IsInitialized() const {
  return true;
}

void SubscriptionUpdate::InternalSwap(SubscriptionUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  replication_bytes_.Swap(&other->replication_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignedSubscription::InitAsDefaultInstance() {
  ::pb::_SignedSubscription_default_instance_._instance.get_mutable()->sub_part_ = const_cast< ::pb::Subscription*>(
      ::pb::Subscription::internal_default_instance());
  ::pb::_SignedSubscription_default_instance_._instance.get_mutable()->update_part_ = const_cast< ::pb::SubscriptionUpdate*>(
      ::pb::SubscriptionUpdate::internal_default_instance());
}
class SignedSubscription::_Internal {
 public:
  static const ::pb::Subscription& sub_part(const SignedSubscription* msg);
  static const ::pb::SubscriptionUpdate& update_part(const SignedSubscription* msg);
};

const ::pb::Subscription&
SignedSubscription::_Internal::sub_part(const SignedSubscription* msg) {
  return *msg->sub_part_;
}
const ::pb::SubscriptionUpdate&
SignedSubscription::_Internal::update_part(const SignedSubscription* msg) {
  return *msg->update_part_;
}
SignedSubscription::SignedSubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SignedSubscription)
}
SignedSubscription::SignedSubscription(const SignedSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sub_part()) {
    sub_part_ = new ::pb::Subscription(*from.sub_part_);
  } else {
    sub_part_ = nullptr;
  }
  if (from._internal_has_update_part()) {
    update_part_ = new ::pb::SubscriptionUpdate(*from.update_part_);
  } else {
    update_part_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.SignedSubscription)
}

void SignedSubscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignedSubscription_replication_2eproto.base);
  ::memset(&sub_part_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_part_) -
      reinterpret_cast<char*>(&sub_part_)) + sizeof(update_part_));
}

SignedSubscription::~SignedSubscription() {
  // @@protoc_insertion_point(destructor:pb.SignedSubscription)
  SharedDtor();
}

void SignedSubscription::SharedDtor() {
  if (this != internal_default_instance()) delete sub_part_;
  if (this != internal_default_instance()) delete update_part_;
}

void SignedSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedSubscription& SignedSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignedSubscription_replication_2eproto.base);
  return *internal_default_instance();
}


void SignedSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SignedSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sub_part_ != nullptr) {
    delete sub_part_;
  }
  sub_part_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_part_ != nullptr) {
    delete update_part_;
  }
  update_part_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SignedSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Subscription sub_part = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_part(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.SubscriptionUpdate update_part = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_part(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignedSubscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SignedSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Subscription sub_part = 1;
  if (this->has_sub_part()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sub_part(this), target, stream);
  }

  // .pb.SubscriptionUpdate update_part = 2;
  if (this->has_update_part()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_part(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SignedSubscription)
  return target;
}

size_t SignedSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SignedSubscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Subscription sub_part = 1;
  if (this->has_sub_part()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_part_);
  }

  // .pb.SubscriptionUpdate update_part = 2;
  if (this->has_update_part()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_part_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SignedSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignedSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SignedSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SignedSubscription)
    MergeFrom(*source);
  }
}

void SignedSubscription::MergeFrom(const SignedSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SignedSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sub_part()) {
    _internal_mutable_sub_part()->::pb::Subscription::MergeFrom(from._internal_sub_part());
  }
  if (from.has_update_part()) {
    _internal_mutable_update_part()->::pb::SubscriptionUpdate::MergeFrom(from._internal_update_part());
  }
}

void SignedSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SignedSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedSubscription::CopyFrom(const SignedSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SignedSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedSubscription::IsInitialized() const {
  return true;
}

void SignedSubscription::InternalSwap(SignedSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sub_part_, other->sub_part_);
  swap(update_part_, other->update_part_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::Replication* Arena::CreateMaybeMessage< ::pb::Replication >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Replication >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ServerSource* Arena::CreateMaybeMessage< ::pb::ServerSource >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ServerSource >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::AddrInfo* Arena::CreateMaybeMessage< ::pb::AddrInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::AddrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Subscription* Arena::CreateMaybeMessage< ::pb::Subscription >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Subscription >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ReplicationStatus* Arena::CreateMaybeMessage< ::pb::ReplicationStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ReplicationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SubscriptionUpdate* Arena::CreateMaybeMessage< ::pb::SubscriptionUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SubscriptionUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SignedSubscription* Arena::CreateMaybeMessage< ::pb::SignedSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SignedSubscription >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
