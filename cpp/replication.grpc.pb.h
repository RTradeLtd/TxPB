// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: replication.proto
#ifndef GRPC_replication_2eproto__INCLUDED
#define GRPC_replication_2eproto__INCLUDED

#include "replication.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace pb {

// The replicator provides replication services.
class replicator final {
 public:
  static constexpr char const* service_full_name() {
    return "pb.replicator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Add is used to add a replication to this server, changing it's status from reserved to active.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::ReplicationStatus>> Add(::grpc::ClientContext* context, const ::pb::Subscription& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::ReplicationStatus>>(AddRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>> AsyncAdd(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>>(AsyncAddRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>>(PrepareAsyncAddRaw(context, request, cq));
    }
    // Status returns an updating stream of the replication status on the server.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::ReplicationStatus>> Status(::grpc::ClientContext* context, const ::pb::Subscription& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::ReplicationStatus>>(StatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>> AsyncStatus(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>>(AsyncStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    // GetSubscriptionUpdate returns the latest version of subscribed replication
    virtual ::grpc::Status GetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription& request, ::pb::SubscriptionUpdate* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::SubscriptionUpdate>> AsyncGetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::SubscriptionUpdate>>(AsyncGetSubscriptionUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::SubscriptionUpdate>> PrepareAsyncGetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::SubscriptionUpdate>>(PrepareAsyncGetSubscriptionUpdateRaw(context, request, cq));
    }
    // SubmitReplication is used by client agents to start replications, after they 
    // have uploaded the files and retrieved the cid, and collected servers to replicate too.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::ReplicationStatus>> SubmitReplication(::grpc::ClientContext* context, const ::pb::SignedSubscription& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::ReplicationStatus>>(SubmitReplicationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>> AsyncSubmitReplication(::grpc::ClientContext* context, const ::pb::SignedSubscription& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>>(AsyncSubmitReplicationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>> PrepareAsyncSubmitReplication(::grpc::ClientContext* context, const ::pb::SignedSubscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>>(PrepareAsyncSubmitReplicationRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Add is used to add a replication to this server, changing it's status from reserved to active.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Add(::grpc::ClientContext* context, ::pb::Subscription* request, ::grpc::ClientReadReactor< ::pb::ReplicationStatus>* reactor) = 0;
      #else
      virtual void Add(::grpc::ClientContext* context, ::pb::Subscription* request, ::grpc::experimental::ClientReadReactor< ::pb::ReplicationStatus>* reactor) = 0;
      #endif
      // Status returns an updating stream of the replication status on the server.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Status(::grpc::ClientContext* context, ::pb::Subscription* request, ::grpc::ClientReadReactor< ::pb::ReplicationStatus>* reactor) = 0;
      #else
      virtual void Status(::grpc::ClientContext* context, ::pb::Subscription* request, ::grpc::experimental::ClientReadReactor< ::pb::ReplicationStatus>* reactor) = 0;
      #endif
      // GetSubscriptionUpdate returns the latest version of subscribed replication
      virtual void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription* request, ::pb::SubscriptionUpdate* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::SubscriptionUpdate* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription* request, ::pb::SubscriptionUpdate* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription* request, ::pb::SubscriptionUpdate* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::SubscriptionUpdate* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::SubscriptionUpdate* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // SubmitReplication is used by client agents to start replications, after they 
      // have uploaded the files and retrieved the cid, and collected servers to replicate too.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitReplication(::grpc::ClientContext* context, ::pb::SignedSubscription* request, ::grpc::ClientReadReactor< ::pb::ReplicationStatus>* reactor) = 0;
      #else
      virtual void SubmitReplication(::grpc::ClientContext* context, ::pb::SignedSubscription* request, ::grpc::experimental::ClientReadReactor< ::pb::ReplicationStatus>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::pb::ReplicationStatus>* AddRaw(::grpc::ClientContext* context, const ::pb::Subscription& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>* AsyncAddRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pb::ReplicationStatus>* StatusRaw(::grpc::ClientContext* context, const ::pb::Subscription& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>* AsyncStatusRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::SubscriptionUpdate>* AsyncGetSubscriptionUpdateRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::SubscriptionUpdate>* PrepareAsyncGetSubscriptionUpdateRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pb::ReplicationStatus>* SubmitReplicationRaw(::grpc::ClientContext* context, const ::pb::SignedSubscription& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>* AsyncSubmitReplicationRaw(::grpc::ClientContext* context, const ::pb::SignedSubscription& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::ReplicationStatus>* PrepareAsyncSubmitReplicationRaw(::grpc::ClientContext* context, const ::pb::SignedSubscription& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::pb::ReplicationStatus>> Add(::grpc::ClientContext* context, const ::pb::Subscription& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::ReplicationStatus>>(AddRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>> AsyncAdd(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>>(AsyncAddRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>>(PrepareAsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pb::ReplicationStatus>> Status(::grpc::ClientContext* context, const ::pb::Subscription& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::ReplicationStatus>>(StatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>> AsyncStatus(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>>(AsyncStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status GetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription& request, ::pb::SubscriptionUpdate* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::SubscriptionUpdate>> AsyncGetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::SubscriptionUpdate>>(AsyncGetSubscriptionUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::SubscriptionUpdate>> PrepareAsyncGetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::SubscriptionUpdate>>(PrepareAsyncGetSubscriptionUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pb::ReplicationStatus>> SubmitReplication(::grpc::ClientContext* context, const ::pb::SignedSubscription& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::ReplicationStatus>>(SubmitReplicationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>> AsyncSubmitReplication(::grpc::ClientContext* context, const ::pb::SignedSubscription& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>>(AsyncSubmitReplicationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>> PrepareAsyncSubmitReplication(::grpc::ClientContext* context, const ::pb::SignedSubscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>>(PrepareAsyncSubmitReplicationRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Add(::grpc::ClientContext* context, ::pb::Subscription* request, ::grpc::ClientReadReactor< ::pb::ReplicationStatus>* reactor) override;
      #else
      void Add(::grpc::ClientContext* context, ::pb::Subscription* request, ::grpc::experimental::ClientReadReactor< ::pb::ReplicationStatus>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Status(::grpc::ClientContext* context, ::pb::Subscription* request, ::grpc::ClientReadReactor< ::pb::ReplicationStatus>* reactor) override;
      #else
      void Status(::grpc::ClientContext* context, ::pb::Subscription* request, ::grpc::experimental::ClientReadReactor< ::pb::ReplicationStatus>* reactor) override;
      #endif
      void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription* request, ::pb::SubscriptionUpdate* response, std::function<void(::grpc::Status)>) override;
      void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::SubscriptionUpdate* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription* request, ::pb::SubscriptionUpdate* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::pb::Subscription* request, ::pb::SubscriptionUpdate* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::SubscriptionUpdate* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSubscriptionUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::SubscriptionUpdate* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitReplication(::grpc::ClientContext* context, ::pb::SignedSubscription* request, ::grpc::ClientReadReactor< ::pb::ReplicationStatus>* reactor) override;
      #else
      void SubmitReplication(::grpc::ClientContext* context, ::pb::SignedSubscription* request, ::grpc::experimental::ClientReadReactor< ::pb::ReplicationStatus>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::pb::ReplicationStatus>* AddRaw(::grpc::ClientContext* context, const ::pb::Subscription& request) override;
    ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>* AsyncAddRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pb::ReplicationStatus>* StatusRaw(::grpc::ClientContext* context, const ::pb::Subscription& request) override;
    ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>* AsyncStatusRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::SubscriptionUpdate>* AsyncGetSubscriptionUpdateRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::SubscriptionUpdate>* PrepareAsyncGetSubscriptionUpdateRaw(::grpc::ClientContext* context, const ::pb::Subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pb::ReplicationStatus>* SubmitReplicationRaw(::grpc::ClientContext* context, const ::pb::SignedSubscription& request) override;
    ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>* AsyncSubmitReplicationRaw(::grpc::ClientContext* context, const ::pb::SignedSubscription& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::ReplicationStatus>* PrepareAsyncSubmitReplicationRaw(::grpc::ClientContext* context, const ::pb::SignedSubscription& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Add_;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscriptionUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitReplication_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Add is used to add a replication to this server, changing it's status from reserved to active.
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::pb::Subscription* request, ::grpc::ServerWriter< ::pb::ReplicationStatus>* writer);
    // Status returns an updating stream of the replication status on the server.
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::pb::Subscription* request, ::grpc::ServerWriter< ::pb::ReplicationStatus>* writer);
    // GetSubscriptionUpdate returns the latest version of subscribed replication
    virtual ::grpc::Status GetSubscriptionUpdate(::grpc::ServerContext* context, const ::pb::Subscription* request, ::pb::SubscriptionUpdate* response);
    // SubmitReplication is used by client agents to start replications, after they 
    // have uploaded the files and retrieved the cid, and collected servers to replicate too.
    virtual ::grpc::Status SubmitReplication(::grpc::ServerContext* context, const ::pb::SignedSubscription* request, ::grpc::ServerWriter< ::pb::ReplicationStatus>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::pb::Subscription* request, ::grpc::ServerAsyncWriter< ::pb::ReplicationStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::pb::Subscription* request, ::grpc::ServerAsyncWriter< ::pb::ReplicationStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscriptionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubscriptionUpdate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSubscriptionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionUpdate(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::pb::SubscriptionUpdate* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscriptionUpdate(::grpc::ServerContext* context, ::pb::Subscription* request, ::grpc::ServerAsyncResponseWriter< ::pb::SubscriptionUpdate>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitReplication() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubmitReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitReplication(::grpc::ServerContext* /*context*/, const ::pb::SignedSubscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitReplication(::grpc::ServerContext* context, ::pb::SignedSubscription* request, ::grpc::ServerAsyncWriter< ::pb::ReplicationStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Add<WithAsyncMethod_Status<WithAsyncMethod_GetSubscriptionUpdate<WithAsyncMethod_SubmitReplication<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Add() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::pb::Subscription, ::pb::ReplicationStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::Subscription* request) { return this->Add(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::pb::ReplicationStatus>* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::Subscription* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::pb::ReplicationStatus>* Add(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::Subscription* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Status() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::pb::Subscription, ::pb::ReplicationStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::Subscription* request) { return this->Status(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::pb::ReplicationStatus>* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::Subscription* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::pb::ReplicationStatus>* Status(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::Subscription* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSubscriptionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSubscriptionUpdate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::Subscription, ::pb::SubscriptionUpdate>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::Subscription* request, ::pb::SubscriptionUpdate* response) { return this->GetSubscriptionUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubscriptionUpdate(
        ::grpc::experimental::MessageAllocator< ::pb::Subscription, ::pb::SubscriptionUpdate>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::Subscription, ::pb::SubscriptionUpdate>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSubscriptionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionUpdate(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::pb::SubscriptionUpdate* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSubscriptionUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::pb::SubscriptionUpdate* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSubscriptionUpdate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::pb::SubscriptionUpdate* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitReplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::pb::SignedSubscription, ::pb::ReplicationStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::SignedSubscription* request) { return this->SubmitReplication(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubmitReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitReplication(::grpc::ServerContext* /*context*/, const ::pb::SignedSubscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::pb::ReplicationStatus>* SubmitReplication(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::SignedSubscription* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::pb::ReplicationStatus>* SubmitReplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::SignedSubscription* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Status<ExperimentalWithCallbackMethod_GetSubscriptionUpdate<ExperimentalWithCallbackMethod_SubmitReplication<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Status<ExperimentalWithCallbackMethod_GetSubscriptionUpdate<ExperimentalWithCallbackMethod_SubmitReplication<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscriptionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubscriptionUpdate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSubscriptionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionUpdate(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::pb::SubscriptionUpdate* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitReplication() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubmitReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitReplication(::grpc::ServerContext* /*context*/, const ::pb::SignedSubscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Add() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubscriptionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubscriptionUpdate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetSubscriptionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionUpdate(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::pb::SubscriptionUpdate* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscriptionUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitReplication() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubmitReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitReplication(::grpc::ServerContext* /*context*/, const ::pb::SignedSubscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitReplication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Add() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Add(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Add(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Status() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Status(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Status(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSubscriptionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSubscriptionUpdate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubscriptionUpdate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSubscriptionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionUpdate(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::pb::SubscriptionUpdate* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSubscriptionUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSubscriptionUpdate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitReplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubmitReplication(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitReplication(::grpc::ServerContext* /*context*/, const ::pb::SignedSubscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubmitReplication(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubmitReplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubscriptionUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubscriptionUpdate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::Subscription, ::pb::SubscriptionUpdate>(std::bind(&WithStreamedUnaryMethod_GetSubscriptionUpdate<BaseClass>::StreamedGetSubscriptionUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSubscriptionUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscriptionUpdate(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::pb::SubscriptionUpdate* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubscriptionUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::Subscription,::pb::SubscriptionUpdate>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSubscriptionUpdate<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::pb::Subscription, ::pb::ReplicationStatus>(std::bind(&WithSplitStreamingMethod_Add<BaseClass>::StreamedAdd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::Subscription,::pb::ReplicationStatus>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::pb::Subscription, ::pb::ReplicationStatus>(std::bind(&WithSplitStreamingMethod_Status<BaseClass>::StreamedStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::pb::Subscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::Subscription,::pb::ReplicationStatus>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubmitReplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubmitReplication() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::pb::SignedSubscription, ::pb::ReplicationStatus>(std::bind(&WithSplitStreamingMethod_SubmitReplication<BaseClass>::StreamedSubmitReplication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubmitReplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitReplication(::grpc::ServerContext* /*context*/, const ::pb::SignedSubscription* /*request*/, ::grpc::ServerWriter< ::pb::ReplicationStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubmitReplication(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::SignedSubscription,::pb::ReplicationStatus>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Add<WithSplitStreamingMethod_Status<WithSplitStreamingMethod_SubmitReplication<Service > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_Add<WithSplitStreamingMethod_Status<WithStreamedUnaryMethod_GetSubscriptionUpdate<WithSplitStreamingMethod_SubmitReplication<Service > > > > StreamedService;
};

}  // namespace pb


#endif  // GRPC_replication_2eproto__INCLUDED
