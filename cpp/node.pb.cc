// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Block_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnMgmtResponse_ConnectedEntry_DoNotUse_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnMgmtResponse_StatusEntry_DoNotUse_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnMgmtStatus_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DagRequest_LinksEntry_DoNotUse_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPLDLink_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_P2PLsInfo_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistResponse_ErrorsEntry_DoNotUse_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistResponse_StatusEntry_DoNotUse_node_2eproto;
namespace pb {
class P2PRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<P2PRequest> _instance;
} _P2PRequest_default_instance_;
class P2PResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<P2PResponse> _instance;
} _P2PResponse_default_instance_;
class P2PLsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<P2PLsInfo> _instance;
} _P2PLsInfo_default_instance_;
class GetPeersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPeersResponse> _instance;
} _GetPeersResponse_default_instance_;
class ConnMgmtRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnMgmtRequest> _instance;
} _ConnMgmtRequest_default_instance_;
class ConnMgmtResponse_ConnectedEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnMgmtResponse_ConnectedEntry_DoNotUse> _instance;
} _ConnMgmtResponse_ConnectedEntry_DoNotUse_default_instance_;
class ConnMgmtResponse_StatusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnMgmtResponse_StatusEntry_DoNotUse> _instance;
} _ConnMgmtResponse_StatusEntry_DoNotUse_default_instance_;
class ConnMgmtResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnMgmtResponse> _instance;
} _ConnMgmtResponse_default_instance_;
class ConnMgmtStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnMgmtStatus> _instance;
} _ConnMgmtStatus_default_instance_;
class ExtrasRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtrasRequest> _instance;
} _ExtrasRequest_default_instance_;
class BlockstoreRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockstoreRequest> _instance;
} _BlockstoreRequest_default_instance_;
class BlockstoreResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockstoreResponse> _instance;
} _BlockstoreResponse_default_instance_;
class BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
class DagRequest_LinksEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DagRequest_LinksEntry_DoNotUse> _instance;
} _DagRequest_LinksEntry_DoNotUse_default_instance_;
class DagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DagRequest> _instance;
} _DagRequest_default_instance_;
class DagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DagResponse> _instance;
} _DagResponse_default_instance_;
class IPLDLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPLDLink> _instance;
} _IPLDLink_default_instance_;
class IPLDNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPLDNode> _instance;
} _IPLDNode_default_instance_;
class KeystoreRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeystoreRequest> _instance;
} _KeystoreRequest_default_instance_;
class KeystoreResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeystoreResponse> _instance;
} _KeystoreResponse_default_instance_;
class PersistRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistRequest> _instance;
} _PersistRequest_default_instance_;
class PersistResponse_StatusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistResponse_StatusEntry_DoNotUse> _instance;
} _PersistResponse_StatusEntry_DoNotUse_default_instance_;
class PersistResponse_ErrorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistResponse_ErrorsEntry_DoNotUse> _instance;
} _PersistResponse_ErrorsEntry_DoNotUse_default_instance_;
class PersistResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistResponse> _instance;
} _PersistResponse_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_Block_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Block_default_instance_;
    new (ptr) ::pb::Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Block::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Block_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Block_node_2eproto}, {}};

static void InitDefaultsscc_info_BlockstoreRequest_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BlockstoreRequest_default_instance_;
    new (ptr) ::pb::BlockstoreRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BlockstoreRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockstoreRequest_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockstoreRequest_node_2eproto}, {}};

static void InitDefaultsscc_info_BlockstoreResponse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BlockstoreResponse_default_instance_;
    new (ptr) ::pb::BlockstoreResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BlockstoreResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlockstoreResponse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BlockstoreResponse_node_2eproto}, {
      &scc_info_Block_node_2eproto.base,}};

static void InitDefaultsscc_info_ConnMgmtRequest_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ConnMgmtRequest_default_instance_;
    new (ptr) ::pb::ConnMgmtRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ConnMgmtRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnMgmtRequest_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnMgmtRequest_node_2eproto}, {}};

static void InitDefaultsscc_info_ConnMgmtResponse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ConnMgmtResponse_default_instance_;
    new (ptr) ::pb::ConnMgmtResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ConnMgmtResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConnMgmtResponse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConnMgmtResponse_node_2eproto}, {
      &scc_info_ConnMgmtResponse_ConnectedEntry_DoNotUse_node_2eproto.base,
      &scc_info_ConnMgmtResponse_StatusEntry_DoNotUse_node_2eproto.base,}};

static void InitDefaultsscc_info_ConnMgmtResponse_ConnectedEntry_DoNotUse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ConnMgmtResponse_ConnectedEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse();
  }
  ::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnMgmtResponse_ConnectedEntry_DoNotUse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnMgmtResponse_ConnectedEntry_DoNotUse_node_2eproto}, {}};

static void InitDefaultsscc_info_ConnMgmtResponse_StatusEntry_DoNotUse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ConnMgmtResponse_StatusEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::ConnMgmtResponse_StatusEntry_DoNotUse();
  }
  ::pb::ConnMgmtResponse_StatusEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnMgmtResponse_StatusEntry_DoNotUse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConnMgmtResponse_StatusEntry_DoNotUse_node_2eproto}, {
      &scc_info_ConnMgmtStatus_node_2eproto.base,}};

static void InitDefaultsscc_info_ConnMgmtStatus_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ConnMgmtStatus_default_instance_;
    new (ptr) ::pb::ConnMgmtStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ConnMgmtStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnMgmtStatus_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnMgmtStatus_node_2eproto}, {}};

static void InitDefaultsscc_info_DagRequest_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_DagRequest_default_instance_;
    new (ptr) ::pb::DagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DagRequest_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DagRequest_node_2eproto}, {
      &scc_info_DagRequest_LinksEntry_DoNotUse_node_2eproto.base,}};

static void InitDefaultsscc_info_DagRequest_LinksEntry_DoNotUse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_DagRequest_LinksEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::DagRequest_LinksEntry_DoNotUse();
  }
  ::pb::DagRequest_LinksEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DagRequest_LinksEntry_DoNotUse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DagRequest_LinksEntry_DoNotUse_node_2eproto}, {}};

static void InitDefaultsscc_info_DagResponse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_DagResponse_default_instance_;
    new (ptr) ::pb::DagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DagResponse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DagResponse_node_2eproto}, {
      &scc_info_IPLDLink_node_2eproto.base,}};

static void InitDefaultsscc_info_ExtrasRequest_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ExtrasRequest_default_instance_;
    new (ptr) ::pb::ExtrasRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ExtrasRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtrasRequest_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExtrasRequest_node_2eproto}, {}};

static void InitDefaultsscc_info_GetPeersResponse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetPeersResponse_default_instance_;
    new (ptr) ::pb::GetPeersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetPeersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPeersResponse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPeersResponse_node_2eproto}, {}};

static void InitDefaultsscc_info_IPLDLink_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_IPLDLink_default_instance_;
    new (ptr) ::pb::IPLDLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::IPLDLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPLDLink_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPLDLink_node_2eproto}, {}};

static void InitDefaultsscc_info_IPLDNode_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_IPLDNode_default_instance_;
    new (ptr) ::pb::IPLDNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::IPLDNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IPLDNode_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IPLDNode_node_2eproto}, {
      &scc_info_IPLDLink_node_2eproto.base,}};

static void InitDefaultsscc_info_KeystoreRequest_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_KeystoreRequest_default_instance_;
    new (ptr) ::pb::KeystoreRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::KeystoreRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeystoreRequest_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeystoreRequest_node_2eproto}, {}};

static void InitDefaultsscc_info_KeystoreResponse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_KeystoreResponse_default_instance_;
    new (ptr) ::pb::KeystoreResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::KeystoreResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeystoreResponse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeystoreResponse_node_2eproto}, {}};

static void InitDefaultsscc_info_P2PLsInfo_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_P2PLsInfo_default_instance_;
    new (ptr) ::pb::P2PLsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::P2PLsInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_P2PLsInfo_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_P2PLsInfo_node_2eproto}, {}};

static void InitDefaultsscc_info_P2PRequest_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_P2PRequest_default_instance_;
    new (ptr) ::pb::P2PRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::P2PRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_P2PRequest_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_P2PRequest_node_2eproto}, {}};

static void InitDefaultsscc_info_P2PResponse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_P2PResponse_default_instance_;
    new (ptr) ::pb::P2PResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::P2PResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_P2PResponse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_P2PResponse_node_2eproto}, {
      &scc_info_P2PLsInfo_node_2eproto.base,}};

static void InitDefaultsscc_info_PersistRequest_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PersistRequest_default_instance_;
    new (ptr) ::pb::PersistRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PersistRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistRequest_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PersistRequest_node_2eproto}, {}};

static void InitDefaultsscc_info_PersistResponse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PersistResponse_default_instance_;
    new (ptr) ::pb::PersistResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PersistResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PersistResponse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PersistResponse_node_2eproto}, {
      &scc_info_PersistResponse_StatusEntry_DoNotUse_node_2eproto.base,
      &scc_info_PersistResponse_ErrorsEntry_DoNotUse_node_2eproto.base,}};

static void InitDefaultsscc_info_PersistResponse_ErrorsEntry_DoNotUse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PersistResponse_ErrorsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::PersistResponse_ErrorsEntry_DoNotUse();
  }
  ::pb::PersistResponse_ErrorsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistResponse_ErrorsEntry_DoNotUse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PersistResponse_ErrorsEntry_DoNotUse_node_2eproto}, {}};

static void InitDefaultsscc_info_PersistResponse_StatusEntry_DoNotUse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PersistResponse_StatusEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::PersistResponse_StatusEntry_DoNotUse();
  }
  ::pb::PersistResponse_StatusEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistResponse_StatusEntry_DoNotUse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PersistResponse_StatusEntry_DoNotUse_node_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::P2PRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::P2PRequest, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PRequest, all_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PRequest, verbose_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PRequest, protocolname_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PRequest, listenaddress_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PRequest, targetaddress_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PRequest, remoteaddress_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PRequest, allowcustomprotocols_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PRequest, reportpeerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::P2PResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::P2PResponse, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PResponse, names_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PResponse, connsclosed_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PResponse, streaminfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::P2PLsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::P2PLsInfo, protocolname_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PLsInfo, listenaddress_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PLsInfo, targetaddress_),
  PROTOBUF_FIELD_OFFSET(::pb::P2PLsInfo, local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetPeersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetPeersResponse, peerids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtRequest, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtRequest, multiaddrs_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtRequest, peerids_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse_StatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse_StatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse_StatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse_StatusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse, connected_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse, status_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtResponse, peerids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtStatus, disconnected_),
  PROTOBUF_FIELD_OFFSET(::pb::ConnMgmtStatus, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ExtrasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ExtrasRequest, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::ExtrasRequest, extrasfeature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BlockstoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BlockstoreRequest, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockstoreRequest, reqopts_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockstoreRequest, cids_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockstoreRequest, data_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockstoreRequest, cidversion_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockstoreRequest, hashfunc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BlockstoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BlockstoreResponse, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockstoreResponse, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Block, cid_),
  PROTOBUF_FIELD_OFFSET(::pb::Block, data_),
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest_LinksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest_LinksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest_LinksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest_LinksEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest, data_),
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest, objectencoding_),
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest, serializationformat_),
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest, hashfunc_),
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest, cidversion_),
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest, hash_),
  PROTOBUF_FIELD_OFFSET(::pb::DagRequest, links_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::DagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::DagResponse, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::DagResponse, hashes_),
  PROTOBUF_FIELD_OFFSET(::pb::DagResponse, rawdata_),
  PROTOBUF_FIELD_OFFSET(::pb::DagResponse, links_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::IPLDLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::IPLDLink, hash_),
  PROTOBUF_FIELD_OFFSET(::pb::IPLDLink, name_),
  PROTOBUF_FIELD_OFFSET(::pb::IPLDLink, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::IPLDNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::IPLDNode, links_),
  PROTOBUF_FIELD_OFFSET(::pb::IPLDNode, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::KeystoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::KeystoreRequest, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::KeystoreRequest, name_),
  PROTOBUF_FIELD_OFFSET(::pb::KeystoreRequest, privatekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::KeystoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::KeystoreResponse, requesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::KeystoreResponse, privatekey_),
  PROTOBUF_FIELD_OFFSET(::pb::KeystoreResponse, keynames_),
  PROTOBUF_FIELD_OFFSET(::pb::KeystoreResponse, has_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PersistRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PersistRequest, cids_),
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse_StatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse_StatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse_StatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse_StatusEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse_ErrorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse_ErrorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse_ErrorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse_ErrorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse, status_),
  PROTOBUF_FIELD_OFFSET(::pb::PersistResponse, errors_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::P2PRequest)},
  { 14, -1, sizeof(::pb::P2PResponse)},
  { 23, -1, sizeof(::pb::P2PLsInfo)},
  { 32, -1, sizeof(::pb::GetPeersResponse)},
  { 38, -1, sizeof(::pb::ConnMgmtRequest)},
  { 46, 53, sizeof(::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse)},
  { 55, 62, sizeof(::pb::ConnMgmtResponse_StatusEntry_DoNotUse)},
  { 64, -1, sizeof(::pb::ConnMgmtResponse)},
  { 73, -1, sizeof(::pb::ConnMgmtStatus)},
  { 80, -1, sizeof(::pb::ExtrasRequest)},
  { 87, -1, sizeof(::pb::BlockstoreRequest)},
  { 98, -1, sizeof(::pb::BlockstoreResponse)},
  { 105, -1, sizeof(::pb::Block)},
  { 112, 119, sizeof(::pb::DagRequest_LinksEntry_DoNotUse)},
  { 121, -1, sizeof(::pb::DagRequest)},
  { 134, -1, sizeof(::pb::DagResponse)},
  { 143, -1, sizeof(::pb::IPLDLink)},
  { 151, -1, sizeof(::pb::IPLDNode)},
  { 158, -1, sizeof(::pb::KeystoreRequest)},
  { 166, -1, sizeof(::pb::KeystoreResponse)},
  { 175, -1, sizeof(::pb::PersistRequest)},
  { 181, 188, sizeof(::pb::PersistResponse_StatusEntry_DoNotUse)},
  { 190, 197, sizeof(::pb::PersistResponse_ErrorsEntry_DoNotUse)},
  { 199, -1, sizeof(::pb::PersistResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_P2PRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_P2PResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_P2PLsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetPeersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ConnMgmtRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ConnMgmtResponse_ConnectedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ConnMgmtResponse_StatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ConnMgmtResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ConnMgmtStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ExtrasRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BlockstoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BlockstoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_DagRequest_LinksEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_DagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_DagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_IPLDLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_IPLDNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_KeystoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_KeystoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PersistRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PersistResponse_StatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PersistResponse_ErrorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PersistResponse_default_instance_),
};

const char descriptor_table_protodef_node_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nnode.proto\022\002pb\032\nutil.proto\"\336\001\n\nP2PRequ"
  "est\022#\n\013requestType\030\001 \001(\0162\016.pb.P2PREQTYPE"
  "\022\013\n\003all\030\002 \001(\010\022\017\n\007verbose\030\003 \001(\010\022\024\n\014protoc"
  "olName\030\004 \001(\t\022\025\n\rlistenAddress\030\005 \001(\t\022\025\n\rt"
  "argetAddress\030\006 \001(\t\022\025\n\rremoteAddress\030\007 \001("
  "\t\022\034\n\024allowCustomProtocols\030\010 \001(\010\022\024\n\014repor"
  "tPeerID\030\t \001(\010\"z\n\013P2PResponse\022#\n\013requestT"
  "ype\030\001 \001(\0162\016.pb.P2PREQTYPE\022\r\n\005names\030\002 \003(\t"
  "\022\023\n\013connsClosed\030\003 \001(\005\022\"\n\013streamInfos\030\004 \003"
  "(\0132\r.pb.P2PLsInfo\"^\n\tP2PLsInfo\022\024\n\014protoc"
  "olName\030\001 \001(\t\022\025\n\rlistenAddress\030\002 \001(\t\022\025\n\rt"
  "argetAddress\030\003 \001(\t\022\r\n\005local\030\004 \001(\010\"#\n\020Get"
  "PeersResponse\022\017\n\007peerIDs\030\001 \003(\t\"`\n\017ConnMg"
  "mtRequest\022(\n\013requestType\030\001 \001(\0162\023.pb.CONN"
  "MGMTREQTYPE\022\022\n\nmultiAddrs\030\002 \003(\t\022\017\n\007peerI"
  "Ds\030\003 \003(\t\"\254\002\n\020ConnMgmtResponse\022(\n\013request"
  "Type\030\001 \001(\0162\023.pb.CONNMGMTREQTYPE\0226\n\tconne"
  "cted\030\002 \003(\0132#.pb.ConnMgmtResponse.Connect"
  "edEntry\0220\n\006status\030\003 \003(\0132 .pb.ConnMgmtRes"
  "ponse.StatusEntry\022\017\n\007peerIDs\030\004 \003(\t\0320\n\016Co"
  "nnectedEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\010"
  ":\0028\001\032A\n\013StatusEntry\022\013\n\003key\030\001 \001(\t\022!\n\005valu"
  "e\030\002 \001(\0132\022.pb.ConnMgmtStatus:\0028\001\"6\n\016ConnM"
  "gmtStatus\022\024\n\014disconnected\030\001 \001(\010\022\016\n\006reaso"
  "n\030\002 \001(\t\"^\n\rExtrasRequest\022&\n\013requestType\030"
  "\001 \001(\0162\021.pb.EXTRASREQTYPE\022%\n\rextrasFeatur"
  "e\030\002 \001(\0162\016.pb.EXTRASTYPE\"\231\001\n\021BlockstoreRe"
  "quest\022\"\n\013requestType\030\001 \001(\0162\r.pb.BSREQTYP"
  "E\022\036\n\007reqOpts\030\002 \003(\0162\r.pb.BSREQOPTS\022\014\n\004cid"
  "s\030\003 \003(\t\022\014\n\004data\030\004 \003(\014\022\022\n\ncidVersion\030\005 \001("
  "\t\022\020\n\010hashFunc\030\007 \001(\t\"S\n\022BlockstoreRespons"
  "e\022\"\n\013requestType\030\001 \001(\0162\r.pb.BSREQTYPE\022\031\n"
  "\006blocks\030\002 \003(\0132\t.pb.Block\"\"\n\005Block\022\013\n\003cid"
  "\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\"\200\002\n\nDagRequest\022#\n\013r"
  "equestType\030\001 \001(\0162\016.pb.DAGREQTYPE\022\014\n\004data"
  "\030\002 \001(\014\022\026\n\016objectEncoding\030\003 \001(\t\022\033\n\023serial"
  "izationFormat\030\004 \001(\t\022\020\n\010hashFunc\030\005 \001(\t\022\022\n"
  "\ncidVersion\030\006 \001(\003\022\014\n\004hash\030\007 \001(\t\022(\n\005links"
  "\030\010 \003(\0132\031.pb.DagRequest.LinksEntry\032,\n\nLin"
  "ksEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
  "p\n\013DagResponse\022#\n\013requestType\030\001 \001(\0162\016.pb"
  ".DAGREQTYPE\022\016\n\006hashes\030\002 \003(\t\022\017\n\007rawData\030\003"
  " \001(\014\022\033\n\005links\030\004 \003(\0132\014.pb.IPLDLink\"4\n\010IPL"
  "DLink\022\014\n\004hash\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\014\n\004siz"
  "e\030\003 \001(\004\"5\n\010IPLDNode\022\033\n\005links\030\002 \003(\0132\014.pb."
  "IPLDLink\022\014\n\004data\030\001 \001(\014\"W\n\017KeystoreReques"
  "t\022\"\n\013requestType\030\001 \001(\0162\r.pb.KSREQTYPE\022\014\n"
  "\004name\030\002 \001(\t\022\022\n\nprivateKey\030\003 \001(\014\"i\n\020Keyst"
  "oreResponse\022\"\n\013requestType\030\001 \001(\0162\r.pb.KS"
  "REQTYPE\022\022\n\nprivateKey\030\002 \001(\014\022\020\n\010keyNames\030"
  "\003 \003(\t\022\013\n\003has\030\004 \001(\010\"\036\n\016PersistRequest\022\014\n\004"
  "cids\030\001 \003(\t\"\321\001\n\017PersistResponse\022/\n\006status"
  "\030\001 \003(\0132\037.pb.PersistResponse.StatusEntry\022"
  "/\n\006errors\030\002 \003(\0132\037.pb.PersistResponse.Err"
  "orsEntry\032-\n\013StatusEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\010:\0028\001\032-\n\013ErrorsEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*8\n\nP2PREQTYPE\022\t\n\005"
  "CLOSE\020\000\022\013\n\007FORWARD\020\001\022\n\n\006LISTEN\020\002\022\006\n\002LS\020\003"
  "*U\n\017CONNMGMTREQTYPE\022\016\n\nCM_CONNECT\020\000\022\021\n\rC"
  "M_DISCONNECT\020\001\022\r\n\tCM_STATUS\020\002\022\020\n\014CM_GET_"
  "PEERS\020\003*.\n\rEXTRASREQTYPE\022\r\n\tEX_ENABLE\020\000\022"
  "\016\n\nEX_DISABLE\020\001*\?\n\nEXTRASTYPE\022\014\n\010IDENTIF"
  "Y\020\000\022\n\n\006PUBSUB\020\001\022\r\n\tDISCOVERY\020\002\022\010\n\004MDNS\020\003"
  "*T\n\tBSREQTYPE\022\r\n\tBS_DELETE\020\000\022\n\n\006BS_PUT\020\001"
  "\022\017\n\013BS_PUT_MANY\020\002\022\n\n\006BS_GET\020\003\022\017\n\013BS_GET_"
  "MANY\020\004*&\n\tBSREQOPTS\022\013\n\007DEFAULT\020\000\022\014\n\010BS_F"
  "ORCE\020\001*^\n\nDAGREQTYPE\022\013\n\007DAG_PUT\020\000\022\013\n\007DAG"
  "_GET\020\001\022\020\n\014DAG_NEW_NODE\020\002\022\021\n\rDAG_ADD_LINK"
  "S\020\003\022\021\n\rDAG_GET_LINKS\020\004*K\n\tKSREQTYPE\022\n\n\006K"
  "S_HAS\020\000\022\n\n\006KS_GET\020\001\022\n\n\006KS_PUT\020\002\022\r\n\tKS_DE"
  "LETE\020\003\022\013\n\007KS_LIST\020\0042\356\002\n\007NodeAPI\0227\n\010ConnM"
  "gmt\022\023.pb.ConnMgmtRequest\032\024.pb.ConnMgmtRe"
  "sponse\"\000\022(\n\006Extras\022\021.pb.ExtrasRequest\032\t."
  "pb.Empty\"\000\022(\n\003P2P\022\016.pb.P2PRequest\032\017.pb.P"
  "2PResponse\"\000\022=\n\nBlockstore\022\025.pb.Blocksto"
  "reRequest\032\026.pb.BlockstoreResponse\"\000\022(\n\003D"
  "ag\022\016.pb.DagRequest\032\017.pb.DagResponse\"\000\0227\n"
  "\010Keystore\022\023.pb.KeystoreRequest\032\024.pb.Keys"
  "toreResponse\"\000\0224\n\007Persist\022\022.pb.PersistRe"
  "quest\032\023.pb.PersistResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2eproto_deps[1] = {
  &::descriptor_table_util_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_node_2eproto_sccs[24] = {
  &scc_info_Block_node_2eproto.base,
  &scc_info_BlockstoreRequest_node_2eproto.base,
  &scc_info_BlockstoreResponse_node_2eproto.base,
  &scc_info_ConnMgmtRequest_node_2eproto.base,
  &scc_info_ConnMgmtResponse_node_2eproto.base,
  &scc_info_ConnMgmtResponse_ConnectedEntry_DoNotUse_node_2eproto.base,
  &scc_info_ConnMgmtResponse_StatusEntry_DoNotUse_node_2eproto.base,
  &scc_info_ConnMgmtStatus_node_2eproto.base,
  &scc_info_DagRequest_node_2eproto.base,
  &scc_info_DagRequest_LinksEntry_DoNotUse_node_2eproto.base,
  &scc_info_DagResponse_node_2eproto.base,
  &scc_info_ExtrasRequest_node_2eproto.base,
  &scc_info_GetPeersResponse_node_2eproto.base,
  &scc_info_IPLDLink_node_2eproto.base,
  &scc_info_IPLDNode_node_2eproto.base,
  &scc_info_KeystoreRequest_node_2eproto.base,
  &scc_info_KeystoreResponse_node_2eproto.base,
  &scc_info_P2PLsInfo_node_2eproto.base,
  &scc_info_P2PRequest_node_2eproto.base,
  &scc_info_P2PResponse_node_2eproto.base,
  &scc_info_PersistRequest_node_2eproto.base,
  &scc_info_PersistResponse_node_2eproto.base,
  &scc_info_PersistResponse_ErrorsEntry_DoNotUse_node_2eproto.base,
  &scc_info_PersistResponse_StatusEntry_DoNotUse_node_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2eproto_once;
static bool descriptor_table_node_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto = {
  &descriptor_table_node_2eproto_initialized, descriptor_table_protodef_node_2eproto, "node.proto", 3196,
  &descriptor_table_node_2eproto_once, descriptor_table_node_2eproto_sccs, descriptor_table_node_2eproto_deps, 24, 1,
  schemas, file_default_instances, TableStruct_node_2eproto::offsets,
  file_level_metadata_node_2eproto, 24, file_level_enum_descriptors_node_2eproto, file_level_service_descriptors_node_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_node_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_node_2eproto), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* P2PREQTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[0];
}
bool P2PREQTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CONNMGMTREQTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[1];
}
bool CONNMGMTREQTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EXTRASREQTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[2];
}
bool EXTRASREQTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EXTRASTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[3];
}
bool EXTRASTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BSREQTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[4];
}
bool BSREQTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BSREQOPTS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[5];
}
bool BSREQOPTS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DAGREQTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[6];
}
bool DAGREQTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KSREQTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[7];
}
bool KSREQTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void P2PRequest::InitAsDefaultInstance() {
}
class P2PRequest::_Internal {
 public:
};

P2PRequest::P2PRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.P2PRequest)
}
P2PRequest::P2PRequest(const P2PRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocolname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocolname().empty()) {
    protocolname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocolname_);
  }
  listenaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_listenaddress().empty()) {
    listenaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.listenaddress_);
  }
  targetaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetaddress().empty()) {
    targetaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.targetaddress_);
  }
  remoteaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remoteaddress().empty()) {
    remoteaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remoteaddress_);
  }
  ::memcpy(&requesttype_, &from.requesttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&reportpeerid_) -
    reinterpret_cast<char*>(&requesttype_)) + sizeof(reportpeerid_));
  // @@protoc_insertion_point(copy_constructor:pb.P2PRequest)
}

void P2PRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_P2PRequest_node_2eproto.base);
  protocolname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listenaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remoteaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&requesttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportpeerid_) -
      reinterpret_cast<char*>(&requesttype_)) + sizeof(reportpeerid_));
}

P2PRequest::~P2PRequest() {
  // @@protoc_insertion_point(destructor:pb.P2PRequest)
  SharedDtor();
}

void P2PRequest::SharedDtor() {
  protocolname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listenaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remoteaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void P2PRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const P2PRequest& P2PRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_P2PRequest_node_2eproto.base);
  return *internal_default_instance();
}


void P2PRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.P2PRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocolname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listenaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remoteaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&requesttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportpeerid_) -
      reinterpret_cast<char*>(&requesttype_)) + sizeof(reportpeerid_));
  _internal_metadata_.Clear();
}

const char* P2PRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.P2PREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::P2PREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // bool all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verbose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocolName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_protocolname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.P2PRequest.protocolName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string listenAddress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_listenaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.P2PRequest.listenAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string targetAddress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_targetaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.P2PRequest.targetAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remoteAddress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_remoteaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.P2PRequest.remoteAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allowCustomProtocols = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          allowcustomprotocols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reportPeerID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reportpeerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P2PRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.P2PRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.P2PREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // bool all = 2;
  if (this->all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all(), target);
  }

  // bool verbose = 3;
  if (this->verbose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_verbose(), target);
  }

  // string protocolName = 4;
  if (this->protocolname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocolname().data(), static_cast<int>(this->_internal_protocolname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.P2PRequest.protocolName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_protocolname(), target);
  }

  // string listenAddress = 5;
  if (this->listenaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listenaddress().data(), static_cast<int>(this->_internal_listenaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.P2PRequest.listenAddress");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_listenaddress(), target);
  }

  // string targetAddress = 6;
  if (this->targetaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetaddress().data(), static_cast<int>(this->_internal_targetaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.P2PRequest.targetAddress");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_targetaddress(), target);
  }

  // string remoteAddress = 7;
  if (this->remoteaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remoteaddress().data(), static_cast<int>(this->_internal_remoteaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.P2PRequest.remoteAddress");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_remoteaddress(), target);
  }

  // bool allowCustomProtocols = 8;
  if (this->allowcustomprotocols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_allowcustomprotocols(), target);
  }

  // bool reportPeerID = 9;
  if (this->reportpeerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_reportpeerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.P2PRequest)
  return target;
}

size_t P2PRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.P2PRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocolName = 4;
  if (this->protocolname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocolname());
  }

  // string listenAddress = 5;
  if (this->listenaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listenaddress());
  }

  // string targetAddress = 6;
  if (this->targetaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetaddress());
  }

  // string remoteAddress = 7;
  if (this->remoteaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remoteaddress());
  }

  // .pb.P2PREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  // bool all = 2;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  // bool verbose = 3;
  if (this->verbose() != 0) {
    total_size += 1 + 1;
  }

  // bool allowCustomProtocols = 8;
  if (this->allowcustomprotocols() != 0) {
    total_size += 1 + 1;
  }

  // bool reportPeerID = 9;
  if (this->reportpeerid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void P2PRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.P2PRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const P2PRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<P2PRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.P2PRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.P2PRequest)
    MergeFrom(*source);
  }
}

void P2PRequest::MergeFrom(const P2PRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.P2PRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocolname().size() > 0) {

    protocolname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocolname_);
  }
  if (from.listenaddress().size() > 0) {

    listenaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.listenaddress_);
  }
  if (from.targetaddress().size() > 0) {

    targetaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.targetaddress_);
  }
  if (from.remoteaddress().size() > 0) {

    remoteaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remoteaddress_);
  }
  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
  if (from.all() != 0) {
    _internal_set_all(from._internal_all());
  }
  if (from.verbose() != 0) {
    _internal_set_verbose(from._internal_verbose());
  }
  if (from.allowcustomprotocols() != 0) {
    _internal_set_allowcustomprotocols(from._internal_allowcustomprotocols());
  }
  if (from.reportpeerid() != 0) {
    _internal_set_reportpeerid(from._internal_reportpeerid());
  }
}

void P2PRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.P2PRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2PRequest::CopyFrom(const P2PRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.P2PRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2PRequest::IsInitialized() const {
  return true;
}

void P2PRequest::InternalSwap(P2PRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  protocolname_.Swap(&other->protocolname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  listenaddress_.Swap(&other->listenaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  targetaddress_.Swap(&other->targetaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remoteaddress_.Swap(&other->remoteaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requesttype_, other->requesttype_);
  swap(all_, other->all_);
  swap(verbose_, other->verbose_);
  swap(allowcustomprotocols_, other->allowcustomprotocols_);
  swap(reportpeerid_, other->reportpeerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P2PRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void P2PResponse::InitAsDefaultInstance() {
}
class P2PResponse::_Internal {
 public:
};

P2PResponse::P2PResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.P2PResponse)
}
P2PResponse::P2PResponse(const P2PResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      names_(from.names_),
      streaminfos_(from.streaminfos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&requesttype_, &from.requesttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&connsclosed_) -
    reinterpret_cast<char*>(&requesttype_)) + sizeof(connsclosed_));
  // @@protoc_insertion_point(copy_constructor:pb.P2PResponse)
}

void P2PResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_P2PResponse_node_2eproto.base);
  ::memset(&requesttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connsclosed_) -
      reinterpret_cast<char*>(&requesttype_)) + sizeof(connsclosed_));
}

P2PResponse::~P2PResponse() {
  // @@protoc_insertion_point(destructor:pb.P2PResponse)
  SharedDtor();
}

void P2PResponse::SharedDtor() {
}

void P2PResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const P2PResponse& P2PResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_P2PResponse_node_2eproto.base);
  return *internal_default_instance();
}


void P2PResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.P2PResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  streaminfos_.Clear();
  ::memset(&requesttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connsclosed_) -
      reinterpret_cast<char*>(&requesttype_)) + sizeof(connsclosed_));
  _internal_metadata_.Clear();
}

const char* P2PResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.P2PREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::P2PREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.P2PResponse.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 connsClosed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          connsclosed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.P2PLsInfo streamInfos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streaminfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P2PResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.P2PResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.P2PREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.P2PResponse.names");
    target = stream->WriteString(2, s, target);
  }

  // int32 connsClosed = 3;
  if (this->connsclosed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_connsclosed(), target);
  }

  // repeated .pb.P2PLsInfo streamInfos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streaminfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_streaminfos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.P2PResponse)
  return target;
}

size_t P2PResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.P2PResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // repeated .pb.P2PLsInfo streamInfos = 4;
  total_size += 1UL * this->_internal_streaminfos_size();
  for (const auto& msg : this->streaminfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.P2PREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  // int32 connsClosed = 3;
  if (this->connsclosed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_connsclosed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void P2PResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.P2PResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const P2PResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<P2PResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.P2PResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.P2PResponse)
    MergeFrom(*source);
  }
}

void P2PResponse::MergeFrom(const P2PResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.P2PResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  streaminfos_.MergeFrom(from.streaminfos_);
  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
  if (from.connsclosed() != 0) {
    _internal_set_connsclosed(from._internal_connsclosed());
  }
}

void P2PResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.P2PResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2PResponse::CopyFrom(const P2PResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.P2PResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2PResponse::IsInitialized() const {
  return true;
}

void P2PResponse::InternalSwap(P2PResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  streaminfos_.InternalSwap(&other->streaminfos_);
  swap(requesttype_, other->requesttype_);
  swap(connsclosed_, other->connsclosed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P2PResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void P2PLsInfo::InitAsDefaultInstance() {
}
class P2PLsInfo::_Internal {
 public:
};

P2PLsInfo::P2PLsInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.P2PLsInfo)
}
P2PLsInfo::P2PLsInfo(const P2PLsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocolname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocolname().empty()) {
    protocolname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocolname_);
  }
  listenaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_listenaddress().empty()) {
    listenaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.listenaddress_);
  }
  targetaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetaddress().empty()) {
    targetaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.targetaddress_);
  }
  local_ = from.local_;
  // @@protoc_insertion_point(copy_constructor:pb.P2PLsInfo)
}

void P2PLsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_P2PLsInfo_node_2eproto.base);
  protocolname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listenaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_ = false;
}

P2PLsInfo::~P2PLsInfo() {
  // @@protoc_insertion_point(destructor:pb.P2PLsInfo)
  SharedDtor();
}

void P2PLsInfo::SharedDtor() {
  protocolname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listenaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void P2PLsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const P2PLsInfo& P2PLsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_P2PLsInfo_node_2eproto.base);
  return *internal_default_instance();
}


void P2PLsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.P2PLsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocolname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listenaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_ = false;
  _internal_metadata_.Clear();
}

const char* P2PLsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string protocolName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocolname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.P2PLsInfo.protocolName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string listenAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_listenaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.P2PLsInfo.listenAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string targetAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_targetaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.P2PLsInfo.targetAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool local = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P2PLsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.P2PLsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocolName = 1;
  if (this->protocolname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocolname().data(), static_cast<int>(this->_internal_protocolname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.P2PLsInfo.protocolName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocolname(), target);
  }

  // string listenAddress = 2;
  if (this->listenaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listenaddress().data(), static_cast<int>(this->_internal_listenaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.P2PLsInfo.listenAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_listenaddress(), target);
  }

  // string targetAddress = 3;
  if (this->targetaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetaddress().data(), static_cast<int>(this->_internal_targetaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.P2PLsInfo.targetAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_targetaddress(), target);
  }

  // bool local = 4;
  if (this->local() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_local(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.P2PLsInfo)
  return target;
}

size_t P2PLsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.P2PLsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocolName = 1;
  if (this->protocolname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocolname());
  }

  // string listenAddress = 2;
  if (this->listenaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listenaddress());
  }

  // string targetAddress = 3;
  if (this->targetaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetaddress());
  }

  // bool local = 4;
  if (this->local() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void P2PLsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.P2PLsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const P2PLsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<P2PLsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.P2PLsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.P2PLsInfo)
    MergeFrom(*source);
  }
}

void P2PLsInfo::MergeFrom(const P2PLsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.P2PLsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocolname().size() > 0) {

    protocolname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocolname_);
  }
  if (from.listenaddress().size() > 0) {

    listenaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.listenaddress_);
  }
  if (from.targetaddress().size() > 0) {

    targetaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.targetaddress_);
  }
  if (from.local() != 0) {
    _internal_set_local(from._internal_local());
  }
}

void P2PLsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.P2PLsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2PLsInfo::CopyFrom(const P2PLsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.P2PLsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2PLsInfo::IsInitialized() const {
  return true;
}

void P2PLsInfo::InternalSwap(P2PLsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  protocolname_.Swap(&other->protocolname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  listenaddress_.Swap(&other->listenaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  targetaddress_.Swap(&other->targetaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(local_, other->local_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P2PLsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPeersResponse::InitAsDefaultInstance() {
}
class GetPeersResponse::_Internal {
 public:
};

GetPeersResponse::GetPeersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GetPeersResponse)
}
GetPeersResponse::GetPeersResponse(const GetPeersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peerids_(from.peerids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetPeersResponse)
}

void GetPeersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPeersResponse_node_2eproto.base);
}

GetPeersResponse::~GetPeersResponse() {
  // @@protoc_insertion_point(destructor:pb.GetPeersResponse)
  SharedDtor();
}

void GetPeersResponse::SharedDtor() {
}

void GetPeersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPeersResponse& GetPeersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPeersResponse_node_2eproto.base);
  return *internal_default_instance();
}


void GetPeersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetPeersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetPeersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string peerIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_peerids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.GetPeersResponse.peerIDs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetPeersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string peerIDs = 1;
  for (int i = 0, n = this->_internal_peerids_size(); i < n; i++) {
    const auto& s = this->_internal_peerids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.GetPeersResponse.peerIDs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetPeersResponse)
  return target;
}

size_t GetPeersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetPeersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string peerIDs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peerids_.size());
  for (int i = 0, n = peerids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peerids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetPeersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetPeersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetPeersResponse)
    MergeFrom(*source);
  }
}

void GetPeersResponse::MergeFrom(const GetPeersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetPeersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peerids_.MergeFrom(from.peerids_);
}

void GetPeersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetPeersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeersResponse::CopyFrom(const GetPeersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetPeersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeersResponse::IsInitialized() const {
  return true;
}

void GetPeersResponse::InternalSwap(GetPeersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peerids_.InternalSwap(&other->peerids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnMgmtRequest::InitAsDefaultInstance() {
}
class ConnMgmtRequest::_Internal {
 public:
};

ConnMgmtRequest::ConnMgmtRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ConnMgmtRequest)
}
ConnMgmtRequest::ConnMgmtRequest(const ConnMgmtRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      multiaddrs_(from.multiaddrs_),
      peerids_(from.peerids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requesttype_ = from.requesttype_;
  // @@protoc_insertion_point(copy_constructor:pb.ConnMgmtRequest)
}

void ConnMgmtRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnMgmtRequest_node_2eproto.base);
  requesttype_ = 0;
}

ConnMgmtRequest::~ConnMgmtRequest() {
  // @@protoc_insertion_point(destructor:pb.ConnMgmtRequest)
  SharedDtor();
}

void ConnMgmtRequest::SharedDtor() {
}

void ConnMgmtRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnMgmtRequest& ConnMgmtRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnMgmtRequest_node_2eproto.base);
  return *internal_default_instance();
}


void ConnMgmtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ConnMgmtRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multiaddrs_.Clear();
  peerids_.Clear();
  requesttype_ = 0;
  _internal_metadata_.Clear();
}

const char* ConnMgmtRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.CONNMGMTREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::CONNMGMTREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // repeated string multiAddrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_multiaddrs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.ConnMgmtRequest.multiAddrs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string peerIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_peerids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.ConnMgmtRequest.peerIDs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnMgmtRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ConnMgmtRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CONNMGMTREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // repeated string multiAddrs = 2;
  for (int i = 0, n = this->_internal_multiaddrs_size(); i < n; i++) {
    const auto& s = this->_internal_multiaddrs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ConnMgmtRequest.multiAddrs");
    target = stream->WriteString(2, s, target);
  }

  // repeated string peerIDs = 3;
  for (int i = 0, n = this->_internal_peerids_size(); i < n; i++) {
    const auto& s = this->_internal_peerids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ConnMgmtRequest.peerIDs");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ConnMgmtRequest)
  return target;
}

size_t ConnMgmtRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ConnMgmtRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string multiAddrs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(multiaddrs_.size());
  for (int i = 0, n = multiaddrs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      multiaddrs_.Get(i));
  }

  // repeated string peerIDs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peerids_.size());
  for (int i = 0, n = peerids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peerids_.Get(i));
  }

  // .pb.CONNMGMTREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnMgmtRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ConnMgmtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnMgmtRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnMgmtRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ConnMgmtRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ConnMgmtRequest)
    MergeFrom(*source);
  }
}

void ConnMgmtRequest::MergeFrom(const ConnMgmtRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ConnMgmtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multiaddrs_.MergeFrom(from.multiaddrs_);
  peerids_.MergeFrom(from.peerids_);
  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
}

void ConnMgmtRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ConnMgmtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMgmtRequest::CopyFrom(const ConnMgmtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ConnMgmtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMgmtRequest::IsInitialized() const {
  return true;
}

void ConnMgmtRequest::InternalSwap(ConnMgmtRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  multiaddrs_.InternalSwap(&other->multiaddrs_);
  peerids_.InternalSwap(&other->peerids_);
  swap(requesttype_, other->requesttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnMgmtRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ConnMgmtResponse_ConnectedEntry_DoNotUse::ConnMgmtResponse_ConnectedEntry_DoNotUse() {}
ConnMgmtResponse_ConnectedEntry_DoNotUse::ConnMgmtResponse_ConnectedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ConnMgmtResponse_ConnectedEntry_DoNotUse::MergeFrom(const ConnMgmtResponse_ConnectedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ConnMgmtResponse_ConnectedEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ConnMgmtResponse_ConnectedEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ConnMgmtResponse_StatusEntry_DoNotUse::ConnMgmtResponse_StatusEntry_DoNotUse() {}
ConnMgmtResponse_StatusEntry_DoNotUse::ConnMgmtResponse_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ConnMgmtResponse_StatusEntry_DoNotUse::MergeFrom(const ConnMgmtResponse_StatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ConnMgmtResponse_StatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ConnMgmtResponse_StatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ConnMgmtResponse::InitAsDefaultInstance() {
}
class ConnMgmtResponse::_Internal {
 public:
};

ConnMgmtResponse::ConnMgmtResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ConnMgmtResponse)
}
ConnMgmtResponse::ConnMgmtResponse(const ConnMgmtResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peerids_(from.peerids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connected_.MergeFrom(from.connected_);
  status_.MergeFrom(from.status_);
  requesttype_ = from.requesttype_;
  // @@protoc_insertion_point(copy_constructor:pb.ConnMgmtResponse)
}

void ConnMgmtResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnMgmtResponse_node_2eproto.base);
  requesttype_ = 0;
}

ConnMgmtResponse::~ConnMgmtResponse() {
  // @@protoc_insertion_point(destructor:pb.ConnMgmtResponse)
  SharedDtor();
}

void ConnMgmtResponse::SharedDtor() {
}

void ConnMgmtResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnMgmtResponse& ConnMgmtResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnMgmtResponse_node_2eproto.base);
  return *internal_default_instance();
}


void ConnMgmtResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ConnMgmtResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connected_.Clear();
  status_.Clear();
  peerids_.Clear();
  requesttype_ = 0;
  _internal_metadata_.Clear();
}

const char* ConnMgmtResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.CONNMGMTREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::CONNMGMTREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // map<string, bool> connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&connected_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .pb.ConnMgmtStatus> status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string peerIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_peerids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.ConnMgmtResponse.peerIDs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnMgmtResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ConnMgmtResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CONNMGMTREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // map<string, bool> connected = 2;
  if (!this->_internal_connected().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb.ConnMgmtResponse.ConnectedEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_connected().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_connected().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
          it = this->_internal_connected().begin();
          it != this->_internal_connected().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ConnMgmtResponse_ConnectedEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
          it = this->_internal_connected().begin();
          it != this->_internal_connected().end(); ++it) {
        target = ConnMgmtResponse_ConnectedEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .pb.ConnMgmtStatus> status = 3;
  if (!this->_internal_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb.ConnMgmtResponse.StatusEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ConnMgmtResponse_StatusEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it) {
        target = ConnMgmtResponse_StatusEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string peerIDs = 4;
  for (int i = 0, n = this->_internal_peerids_size(); i < n; i++) {
    const auto& s = this->_internal_peerids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ConnMgmtResponse.peerIDs");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ConnMgmtResponse)
  return target;
}

size_t ConnMgmtResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ConnMgmtResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bool> connected = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_connected_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      it = this->_internal_connected().begin();
      it != this->_internal_connected().end(); ++it) {
    total_size += ConnMgmtResponse_ConnectedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .pb.ConnMgmtStatus> status = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >::const_iterator
      it = this->_internal_status().begin();
      it != this->_internal_status().end(); ++it) {
    total_size += ConnMgmtResponse_StatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string peerIDs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peerids_.size());
  for (int i = 0, n = peerids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peerids_.Get(i));
  }

  // .pb.CONNMGMTREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnMgmtResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ConnMgmtResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnMgmtResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnMgmtResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ConnMgmtResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ConnMgmtResponse)
    MergeFrom(*source);
  }
}

void ConnMgmtResponse::MergeFrom(const ConnMgmtResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ConnMgmtResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connected_.MergeFrom(from.connected_);
  status_.MergeFrom(from.status_);
  peerids_.MergeFrom(from.peerids_);
  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
}

void ConnMgmtResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ConnMgmtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMgmtResponse::CopyFrom(const ConnMgmtResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ConnMgmtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMgmtResponse::IsInitialized() const {
  return true;
}

void ConnMgmtResponse::InternalSwap(ConnMgmtResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  connected_.Swap(&other->connected_);
  status_.Swap(&other->status_);
  peerids_.InternalSwap(&other->peerids_);
  swap(requesttype_, other->requesttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnMgmtResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnMgmtStatus::InitAsDefaultInstance() {
}
class ConnMgmtStatus::_Internal {
 public:
};

ConnMgmtStatus::ConnMgmtStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ConnMgmtStatus)
}
ConnMgmtStatus::ConnMgmtStatus(const ConnMgmtStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  disconnected_ = from.disconnected_;
  // @@protoc_insertion_point(copy_constructor:pb.ConnMgmtStatus)
}

void ConnMgmtStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnMgmtStatus_node_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  disconnected_ = false;
}

ConnMgmtStatus::~ConnMgmtStatus() {
  // @@protoc_insertion_point(destructor:pb.ConnMgmtStatus)
  SharedDtor();
}

void ConnMgmtStatus::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnMgmtStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnMgmtStatus& ConnMgmtStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnMgmtStatus_node_2eproto.base);
  return *internal_default_instance();
}


void ConnMgmtStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ConnMgmtStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  disconnected_ = false;
  _internal_metadata_.Clear();
}

const char* ConnMgmtStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool disconnected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          disconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.ConnMgmtStatus.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnMgmtStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ConnMgmtStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disconnected = 1;
  if (this->disconnected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_disconnected(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ConnMgmtStatus.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ConnMgmtStatus)
  return target;
}

size_t ConnMgmtStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ConnMgmtStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // bool disconnected = 1;
  if (this->disconnected() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnMgmtStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ConnMgmtStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnMgmtStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnMgmtStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ConnMgmtStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ConnMgmtStatus)
    MergeFrom(*source);
  }
}

void ConnMgmtStatus::MergeFrom(const ConnMgmtStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ConnMgmtStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.disconnected() != 0) {
    _internal_set_disconnected(from._internal_disconnected());
  }
}

void ConnMgmtStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ConnMgmtStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMgmtStatus::CopyFrom(const ConnMgmtStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ConnMgmtStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMgmtStatus::IsInitialized() const {
  return true;
}

void ConnMgmtStatus::InternalSwap(ConnMgmtStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(disconnected_, other->disconnected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnMgmtStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtrasRequest::InitAsDefaultInstance() {
}
class ExtrasRequest::_Internal {
 public:
};

ExtrasRequest::ExtrasRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ExtrasRequest)
}
ExtrasRequest::ExtrasRequest(const ExtrasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&requesttype_, &from.requesttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&extrasfeature_) -
    reinterpret_cast<char*>(&requesttype_)) + sizeof(extrasfeature_));
  // @@protoc_insertion_point(copy_constructor:pb.ExtrasRequest)
}

void ExtrasRequest::SharedCtor() {
  ::memset(&requesttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extrasfeature_) -
      reinterpret_cast<char*>(&requesttype_)) + sizeof(extrasfeature_));
}

ExtrasRequest::~ExtrasRequest() {
  // @@protoc_insertion_point(destructor:pb.ExtrasRequest)
  SharedDtor();
}

void ExtrasRequest::SharedDtor() {
}

void ExtrasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtrasRequest& ExtrasRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtrasRequest_node_2eproto.base);
  return *internal_default_instance();
}


void ExtrasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ExtrasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&requesttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extrasfeature_) -
      reinterpret_cast<char*>(&requesttype_)) + sizeof(extrasfeature_));
  _internal_metadata_.Clear();
}

const char* ExtrasRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.EXTRASREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::EXTRASREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // .pb.EXTRASTYPE extrasFeature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_extrasfeature(static_cast<::pb::EXTRASTYPE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtrasRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ExtrasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.EXTRASREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // .pb.EXTRASTYPE extrasFeature = 2;
  if (this->extrasfeature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_extrasfeature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ExtrasRequest)
  return target;
}

size_t ExtrasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ExtrasRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.EXTRASREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  // .pb.EXTRASTYPE extrasFeature = 2;
  if (this->extrasfeature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_extrasfeature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtrasRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ExtrasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtrasRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtrasRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ExtrasRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ExtrasRequest)
    MergeFrom(*source);
  }
}

void ExtrasRequest::MergeFrom(const ExtrasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ExtrasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
  if (from.extrasfeature() != 0) {
    _internal_set_extrasfeature(from._internal_extrasfeature());
  }
}

void ExtrasRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ExtrasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtrasRequest::CopyFrom(const ExtrasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ExtrasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtrasRequest::IsInitialized() const {
  return true;
}

void ExtrasRequest::InternalSwap(ExtrasRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(requesttype_, other->requesttype_);
  swap(extrasfeature_, other->extrasfeature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtrasRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockstoreRequest::InitAsDefaultInstance() {
}
class BlockstoreRequest::_Internal {
 public:
};

BlockstoreRequest::BlockstoreRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BlockstoreRequest)
}
BlockstoreRequest::BlockstoreRequest(const BlockstoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      reqopts_(from.reqopts_),
      cids_(from.cids_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cidversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cidversion().empty()) {
    cidversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cidversion_);
  }
  hashfunc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hashfunc().empty()) {
    hashfunc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hashfunc_);
  }
  requesttype_ = from.requesttype_;
  // @@protoc_insertion_point(copy_constructor:pb.BlockstoreRequest)
}

void BlockstoreRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockstoreRequest_node_2eproto.base);
  cidversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashfunc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesttype_ = 0;
}

BlockstoreRequest::~BlockstoreRequest() {
  // @@protoc_insertion_point(destructor:pb.BlockstoreRequest)
  SharedDtor();
}

void BlockstoreRequest::SharedDtor() {
  cidversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashfunc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockstoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockstoreRequest& BlockstoreRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockstoreRequest_node_2eproto.base);
  return *internal_default_instance();
}


void BlockstoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BlockstoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reqopts_.Clear();
  cids_.Clear();
  data_.Clear();
  cidversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashfunc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesttype_ = 0;
  _internal_metadata_.Clear();
}

const char* BlockstoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.BSREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::BSREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // repeated .pb.BSREQOPTS reqOpts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_reqopts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_reqopts(static_cast<::pb::BSREQOPTS>(val));
        } else goto handle_unusual;
        continue;
      // repeated string cids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BlockstoreRequest.cids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string cidVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_cidversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BlockstoreRequest.cidVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hashFunc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_hashfunc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BlockstoreRequest.hashFunc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockstoreRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BlockstoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.BSREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // repeated .pb.BSREQOPTS reqOpts = 2;
  {
    int byte_size = _reqopts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, reqopts_, byte_size, target);
    }
  }

  // repeated string cids = 3;
  for (int i = 0, n = this->_internal_cids_size(); i < n; i++) {
    const auto& s = this->_internal_cids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BlockstoreRequest.cids");
    target = stream->WriteString(3, s, target);
  }

  // repeated bytes data = 4;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    target = stream->WriteBytes(4, s, target);
  }

  // string cidVersion = 5;
  if (this->cidversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cidversion().data(), static_cast<int>(this->_internal_cidversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BlockstoreRequest.cidVersion");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cidversion(), target);
  }

  // string hashFunc = 7;
  if (this->hashfunc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hashfunc().data(), static_cast<int>(this->_internal_hashfunc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BlockstoreRequest.hashFunc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hashfunc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BlockstoreRequest)
  return target;
}

size_t BlockstoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BlockstoreRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BSREQOPTS reqOpts = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_reqopts_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_reqopts(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _reqopts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string cids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cids_.size());
  for (int i = 0, n = cids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cids_.Get(i));
  }

  // repeated bytes data = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      data_.Get(i));
  }

  // string cidVersion = 5;
  if (this->cidversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cidversion());
  }

  // string hashFunc = 7;
  if (this->hashfunc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hashfunc());
  }

  // .pb.BSREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockstoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BlockstoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockstoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockstoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BlockstoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BlockstoreRequest)
    MergeFrom(*source);
  }
}

void BlockstoreRequest::MergeFrom(const BlockstoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BlockstoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reqopts_.MergeFrom(from.reqopts_);
  cids_.MergeFrom(from.cids_);
  data_.MergeFrom(from.data_);
  if (from.cidversion().size() > 0) {

    cidversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cidversion_);
  }
  if (from.hashfunc().size() > 0) {

    hashfunc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hashfunc_);
  }
  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
}

void BlockstoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BlockstoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockstoreRequest::CopyFrom(const BlockstoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BlockstoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockstoreRequest::IsInitialized() const {
  return true;
}

void BlockstoreRequest::InternalSwap(BlockstoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reqopts_.InternalSwap(&other->reqopts_);
  cids_.InternalSwap(&other->cids_);
  data_.InternalSwap(&other->data_);
  cidversion_.Swap(&other->cidversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashfunc_.Swap(&other->hashfunc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requesttype_, other->requesttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockstoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockstoreResponse::InitAsDefaultInstance() {
}
class BlockstoreResponse::_Internal {
 public:
};

BlockstoreResponse::BlockstoreResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BlockstoreResponse)
}
BlockstoreResponse::BlockstoreResponse(const BlockstoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requesttype_ = from.requesttype_;
  // @@protoc_insertion_point(copy_constructor:pb.BlockstoreResponse)
}

void BlockstoreResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockstoreResponse_node_2eproto.base);
  requesttype_ = 0;
}

BlockstoreResponse::~BlockstoreResponse() {
  // @@protoc_insertion_point(destructor:pb.BlockstoreResponse)
  SharedDtor();
}

void BlockstoreResponse::SharedDtor() {
}

void BlockstoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockstoreResponse& BlockstoreResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockstoreResponse_node_2eproto.base);
  return *internal_default_instance();
}


void BlockstoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BlockstoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  requesttype_ = 0;
  _internal_metadata_.Clear();
}

const char* BlockstoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.BSREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::BSREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // repeated .pb.Block blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockstoreResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BlockstoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.BSREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // repeated .pb.Block blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BlockstoreResponse)
  return target;
}

size_t BlockstoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BlockstoreResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Block blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.BSREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockstoreResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BlockstoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockstoreResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockstoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BlockstoreResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BlockstoreResponse)
    MergeFrom(*source);
  }
}

void BlockstoreResponse::MergeFrom(const BlockstoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BlockstoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
}

void BlockstoreResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BlockstoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockstoreResponse::CopyFrom(const BlockstoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BlockstoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockstoreResponse::IsInitialized() const {
  return true;
}

void BlockstoreResponse::InternalSwap(BlockstoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
  swap(requesttype_, other->requesttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockstoreResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Block::InitAsDefaultInstance() {
}
class Block::_Internal {
 public:
};

Block::Block()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.Block)
}

void Block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Block_node_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:pb.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_node_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Block.cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Block.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DagRequest_LinksEntry_DoNotUse::DagRequest_LinksEntry_DoNotUse() {}
DagRequest_LinksEntry_DoNotUse::DagRequest_LinksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DagRequest_LinksEntry_DoNotUse::MergeFrom(const DagRequest_LinksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DagRequest_LinksEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DagRequest_LinksEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DagRequest::InitAsDefaultInstance() {
}
class DagRequest::_Internal {
 public:
};

DagRequest::DagRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DagRequest)
}
DagRequest::DagRequest(const DagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  links_.MergeFrom(from.links_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  objectencoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_objectencoding().empty()) {
    objectencoding_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objectencoding_);
  }
  serializationformat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serializationformat().empty()) {
    serializationformat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serializationformat_);
  }
  hashfunc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hashfunc().empty()) {
    hashfunc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hashfunc_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  ::memcpy(&cidversion_, &from.cidversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&requesttype_) -
    reinterpret_cast<char*>(&cidversion_)) + sizeof(requesttype_));
  // @@protoc_insertion_point(copy_constructor:pb.DagRequest)
}

void DagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DagRequest_node_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectencoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serializationformat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashfunc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cidversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requesttype_) -
      reinterpret_cast<char*>(&cidversion_)) + sizeof(requesttype_));
}

DagRequest::~DagRequest() {
  // @@protoc_insertion_point(destructor:pb.DagRequest)
  SharedDtor();
}

void DagRequest::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectencoding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serializationformat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashfunc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DagRequest& DagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DagRequest_node_2eproto.base);
  return *internal_default_instance();
}


void DagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectencoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serializationformat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashfunc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cidversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requesttype_) -
      reinterpret_cast<char*>(&cidversion_)) + sizeof(requesttype_));
  _internal_metadata_.Clear();
}

const char* DagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.DAGREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::DAGREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string objectEncoding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_objectencoding();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DagRequest.objectEncoding"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serializationFormat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_serializationformat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DagRequest.serializationFormat"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hashFunc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hashfunc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DagRequest.hashFunc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cidVersion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cidversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DagRequest.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> links = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&links_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.DagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.DAGREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string objectEncoding = 3;
  if (this->objectencoding().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objectencoding().data(), static_cast<int>(this->_internal_objectencoding().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DagRequest.objectEncoding");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_objectencoding(), target);
  }

  // string serializationFormat = 4;
  if (this->serializationformat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serializationformat().data(), static_cast<int>(this->_internal_serializationformat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DagRequest.serializationFormat");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serializationformat(), target);
  }

  // string hashFunc = 5;
  if (this->hashfunc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hashfunc().data(), static_cast<int>(this->_internal_hashfunc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DagRequest.hashFunc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hashfunc(), target);
  }

  // int64 cidVersion = 6;
  if (this->cidversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_cidversion(), target);
  }

  // string hash = 7;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DagRequest.hash");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hash(), target);
  }

  // map<string, string> links = 8;
  if (!this->_internal_links().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb.DagRequest.LinksEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb.DagRequest.LinksEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_links().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_links().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_links().begin();
          it != this->_internal_links().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DagRequest_LinksEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_links().begin();
          it != this->_internal_links().end(); ++it) {
        target = DagRequest_LinksEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DagRequest)
  return target;
}

size_t DagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> links = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_links_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_links().begin();
      it != this->_internal_links().end(); ++it) {
    total_size += DagRequest_LinksEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string objectEncoding = 3;
  if (this->objectencoding().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objectencoding());
  }

  // string serializationFormat = 4;
  if (this->serializationformat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serializationformat());
  }

  // string hashFunc = 5;
  if (this->hashfunc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hashfunc());
  }

  // string hash = 7;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // int64 cidVersion = 6;
  if (this->cidversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cidversion());
  }

  // .pb.DAGREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DagRequest)
    MergeFrom(*source);
  }
}

void DagRequest::MergeFrom(const DagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.objectencoding().size() > 0) {

    objectencoding_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objectencoding_);
  }
  if (from.serializationformat().size() > 0) {

    serializationformat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serializationformat_);
  }
  if (from.hashfunc().size() > 0) {

    hashfunc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hashfunc_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.cidversion() != 0) {
    _internal_set_cidversion(from._internal_cidversion());
  }
  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
}

void DagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DagRequest::CopyFrom(const DagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DagRequest::IsInitialized() const {
  return true;
}

void DagRequest::InternalSwap(DagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  links_.Swap(&other->links_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objectencoding_.Swap(&other->objectencoding_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serializationformat_.Swap(&other->serializationformat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashfunc_.Swap(&other->hashfunc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cidversion_, other->cidversion_);
  swap(requesttype_, other->requesttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DagResponse::InitAsDefaultInstance() {
}
class DagResponse::_Internal {
 public:
};

DagResponse::DagResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DagResponse)
}
DagResponse::DagResponse(const DagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hashes_(from.hashes_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rawdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rawdata().empty()) {
    rawdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rawdata_);
  }
  requesttype_ = from.requesttype_;
  // @@protoc_insertion_point(copy_constructor:pb.DagResponse)
}

void DagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DagResponse_node_2eproto.base);
  rawdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesttype_ = 0;
}

DagResponse::~DagResponse() {
  // @@protoc_insertion_point(destructor:pb.DagResponse)
  SharedDtor();
}

void DagResponse::SharedDtor() {
  rawdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DagResponse& DagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DagResponse_node_2eproto.base);
  return *internal_default_instance();
}


void DagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  links_.Clear();
  rawdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesttype_ = 0;
  _internal_metadata_.Clear();
}

const char* DagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.DAGREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::DAGREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // repeated string hashes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DagResponse.hashes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes rawData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rawdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.IPLDLink links = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.DagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.DAGREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // repeated string hashes = 2;
  for (int i = 0, n = this->_internal_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DagResponse.hashes");
    target = stream->WriteString(2, s, target);
  }

  // bytes rawData = 3;
  if (this->rawdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rawdata(), target);
  }

  // repeated .pb.IPLDLink links = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_links(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DagResponse)
  return target;
}

size_t DagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string hashes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hashes_.size());
  for (int i = 0, n = hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      hashes_.Get(i));
  }

  // repeated .pb.IPLDLink links = 4;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes rawData = 3;
  if (this->rawdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rawdata());
  }

  // .pb.DAGREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DagResponse)
    MergeFrom(*source);
  }
}

void DagResponse::MergeFrom(const DagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  links_.MergeFrom(from.links_);
  if (from.rawdata().size() > 0) {

    rawdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rawdata_);
  }
  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
}

void DagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DagResponse::CopyFrom(const DagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DagResponse::IsInitialized() const {
  return true;
}

void DagResponse::InternalSwap(DagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hashes_.InternalSwap(&other->hashes_);
  links_.InternalSwap(&other->links_);
  rawdata_.Swap(&other->rawdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requesttype_, other->requesttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPLDLink::InitAsDefaultInstance() {
}
class IPLDLink::_Internal {
 public:
};

IPLDLink::IPLDLink()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.IPLDLink)
}
IPLDLink::IPLDLink(const IPLDLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:pb.IPLDLink)
}

void IPLDLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPLDLink_node_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_ULONGLONG(0);
}

IPLDLink::~IPLDLink() {
  // @@protoc_insertion_point(destructor:pb.IPLDLink)
  SharedDtor();
}

void IPLDLink::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPLDLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPLDLink& IPLDLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPLDLink_node_2eproto.base);
  return *internal_default_instance();
}


void IPLDLink::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.IPLDLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* IPLDLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.IPLDLink.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPLDLink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.IPLDLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.IPLDLink.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.IPLDLink)
  return target;
}

size_t IPLDLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.IPLDLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPLDLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.IPLDLink)
  GOOGLE_DCHECK_NE(&from, this);
  const IPLDLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPLDLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.IPLDLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.IPLDLink)
    MergeFrom(*source);
  }
}

void IPLDLink::MergeFrom(const IPLDLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.IPLDLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void IPLDLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.IPLDLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPLDLink::CopyFrom(const IPLDLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.IPLDLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPLDLink::IsInitialized() const {
  return true;
}

void IPLDLink::InternalSwap(IPLDLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPLDLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPLDNode::InitAsDefaultInstance() {
}
class IPLDNode::_Internal {
 public:
};

IPLDNode::IPLDNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.IPLDNode)
}
IPLDNode::IPLDNode(const IPLDNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.IPLDNode)
}

void IPLDNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPLDNode_node_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IPLDNode::~IPLDNode() {
  // @@protoc_insertion_point(destructor:pb.IPLDNode)
  SharedDtor();
}

void IPLDNode::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPLDNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPLDNode& IPLDNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPLDNode_node_2eproto.base);
  return *internal_default_instance();
}


void IPLDNode::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.IPLDNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* IPLDNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.IPLDLink links = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPLDNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.IPLDNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // repeated .pb.IPLDLink links = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_links(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.IPLDNode)
  return target;
}

size_t IPLDNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.IPLDNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.IPLDLink links = 2;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPLDNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.IPLDNode)
  GOOGLE_DCHECK_NE(&from, this);
  const IPLDNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPLDNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.IPLDNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.IPLDNode)
    MergeFrom(*source);
  }
}

void IPLDNode::MergeFrom(const IPLDNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.IPLDNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void IPLDNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.IPLDNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPLDNode::CopyFrom(const IPLDNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.IPLDNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPLDNode::IsInitialized() const {
  return true;
}

void IPLDNode::InternalSwap(IPLDNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  links_.InternalSwap(&other->links_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata IPLDNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeystoreRequest::InitAsDefaultInstance() {
}
class KeystoreRequest::_Internal {
 public:
};

KeystoreRequest::KeystoreRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.KeystoreRequest)
}
KeystoreRequest::KeystoreRequest(const KeystoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_privatekey().empty()) {
    privatekey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.privatekey_);
  }
  requesttype_ = from.requesttype_;
  // @@protoc_insertion_point(copy_constructor:pb.KeystoreRequest)
}

void KeystoreRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeystoreRequest_node_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesttype_ = 0;
}

KeystoreRequest::~KeystoreRequest() {
  // @@protoc_insertion_point(destructor:pb.KeystoreRequest)
  SharedDtor();
}

void KeystoreRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privatekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeystoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeystoreRequest& KeystoreRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeystoreRequest_node_2eproto.base);
  return *internal_default_instance();
}


void KeystoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.KeystoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privatekey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesttype_ = 0;
  _internal_metadata_.Clear();
}

const char* KeystoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.KSREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::KSREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.KeystoreRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes privateKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_privatekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeystoreRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.KeystoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.KSREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.KeystoreRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes privateKey = 3;
  if (this->privatekey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_privatekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.KeystoreRequest)
  return target;
}

size_t KeystoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.KeystoreRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes privateKey = 3;
  if (this->privatekey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_privatekey());
  }

  // .pb.KSREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeystoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.KeystoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KeystoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeystoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.KeystoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.KeystoreRequest)
    MergeFrom(*source);
  }
}

void KeystoreRequest::MergeFrom(const KeystoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.KeystoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.privatekey().size() > 0) {

    privatekey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.privatekey_);
  }
  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
}

void KeystoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.KeystoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeystoreRequest::CopyFrom(const KeystoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.KeystoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystoreRequest::IsInitialized() const {
  return true;
}

void KeystoreRequest::InternalSwap(KeystoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  privatekey_.Swap(&other->privatekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requesttype_, other->requesttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeystoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeystoreResponse::InitAsDefaultInstance() {
}
class KeystoreResponse::_Internal {
 public:
};

KeystoreResponse::KeystoreResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.KeystoreResponse)
}
KeystoreResponse::KeystoreResponse(const KeystoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keynames_(from.keynames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_privatekey().empty()) {
    privatekey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.privatekey_);
  }
  ::memcpy(&requesttype_, &from.requesttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_) -
    reinterpret_cast<char*>(&requesttype_)) + sizeof(has_));
  // @@protoc_insertion_point(copy_constructor:pb.KeystoreResponse)
}

void KeystoreResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeystoreResponse_node_2eproto.base);
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&requesttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_) -
      reinterpret_cast<char*>(&requesttype_)) + sizeof(has_));
}

KeystoreResponse::~KeystoreResponse() {
  // @@protoc_insertion_point(destructor:pb.KeystoreResponse)
  SharedDtor();
}

void KeystoreResponse::SharedDtor() {
  privatekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeystoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeystoreResponse& KeystoreResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeystoreResponse_node_2eproto.base);
  return *internal_default_instance();
}


void KeystoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.KeystoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keynames_.Clear();
  privatekey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&requesttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_) -
      reinterpret_cast<char*>(&requesttype_)) + sizeof(has_));
  _internal_metadata_.Clear();
}

const char* KeystoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.KSREQTYPE requestType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requesttype(static_cast<::pb::KSREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      // bytes privateKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_privatekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string keyNames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keynames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.KeystoreResponse.keyNames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool has = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          has_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeystoreResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.KeystoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.KSREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requesttype(), target);
  }

  // bytes privateKey = 2;
  if (this->privatekey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_privatekey(), target);
  }

  // repeated string keyNames = 3;
  for (int i = 0, n = this->_internal_keynames_size(); i < n; i++) {
    const auto& s = this->_internal_keynames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.KeystoreResponse.keyNames");
    target = stream->WriteString(3, s, target);
  }

  // bool has = 4;
  if (this->has() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.KeystoreResponse)
  return target;
}

size_t KeystoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.KeystoreResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keyNames = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keynames_.size());
  for (int i = 0, n = keynames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keynames_.Get(i));
  }

  // bytes privateKey = 2;
  if (this->privatekey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_privatekey());
  }

  // .pb.KSREQTYPE requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requesttype());
  }

  // bool has = 4;
  if (this->has() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeystoreResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.KeystoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KeystoreResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeystoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.KeystoreResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.KeystoreResponse)
    MergeFrom(*source);
  }
}

void KeystoreResponse::MergeFrom(const KeystoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.KeystoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keynames_.MergeFrom(from.keynames_);
  if (from.privatekey().size() > 0) {

    privatekey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.privatekey_);
  }
  if (from.requesttype() != 0) {
    _internal_set_requesttype(from._internal_requesttype());
  }
  if (from.has() != 0) {
    _internal_set_has(from._internal_has());
  }
}

void KeystoreResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.KeystoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeystoreResponse::CopyFrom(const KeystoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.KeystoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystoreResponse::IsInitialized() const {
  return true;
}

void KeystoreResponse::InternalSwap(KeystoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keynames_.InternalSwap(&other->keynames_);
  privatekey_.Swap(&other->privatekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requesttype_, other->requesttype_);
  swap(has_, other->has_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeystoreResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PersistRequest::InitAsDefaultInstance() {
}
class PersistRequest::_Internal {
 public:
};

PersistRequest::PersistRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PersistRequest)
}
PersistRequest::PersistRequest(const PersistRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cids_(from.cids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.PersistRequest)
}

void PersistRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistRequest_node_2eproto.base);
}

PersistRequest::~PersistRequest() {
  // @@protoc_insertion_point(destructor:pb.PersistRequest)
  SharedDtor();
}

void PersistRequest::SharedDtor() {
}

void PersistRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistRequest& PersistRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistRequest_node_2eproto.base);
  return *internal_default_instance();
}


void PersistRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PersistRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cids_.Clear();
  _internal_metadata_.Clear();
}

const char* PersistRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string cids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PersistRequest.cids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PersistRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string cids = 1;
  for (int i = 0, n = this->_internal_cids_size(); i < n; i++) {
    const auto& s = this->_internal_cids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PersistRequest.cids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PersistRequest)
  return target;
}

size_t PersistRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PersistRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cids_.size());
  for (int i = 0, n = cids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PersistRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PersistRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PersistRequest)
    MergeFrom(*source);
  }
}

void PersistRequest::MergeFrom(const PersistRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PersistRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cids_.MergeFrom(from.cids_);
}

void PersistRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PersistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistRequest::CopyFrom(const PersistRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PersistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistRequest::IsInitialized() const {
  return true;
}

void PersistRequest::InternalSwap(PersistRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cids_.InternalSwap(&other->cids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PersistResponse_StatusEntry_DoNotUse::PersistResponse_StatusEntry_DoNotUse() {}
PersistResponse_StatusEntry_DoNotUse::PersistResponse_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PersistResponse_StatusEntry_DoNotUse::MergeFrom(const PersistResponse_StatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PersistResponse_StatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PersistResponse_StatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

PersistResponse_ErrorsEntry_DoNotUse::PersistResponse_ErrorsEntry_DoNotUse() {}
PersistResponse_ErrorsEntry_DoNotUse::PersistResponse_ErrorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PersistResponse_ErrorsEntry_DoNotUse::MergeFrom(const PersistResponse_ErrorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PersistResponse_ErrorsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PersistResponse_ErrorsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PersistResponse::InitAsDefaultInstance() {
}
class PersistResponse::_Internal {
 public:
};

PersistResponse::PersistResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PersistResponse)
}
PersistResponse::PersistResponse(const PersistResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.MergeFrom(from.status_);
  errors_.MergeFrom(from.errors_);
  // @@protoc_insertion_point(copy_constructor:pb.PersistResponse)
}

void PersistResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistResponse_node_2eproto.base);
}

PersistResponse::~PersistResponse() {
  // @@protoc_insertion_point(destructor:pb.PersistResponse)
  SharedDtor();
}

void PersistResponse::SharedDtor() {
}

void PersistResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistResponse& PersistResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistResponse_node_2eproto.base);
  return *internal_default_instance();
}


void PersistResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PersistResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.Clear();
  errors_.Clear();
  _internal_metadata_.Clear();
}

const char* PersistResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, bool> status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&errors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PersistResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bool> status = 1;
  if (!this->_internal_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb.PersistResponse.StatusEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PersistResponse_StatusEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
          it = this->_internal_status().begin();
          it != this->_internal_status().end(); ++it) {
        target = PersistResponse_StatusEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> errors = 2;
  if (!this->_internal_errors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb.PersistResponse.ErrorsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb.PersistResponse.ErrorsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_errors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_errors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_errors().begin();
          it != this->_internal_errors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PersistResponse_ErrorsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_errors().begin();
          it != this->_internal_errors().end(); ++it) {
        target = PersistResponse_ErrorsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PersistResponse)
  return target;
}

size_t PersistResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PersistResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bool> status = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      it = this->_internal_status().begin();
      it != this->_internal_status().end(); ++it) {
    total_size += PersistResponse_StatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> errors = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_errors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_errors().begin();
      it != this->_internal_errors().end(); ++it) {
    total_size += PersistResponse_ErrorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PersistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PersistResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PersistResponse)
    MergeFrom(*source);
  }
}

void PersistResponse::MergeFrom(const PersistResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PersistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
  errors_.MergeFrom(from.errors_);
}

void PersistResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PersistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistResponse::CopyFrom(const PersistResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PersistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistResponse::IsInitialized() const {
  return true;
}

void PersistResponse::InternalSwap(PersistResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_);
  errors_.Swap(&other->errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::P2PRequest* Arena::CreateMaybeMessage< ::pb::P2PRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::P2PRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::P2PResponse* Arena::CreateMaybeMessage< ::pb::P2PResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::P2PResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::P2PLsInfo* Arena::CreateMaybeMessage< ::pb::P2PLsInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::P2PLsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetPeersResponse* Arena::CreateMaybeMessage< ::pb::GetPeersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::GetPeersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ConnMgmtRequest* Arena::CreateMaybeMessage< ::pb::ConnMgmtRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ConnMgmtRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ConnMgmtResponse_StatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::ConnMgmtResponse_StatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ConnMgmtResponse_StatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ConnMgmtResponse* Arena::CreateMaybeMessage< ::pb::ConnMgmtResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ConnMgmtResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ConnMgmtStatus* Arena::CreateMaybeMessage< ::pb::ConnMgmtStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ConnMgmtStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ExtrasRequest* Arena::CreateMaybeMessage< ::pb::ExtrasRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ExtrasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BlockstoreRequest* Arena::CreateMaybeMessage< ::pb::BlockstoreRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BlockstoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BlockstoreResponse* Arena::CreateMaybeMessage< ::pb::BlockstoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BlockstoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Block* Arena::CreateMaybeMessage< ::pb::Block >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::DagRequest_LinksEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::DagRequest_LinksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::DagRequest_LinksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::DagRequest* Arena::CreateMaybeMessage< ::pb::DagRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::DagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::DagResponse* Arena::CreateMaybeMessage< ::pb::DagResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::DagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::IPLDLink* Arena::CreateMaybeMessage< ::pb::IPLDLink >(Arena* arena) {
  return Arena::CreateInternal< ::pb::IPLDLink >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::IPLDNode* Arena::CreateMaybeMessage< ::pb::IPLDNode >(Arena* arena) {
  return Arena::CreateInternal< ::pb::IPLDNode >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::KeystoreRequest* Arena::CreateMaybeMessage< ::pb::KeystoreRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::KeystoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::KeystoreResponse* Arena::CreateMaybeMessage< ::pb::KeystoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::KeystoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PersistRequest* Arena::CreateMaybeMessage< ::pb::PersistRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PersistRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PersistResponse_StatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::PersistResponse_StatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PersistResponse_StatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PersistResponse_ErrorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::PersistResponse_ErrorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PersistResponse_ErrorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PersistResponse* Arena::CreateMaybeMessage< ::pb::PersistResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::PersistResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
