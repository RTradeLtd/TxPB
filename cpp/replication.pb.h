// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_replication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_replication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_replication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_replication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_replication_2eproto;
namespace pb {
class AddrInfo;
class AddrInfoDefaultTypeInternal;
extern AddrInfoDefaultTypeInternal _AddrInfo_default_instance_;
class Replication;
class ReplicationDefaultTypeInternal;
extern ReplicationDefaultTypeInternal _Replication_default_instance_;
class ReplicationStatus;
class ReplicationStatusDefaultTypeInternal;
extern ReplicationStatusDefaultTypeInternal _ReplicationStatus_default_instance_;
class ServerSource;
class ServerSourceDefaultTypeInternal;
extern ServerSourceDefaultTypeInternal _ServerSource_default_instance_;
class SignedSubscription;
class SignedSubscriptionDefaultTypeInternal;
extern SignedSubscriptionDefaultTypeInternal _SignedSubscription_default_instance_;
class Subscription;
class SubscriptionDefaultTypeInternal;
extern SubscriptionDefaultTypeInternal _Subscription_default_instance_;
class SubscriptionUpdate;
class SubscriptionUpdateDefaultTypeInternal;
extern SubscriptionUpdateDefaultTypeInternal _SubscriptionUpdate_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::AddrInfo* Arena::CreateMaybeMessage<::pb::AddrInfo>(Arena*);
template<> ::pb::Replication* Arena::CreateMaybeMessage<::pb::Replication>(Arena*);
template<> ::pb::ReplicationStatus* Arena::CreateMaybeMessage<::pb::ReplicationStatus>(Arena*);
template<> ::pb::ServerSource* Arena::CreateMaybeMessage<::pb::ServerSource>(Arena*);
template<> ::pb::SignedSubscription* Arena::CreateMaybeMessage<::pb::SignedSubscription>(Arena*);
template<> ::pb::Subscription* Arena::CreateMaybeMessage<::pb::Subscription>(Arena*);
template<> ::pb::SubscriptionUpdate* Arena::CreateMaybeMessage<::pb::SubscriptionUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class Replication :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Replication) */ {
 public:
  Replication();
  virtual ~Replication();

  Replication(const Replication& from);
  Replication(Replication&& from) noexcept
    : Replication() {
    *this = ::std::move(from);
  }

  inline Replication& operator=(const Replication& from) {
    CopyFrom(from);
    return *this;
  }
  inline Replication& operator=(Replication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Replication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Replication* internal_default_instance() {
    return reinterpret_cast<const Replication*>(
               &_Replication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Replication& a, Replication& b) {
    a.Swap(&b);
  }
  inline void Swap(Replication* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Replication* New() const final {
    return CreateMaybeMessage<Replication>(nullptr);
  }

  Replication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Replication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Replication& from);
  void MergeFrom(const Replication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Replication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Replication";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_replication_2eproto);
    return ::descriptor_table_replication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidsBytesFieldNumber = 2,
    kServersFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kReplicationFactorFieldNumber = 4,
    kRefreshIntervalSecondsFieldNumber = 5,
    kServerDownDelaySecondsFieldNumber = 6,
  };
  // repeated bytes cids_bytes = 2;
  int cids_bytes_size() const;
  private:
  int _internal_cids_bytes_size() const;
  public:
  void clear_cids_bytes();
  const std::string& cids_bytes(int index) const;
  std::string* mutable_cids_bytes(int index);
  void set_cids_bytes(int index, const std::string& value);
  void set_cids_bytes(int index, std::string&& value);
  void set_cids_bytes(int index, const char* value);
  void set_cids_bytes(int index, const void* value, size_t size);
  std::string* add_cids_bytes();
  void add_cids_bytes(const std::string& value);
  void add_cids_bytes(std::string&& value);
  void add_cids_bytes(const char* value);
  void add_cids_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cids_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cids_bytes();
  private:
  const std::string& _internal_cids_bytes(int index) const;
  std::string* _internal_add_cids_bytes();
  public:

  // repeated .pb.ServerSource servers = 3;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::pb::ServerSource* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ServerSource >*
      mutable_servers();
  private:
  const ::pb::ServerSource& _internal_servers(int index) const;
  ::pb::ServerSource* _internal_add_servers();
  public:
  const ::pb::ServerSource& servers(int index) const;
  ::pb::ServerSource* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ServerSource >&
      servers() const;

  // string header = 1;
  void clear_header();
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const char* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // int32 replication_factor = 4;
  void clear_replication_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 replication_factor() const;
  void set_replication_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_replication_factor() const;
  void _internal_set_replication_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 refresh_interval_seconds = 5;
  void clear_refresh_interval_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 refresh_interval_seconds() const;
  void set_refresh_interval_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refresh_interval_seconds() const;
  void _internal_set_refresh_interval_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_down_delay_seconds = 6;
  void clear_server_down_delay_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 server_down_delay_seconds() const;
  void set_server_down_delay_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_down_delay_seconds() const;
  void _internal_set_server_down_delay_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Replication)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cids_bytes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ServerSource > servers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::int32 replication_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 refresh_interval_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_down_delay_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class ServerSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ServerSource) */ {
 public:
  ServerSource();
  virtual ~ServerSource();

  ServerSource(const ServerSource& from);
  ServerSource(ServerSource&& from) noexcept
    : ServerSource() {
    *this = ::std::move(from);
  }

  inline ServerSource& operator=(const ServerSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerSource& operator=(ServerSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerSource* internal_default_instance() {
    return reinterpret_cast<const ServerSource*>(
               &_ServerSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerSource& a, ServerSource& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerSource* New() const final {
    return CreateMaybeMessage<ServerSource>(nullptr);
  }

  ServerSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerSource& from);
  void MergeFrom(const ServerSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ServerSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_replication_2eproto);
    return ::descriptor_table_replication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrInfoFieldNumber = 1,
  };
  // .pb.AddrInfo addr_info = 1;
  bool has_addr_info() const;
  private:
  bool _internal_has_addr_info() const;
  public:
  void clear_addr_info();
  const ::pb::AddrInfo& addr_info() const;
  ::pb::AddrInfo* release_addr_info();
  ::pb::AddrInfo* mutable_addr_info();
  void set_allocated_addr_info(::pb::AddrInfo* addr_info);
  private:
  const ::pb::AddrInfo& _internal_addr_info() const;
  ::pb::AddrInfo* _internal_mutable_addr_info();
  public:

  // @@protoc_insertion_point(class_scope:pb.ServerSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::AddrInfo* addr_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class AddrInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.AddrInfo) */ {
 public:
  AddrInfo();
  virtual ~AddrInfo();

  AddrInfo(const AddrInfo& from);
  AddrInfo(AddrInfo&& from) noexcept
    : AddrInfo() {
    *this = ::std::move(from);
  }

  inline AddrInfo& operator=(const AddrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddrInfo& operator=(AddrInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddrInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddrInfo* internal_default_instance() {
    return reinterpret_cast<const AddrInfo*>(
               &_AddrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddrInfo& a, AddrInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AddrInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddrInfo* New() const final {
    return CreateMaybeMessage<AddrInfo>(nullptr);
  }

  AddrInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddrInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddrInfo& from);
  void MergeFrom(const AddrInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddrInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.AddrInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_replication_2eproto);
    return ::descriptor_table_replication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrsBytesFieldNumber = 2,
    kIdBytesFieldNumber = 1,
    kGrpcPortFieldNumber = 3,
  };
  // repeated bytes addrs_bytes = 2;
  int addrs_bytes_size() const;
  private:
  int _internal_addrs_bytes_size() const;
  public:
  void clear_addrs_bytes();
  const std::string& addrs_bytes(int index) const;
  std::string* mutable_addrs_bytes(int index);
  void set_addrs_bytes(int index, const std::string& value);
  void set_addrs_bytes(int index, std::string&& value);
  void set_addrs_bytes(int index, const char* value);
  void set_addrs_bytes(int index, const void* value, size_t size);
  std::string* add_addrs_bytes();
  void add_addrs_bytes(const std::string& value);
  void add_addrs_bytes(std::string&& value);
  void add_addrs_bytes(const char* value);
  void add_addrs_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addrs_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addrs_bytes();
  private:
  const std::string& _internal_addrs_bytes(int index) const;
  std::string* _internal_add_addrs_bytes();
  public:

  // bytes id_bytes = 1;
  void clear_id_bytes();
  const std::string& id_bytes() const;
  void set_id_bytes(const std::string& value);
  void set_id_bytes(std::string&& value);
  void set_id_bytes(const char* value);
  void set_id_bytes(const void* value, size_t size);
  std::string* mutable_id_bytes();
  std::string* release_id_bytes();
  void set_allocated_id_bytes(std::string* id_bytes);
  private:
  const std::string& _internal_id_bytes() const;
  void _internal_set_id_bytes(const std::string& value);
  std::string* _internal_mutable_id_bytes();
  public:

  // int32 grpc_port = 3;
  void clear_grpc_port();
  ::PROTOBUF_NAMESPACE_ID::int32 grpc_port() const;
  void set_grpc_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpc_port() const;
  void _internal_set_grpc_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.AddrInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addrs_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpc_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class Subscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Subscription) */ {
 public:
  Subscription();
  virtual ~Subscription();

  Subscription(const Subscription& from);
  Subscription(Subscription&& from) noexcept
    : Subscription() {
    *this = ::std::move(from);
  }

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscription& operator=(Subscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Subscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscription* internal_default_instance() {
    return reinterpret_cast<const Subscription*>(
               &_Subscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Subscription& a, Subscription& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subscription* New() const final {
    return CreateMaybeMessage<Subscription>(nullptr);
  }

  Subscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subscription& from);
  void MergeFrom(const Subscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Subscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_replication_2eproto);
    return ::descriptor_table_replication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kAuthorIdBytesFieldNumber = 2,
    kRemoveFieldNumber = 3,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // bytes author_id_bytes = 2;
  void clear_author_id_bytes();
  const std::string& author_id_bytes() const;
  void set_author_id_bytes(const std::string& value);
  void set_author_id_bytes(std::string&& value);
  void set_author_id_bytes(const char* value);
  void set_author_id_bytes(const void* value, size_t size);
  std::string* mutable_author_id_bytes();
  std::string* release_author_id_bytes();
  void set_allocated_author_id_bytes(std::string* author_id_bytes);
  private:
  const std::string& _internal_author_id_bytes() const;
  void _internal_set_author_id_bytes(const std::string& value);
  std::string* _internal_mutable_author_id_bytes();
  public:

  // bool remove = 3;
  void clear_remove();
  bool remove() const;
  void set_remove(bool value);
  private:
  bool _internal_remove() const;
  void _internal_set_remove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Subscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_id_bytes_;
  bool remove_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class ReplicationStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ReplicationStatus) */ {
 public:
  ReplicationStatus();
  virtual ~ReplicationStatus();

  ReplicationStatus(const ReplicationStatus& from);
  ReplicationStatus(ReplicationStatus&& from) noexcept
    : ReplicationStatus() {
    *this = ::std::move(from);
  }

  inline ReplicationStatus& operator=(const ReplicationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicationStatus& operator=(ReplicationStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplicationStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplicationStatus* internal_default_instance() {
    return reinterpret_cast<const ReplicationStatus*>(
               &_ReplicationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReplicationStatus& a, ReplicationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicationStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicationStatus* New() const final {
    return CreateMaybeMessage<ReplicationStatus>(nullptr);
  }

  ReplicationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicationStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicationStatus& from);
  void MergeFrom(const ReplicationStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicationStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ReplicationStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_replication_2eproto);
    return ::descriptor_table_replication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentVersionFieldNumber = 3,
    kTargetVersionFieldNumber = 4,
    kOkFieldNumber = 1,
    kIsActiveFieldNumber = 2,
  };
  // int64 current_version = 3;
  void clear_current_version();
  ::PROTOBUF_NAMESPACE_ID::int64 current_version() const;
  void set_current_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_current_version() const;
  void _internal_set_current_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 target_version = 4;
  void clear_target_version();
  ::PROTOBUF_NAMESPACE_ID::int64 target_version() const;
  void set_target_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_target_version() const;
  void _internal_set_target_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // bool is_active = 2;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ReplicationStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 current_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_version_;
  bool ok_;
  bool is_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SubscriptionUpdate) */ {
 public:
  SubscriptionUpdate();
  virtual ~SubscriptionUpdate();

  SubscriptionUpdate(const SubscriptionUpdate& from);
  SubscriptionUpdate(SubscriptionUpdate&& from) noexcept
    : SubscriptionUpdate() {
    *this = ::std::move(from);
  }

  inline SubscriptionUpdate& operator=(const SubscriptionUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionUpdate& operator=(SubscriptionUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriptionUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionUpdate* internal_default_instance() {
    return reinterpret_cast<const SubscriptionUpdate*>(
               &_SubscriptionUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SubscriptionUpdate& a, SubscriptionUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionUpdate* New() const final {
    return CreateMaybeMessage<SubscriptionUpdate>(nullptr);
  }

  SubscriptionUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriptionUpdate& from);
  void MergeFrom(const SubscriptionUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SubscriptionUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_replication_2eproto);
    return ::descriptor_table_replication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicationBytesFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // bytes replication_bytes = 2;
  void clear_replication_bytes();
  const std::string& replication_bytes() const;
  void set_replication_bytes(const std::string& value);
  void set_replication_bytes(std::string&& value);
  void set_replication_bytes(const char* value);
  void set_replication_bytes(const void* value, size_t size);
  std::string* mutable_replication_bytes();
  std::string* release_replication_bytes();
  void set_allocated_replication_bytes(std::string* replication_bytes);
  private:
  const std::string& _internal_replication_bytes() const;
  void _internal_set_replication_bytes(const std::string& value);
  std::string* _internal_mutable_replication_bytes();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // int64 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SubscriptionUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replication_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class SignedSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SignedSubscription) */ {
 public:
  SignedSubscription();
  virtual ~SignedSubscription();

  SignedSubscription(const SignedSubscription& from);
  SignedSubscription(SignedSubscription&& from) noexcept
    : SignedSubscription() {
    *this = ::std::move(from);
  }

  inline SignedSubscription& operator=(const SignedSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedSubscription& operator=(SignedSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignedSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedSubscription* internal_default_instance() {
    return reinterpret_cast<const SignedSubscription*>(
               &_SignedSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SignedSubscription& a, SignedSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignedSubscription* New() const final {
    return CreateMaybeMessage<SignedSubscription>(nullptr);
  }

  SignedSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignedSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignedSubscription& from);
  void MergeFrom(const SignedSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SignedSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_replication_2eproto);
    return ::descriptor_table_replication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubPartFieldNumber = 1,
    kUpdatePartFieldNumber = 2,
  };
  // .pb.Subscription sub_part = 1;
  bool has_sub_part() const;
  private:
  bool _internal_has_sub_part() const;
  public:
  void clear_sub_part();
  const ::pb::Subscription& sub_part() const;
  ::pb::Subscription* release_sub_part();
  ::pb::Subscription* mutable_sub_part();
  void set_allocated_sub_part(::pb::Subscription* sub_part);
  private:
  const ::pb::Subscription& _internal_sub_part() const;
  ::pb::Subscription* _internal_mutable_sub_part();
  public:

  // .pb.SubscriptionUpdate update_part = 2;
  bool has_update_part() const;
  private:
  bool _internal_has_update_part() const;
  public:
  void clear_update_part();
  const ::pb::SubscriptionUpdate& update_part() const;
  ::pb::SubscriptionUpdate* release_update_part();
  ::pb::SubscriptionUpdate* mutable_update_part();
  void set_allocated_update_part(::pb::SubscriptionUpdate* update_part);
  private:
  const ::pb::SubscriptionUpdate& _internal_update_part() const;
  ::pb::SubscriptionUpdate* _internal_mutable_update_part();
  public:

  // @@protoc_insertion_point(class_scope:pb.SignedSubscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Subscription* sub_part_;
  ::pb::SubscriptionUpdate* update_part_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Replication

// string header = 1;
inline void Replication::clear_header() {
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Replication::header() const {
  // @@protoc_insertion_point(field_get:pb.Replication.header)
  return _internal_header();
}
inline void Replication::set_header(const std::string& value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:pb.Replication.header)
}
inline std::string* Replication::mutable_header() {
  // @@protoc_insertion_point(field_mutable:pb.Replication.header)
  return _internal_mutable_header();
}
inline const std::string& Replication::_internal_header() const {
  return header_.GetNoArena();
}
inline void Replication::_internal_set_header(const std::string& value) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Replication::set_header(std::string&& value) {
  
  header_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Replication.header)
}
inline void Replication::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Replication.header)
}
inline void Replication::set_header(const char* value, size_t size) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Replication.header)
}
inline std::string* Replication::_internal_mutable_header() {
  
  return header_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Replication::release_header() {
  // @@protoc_insertion_point(field_release:pb.Replication.header)
  
  return header_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Replication::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:pb.Replication.header)
}

// repeated bytes cids_bytes = 2;
inline int Replication::_internal_cids_bytes_size() const {
  return cids_bytes_.size();
}
inline int Replication::cids_bytes_size() const {
  return _internal_cids_bytes_size();
}
inline void Replication::clear_cids_bytes() {
  cids_bytes_.Clear();
}
inline std::string* Replication::add_cids_bytes() {
  // @@protoc_insertion_point(field_add_mutable:pb.Replication.cids_bytes)
  return _internal_add_cids_bytes();
}
inline const std::string& Replication::_internal_cids_bytes(int index) const {
  return cids_bytes_.Get(index);
}
inline const std::string& Replication::cids_bytes(int index) const {
  // @@protoc_insertion_point(field_get:pb.Replication.cids_bytes)
  return _internal_cids_bytes(index);
}
inline std::string* Replication::mutable_cids_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Replication.cids_bytes)
  return cids_bytes_.Mutable(index);
}
inline void Replication::set_cids_bytes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.Replication.cids_bytes)
  cids_bytes_.Mutable(index)->assign(value);
}
inline void Replication::set_cids_bytes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.Replication.cids_bytes)
  cids_bytes_.Mutable(index)->assign(std::move(value));
}
inline void Replication::set_cids_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cids_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Replication.cids_bytes)
}
inline void Replication::set_cids_bytes(int index, const void* value, size_t size) {
  cids_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Replication.cids_bytes)
}
inline std::string* Replication::_internal_add_cids_bytes() {
  return cids_bytes_.Add();
}
inline void Replication::add_cids_bytes(const std::string& value) {
  cids_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Replication.cids_bytes)
}
inline void Replication::add_cids_bytes(std::string&& value) {
  cids_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Replication.cids_bytes)
}
inline void Replication::add_cids_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cids_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Replication.cids_bytes)
}
inline void Replication::add_cids_bytes(const void* value, size_t size) {
  cids_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Replication.cids_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Replication::cids_bytes() const {
  // @@protoc_insertion_point(field_list:pb.Replication.cids_bytes)
  return cids_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Replication::mutable_cids_bytes() {
  // @@protoc_insertion_point(field_mutable_list:pb.Replication.cids_bytes)
  return &cids_bytes_;
}

// repeated .pb.ServerSource servers = 3;
inline int Replication::_internal_servers_size() const {
  return servers_.size();
}
inline int Replication::servers_size() const {
  return _internal_servers_size();
}
inline void Replication::clear_servers() {
  servers_.Clear();
}
inline ::pb::ServerSource* Replication::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Replication.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ServerSource >*
Replication::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:pb.Replication.servers)
  return &servers_;
}
inline const ::pb::ServerSource& Replication::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::pb::ServerSource& Replication::servers(int index) const {
  // @@protoc_insertion_point(field_get:pb.Replication.servers)
  return _internal_servers(index);
}
inline ::pb::ServerSource* Replication::_internal_add_servers() {
  return servers_.Add();
}
inline ::pb::ServerSource* Replication::add_servers() {
  // @@protoc_insertion_point(field_add:pb.Replication.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ServerSource >&
Replication::servers() const {
  // @@protoc_insertion_point(field_list:pb.Replication.servers)
  return servers_;
}

// int32 replication_factor = 4;
inline void Replication::clear_replication_factor() {
  replication_factor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Replication::_internal_replication_factor() const {
  return replication_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Replication::replication_factor() const {
  // @@protoc_insertion_point(field_get:pb.Replication.replication_factor)
  return _internal_replication_factor();
}
inline void Replication::_internal_set_replication_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  replication_factor_ = value;
}
inline void Replication::set_replication_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_replication_factor(value);
  // @@protoc_insertion_point(field_set:pb.Replication.replication_factor)
}

// int32 refresh_interval_seconds = 5;
inline void Replication::clear_refresh_interval_seconds() {
  refresh_interval_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Replication::_internal_refresh_interval_seconds() const {
  return refresh_interval_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Replication::refresh_interval_seconds() const {
  // @@protoc_insertion_point(field_get:pb.Replication.refresh_interval_seconds)
  return _internal_refresh_interval_seconds();
}
inline void Replication::_internal_set_refresh_interval_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  refresh_interval_seconds_ = value;
}
inline void Replication::set_refresh_interval_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refresh_interval_seconds(value);
  // @@protoc_insertion_point(field_set:pb.Replication.refresh_interval_seconds)
}

// int32 server_down_delay_seconds = 6;
inline void Replication::clear_server_down_delay_seconds() {
  server_down_delay_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Replication::_internal_server_down_delay_seconds() const {
  return server_down_delay_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Replication::server_down_delay_seconds() const {
  // @@protoc_insertion_point(field_get:pb.Replication.server_down_delay_seconds)
  return _internal_server_down_delay_seconds();
}
inline void Replication::_internal_set_server_down_delay_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_down_delay_seconds_ = value;
}
inline void Replication::set_server_down_delay_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_down_delay_seconds(value);
  // @@protoc_insertion_point(field_set:pb.Replication.server_down_delay_seconds)
}

// -------------------------------------------------------------------

// ServerSource

// .pb.AddrInfo addr_info = 1;
inline bool ServerSource::_internal_has_addr_info() const {
  return this != internal_default_instance() && addr_info_ != nullptr;
}
inline bool ServerSource::has_addr_info() const {
  return _internal_has_addr_info();
}
inline void ServerSource::clear_addr_info() {
  if (GetArenaNoVirtual() == nullptr && addr_info_ != nullptr) {
    delete addr_info_;
  }
  addr_info_ = nullptr;
}
inline const ::pb::AddrInfo& ServerSource::_internal_addr_info() const {
  const ::pb::AddrInfo* p = addr_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::AddrInfo*>(
      &::pb::_AddrInfo_default_instance_);
}
inline const ::pb::AddrInfo& ServerSource::addr_info() const {
  // @@protoc_insertion_point(field_get:pb.ServerSource.addr_info)
  return _internal_addr_info();
}
inline ::pb::AddrInfo* ServerSource::release_addr_info() {
  // @@protoc_insertion_point(field_release:pb.ServerSource.addr_info)
  
  ::pb::AddrInfo* temp = addr_info_;
  addr_info_ = nullptr;
  return temp;
}
inline ::pb::AddrInfo* ServerSource::_internal_mutable_addr_info() {
  
  if (addr_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::AddrInfo>(GetArenaNoVirtual());
    addr_info_ = p;
  }
  return addr_info_;
}
inline ::pb::AddrInfo* ServerSource::mutable_addr_info() {
  // @@protoc_insertion_point(field_mutable:pb.ServerSource.addr_info)
  return _internal_mutable_addr_info();
}
inline void ServerSource::set_allocated_addr_info(::pb::AddrInfo* addr_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete addr_info_;
  }
  if (addr_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      addr_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addr_info, submessage_arena);
    }
    
  } else {
    
  }
  addr_info_ = addr_info;
  // @@protoc_insertion_point(field_set_allocated:pb.ServerSource.addr_info)
}

// -------------------------------------------------------------------

// AddrInfo

// bytes id_bytes = 1;
inline void AddrInfo::clear_id_bytes() {
  id_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddrInfo::id_bytes() const {
  // @@protoc_insertion_point(field_get:pb.AddrInfo.id_bytes)
  return _internal_id_bytes();
}
inline void AddrInfo::set_id_bytes(const std::string& value) {
  _internal_set_id_bytes(value);
  // @@protoc_insertion_point(field_set:pb.AddrInfo.id_bytes)
}
inline std::string* AddrInfo::mutable_id_bytes() {
  // @@protoc_insertion_point(field_mutable:pb.AddrInfo.id_bytes)
  return _internal_mutable_id_bytes();
}
inline const std::string& AddrInfo::_internal_id_bytes() const {
  return id_bytes_.GetNoArena();
}
inline void AddrInfo::_internal_set_id_bytes(const std::string& value) {
  
  id_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddrInfo::set_id_bytes(std::string&& value) {
  
  id_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.AddrInfo.id_bytes)
}
inline void AddrInfo::set_id_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.AddrInfo.id_bytes)
}
inline void AddrInfo::set_id_bytes(const void* value, size_t size) {
  
  id_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.AddrInfo.id_bytes)
}
inline std::string* AddrInfo::_internal_mutable_id_bytes() {
  
  return id_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddrInfo::release_id_bytes() {
  // @@protoc_insertion_point(field_release:pb.AddrInfo.id_bytes)
  
  return id_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddrInfo::set_allocated_id_bytes(std::string* id_bytes) {
  if (id_bytes != nullptr) {
    
  } else {
    
  }
  id_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_bytes);
  // @@protoc_insertion_point(field_set_allocated:pb.AddrInfo.id_bytes)
}

// repeated bytes addrs_bytes = 2;
inline int AddrInfo::_internal_addrs_bytes_size() const {
  return addrs_bytes_.size();
}
inline int AddrInfo::addrs_bytes_size() const {
  return _internal_addrs_bytes_size();
}
inline void AddrInfo::clear_addrs_bytes() {
  addrs_bytes_.Clear();
}
inline std::string* AddrInfo::add_addrs_bytes() {
  // @@protoc_insertion_point(field_add_mutable:pb.AddrInfo.addrs_bytes)
  return _internal_add_addrs_bytes();
}
inline const std::string& AddrInfo::_internal_addrs_bytes(int index) const {
  return addrs_bytes_.Get(index);
}
inline const std::string& AddrInfo::addrs_bytes(int index) const {
  // @@protoc_insertion_point(field_get:pb.AddrInfo.addrs_bytes)
  return _internal_addrs_bytes(index);
}
inline std::string* AddrInfo::mutable_addrs_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.AddrInfo.addrs_bytes)
  return addrs_bytes_.Mutable(index);
}
inline void AddrInfo::set_addrs_bytes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.AddrInfo.addrs_bytes)
  addrs_bytes_.Mutable(index)->assign(value);
}
inline void AddrInfo::set_addrs_bytes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.AddrInfo.addrs_bytes)
  addrs_bytes_.Mutable(index)->assign(std::move(value));
}
inline void AddrInfo::set_addrs_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addrs_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.AddrInfo.addrs_bytes)
}
inline void AddrInfo::set_addrs_bytes(int index, const void* value, size_t size) {
  addrs_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.AddrInfo.addrs_bytes)
}
inline std::string* AddrInfo::_internal_add_addrs_bytes() {
  return addrs_bytes_.Add();
}
inline void AddrInfo::add_addrs_bytes(const std::string& value) {
  addrs_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.AddrInfo.addrs_bytes)
}
inline void AddrInfo::add_addrs_bytes(std::string&& value) {
  addrs_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.AddrInfo.addrs_bytes)
}
inline void AddrInfo::add_addrs_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addrs_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.AddrInfo.addrs_bytes)
}
inline void AddrInfo::add_addrs_bytes(const void* value, size_t size) {
  addrs_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.AddrInfo.addrs_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddrInfo::addrs_bytes() const {
  // @@protoc_insertion_point(field_list:pb.AddrInfo.addrs_bytes)
  return addrs_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddrInfo::mutable_addrs_bytes() {
  // @@protoc_insertion_point(field_mutable_list:pb.AddrInfo.addrs_bytes)
  return &addrs_bytes_;
}

// int32 grpc_port = 3;
inline void AddrInfo::clear_grpc_port() {
  grpc_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddrInfo::_internal_grpc_port() const {
  return grpc_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddrInfo::grpc_port() const {
  // @@protoc_insertion_point(field_get:pb.AddrInfo.grpc_port)
  return _internal_grpc_port();
}
inline void AddrInfo::_internal_set_grpc_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpc_port_ = value;
}
inline void AddrInfo::set_grpc_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpc_port(value);
  // @@protoc_insertion_point(field_set:pb.AddrInfo.grpc_port)
}

// -------------------------------------------------------------------

// Subscription

// string topic = 1;
inline void Subscription::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Subscription::topic() const {
  // @@protoc_insertion_point(field_get:pb.Subscription.topic)
  return _internal_topic();
}
inline void Subscription::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:pb.Subscription.topic)
}
inline std::string* Subscription::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:pb.Subscription.topic)
  return _internal_mutable_topic();
}
inline const std::string& Subscription::_internal_topic() const {
  return topic_.GetNoArena();
}
inline void Subscription::_internal_set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Subscription::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Subscription.topic)
}
inline void Subscription::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Subscription.topic)
}
inline void Subscription::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Subscription.topic)
}
inline std::string* Subscription::_internal_mutable_topic() {
  
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Subscription::release_topic() {
  // @@protoc_insertion_point(field_release:pb.Subscription.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Subscription::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:pb.Subscription.topic)
}

// bytes author_id_bytes = 2;
inline void Subscription::clear_author_id_bytes() {
  author_id_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Subscription::author_id_bytes() const {
  // @@protoc_insertion_point(field_get:pb.Subscription.author_id_bytes)
  return _internal_author_id_bytes();
}
inline void Subscription::set_author_id_bytes(const std::string& value) {
  _internal_set_author_id_bytes(value);
  // @@protoc_insertion_point(field_set:pb.Subscription.author_id_bytes)
}
inline std::string* Subscription::mutable_author_id_bytes() {
  // @@protoc_insertion_point(field_mutable:pb.Subscription.author_id_bytes)
  return _internal_mutable_author_id_bytes();
}
inline const std::string& Subscription::_internal_author_id_bytes() const {
  return author_id_bytes_.GetNoArena();
}
inline void Subscription::_internal_set_author_id_bytes(const std::string& value) {
  
  author_id_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Subscription::set_author_id_bytes(std::string&& value) {
  
  author_id_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Subscription.author_id_bytes)
}
inline void Subscription::set_author_id_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  author_id_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Subscription.author_id_bytes)
}
inline void Subscription::set_author_id_bytes(const void* value, size_t size) {
  
  author_id_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Subscription.author_id_bytes)
}
inline std::string* Subscription::_internal_mutable_author_id_bytes() {
  
  return author_id_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Subscription::release_author_id_bytes() {
  // @@protoc_insertion_point(field_release:pb.Subscription.author_id_bytes)
  
  return author_id_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Subscription::set_allocated_author_id_bytes(std::string* author_id_bytes) {
  if (author_id_bytes != nullptr) {
    
  } else {
    
  }
  author_id_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author_id_bytes);
  // @@protoc_insertion_point(field_set_allocated:pb.Subscription.author_id_bytes)
}

// bool remove = 3;
inline void Subscription::clear_remove() {
  remove_ = false;
}
inline bool Subscription::_internal_remove() const {
  return remove_;
}
inline bool Subscription::remove() const {
  // @@protoc_insertion_point(field_get:pb.Subscription.remove)
  return _internal_remove();
}
inline void Subscription::_internal_set_remove(bool value) {
  
  remove_ = value;
}
inline void Subscription::set_remove(bool value) {
  _internal_set_remove(value);
  // @@protoc_insertion_point(field_set:pb.Subscription.remove)
}

// -------------------------------------------------------------------

// ReplicationStatus

// bool ok = 1;
inline void ReplicationStatus::clear_ok() {
  ok_ = false;
}
inline bool ReplicationStatus::_internal_ok() const {
  return ok_;
}
inline bool ReplicationStatus::ok() const {
  // @@protoc_insertion_point(field_get:pb.ReplicationStatus.ok)
  return _internal_ok();
}
inline void ReplicationStatus::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void ReplicationStatus::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:pb.ReplicationStatus.ok)
}

// bool is_active = 2;
inline void ReplicationStatus::clear_is_active() {
  is_active_ = false;
}
inline bool ReplicationStatus::_internal_is_active() const {
  return is_active_;
}
inline bool ReplicationStatus::is_active() const {
  // @@protoc_insertion_point(field_get:pb.ReplicationStatus.is_active)
  return _internal_is_active();
}
inline void ReplicationStatus::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void ReplicationStatus::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:pb.ReplicationStatus.is_active)
}

// int64 current_version = 3;
inline void ReplicationStatus::clear_current_version() {
  current_version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicationStatus::_internal_current_version() const {
  return current_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicationStatus::current_version() const {
  // @@protoc_insertion_point(field_get:pb.ReplicationStatus.current_version)
  return _internal_current_version();
}
inline void ReplicationStatus::_internal_set_current_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  current_version_ = value;
}
inline void ReplicationStatus::set_current_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_current_version(value);
  // @@protoc_insertion_point(field_set:pb.ReplicationStatus.current_version)
}

// int64 target_version = 4;
inline void ReplicationStatus::clear_target_version() {
  target_version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicationStatus::_internal_target_version() const {
  return target_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicationStatus::target_version() const {
  // @@protoc_insertion_point(field_get:pb.ReplicationStatus.target_version)
  return _internal_target_version();
}
inline void ReplicationStatus::_internal_set_target_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_version_ = value;
}
inline void ReplicationStatus::set_target_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_target_version(value);
  // @@protoc_insertion_point(field_set:pb.ReplicationStatus.target_version)
}

// -------------------------------------------------------------------

// SubscriptionUpdate

// int64 version = 1;
inline void SubscriptionUpdate::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionUpdate::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionUpdate::version() const {
  // @@protoc_insertion_point(field_get:pb.SubscriptionUpdate.version)
  return _internal_version();
}
inline void SubscriptionUpdate::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void SubscriptionUpdate::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pb.SubscriptionUpdate.version)
}

// bytes replication_bytes = 2;
inline void SubscriptionUpdate::clear_replication_bytes() {
  replication_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubscriptionUpdate::replication_bytes() const {
  // @@protoc_insertion_point(field_get:pb.SubscriptionUpdate.replication_bytes)
  return _internal_replication_bytes();
}
inline void SubscriptionUpdate::set_replication_bytes(const std::string& value) {
  _internal_set_replication_bytes(value);
  // @@protoc_insertion_point(field_set:pb.SubscriptionUpdate.replication_bytes)
}
inline std::string* SubscriptionUpdate::mutable_replication_bytes() {
  // @@protoc_insertion_point(field_mutable:pb.SubscriptionUpdate.replication_bytes)
  return _internal_mutable_replication_bytes();
}
inline const std::string& SubscriptionUpdate::_internal_replication_bytes() const {
  return replication_bytes_.GetNoArena();
}
inline void SubscriptionUpdate::_internal_set_replication_bytes(const std::string& value) {
  
  replication_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SubscriptionUpdate::set_replication_bytes(std::string&& value) {
  
  replication_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SubscriptionUpdate.replication_bytes)
}
inline void SubscriptionUpdate::set_replication_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  replication_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SubscriptionUpdate.replication_bytes)
}
inline void SubscriptionUpdate::set_replication_bytes(const void* value, size_t size) {
  
  replication_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SubscriptionUpdate.replication_bytes)
}
inline std::string* SubscriptionUpdate::_internal_mutable_replication_bytes() {
  
  return replication_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubscriptionUpdate::release_replication_bytes() {
  // @@protoc_insertion_point(field_release:pb.SubscriptionUpdate.replication_bytes)
  
  return replication_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubscriptionUpdate::set_allocated_replication_bytes(std::string* replication_bytes) {
  if (replication_bytes != nullptr) {
    
  } else {
    
  }
  replication_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replication_bytes);
  // @@protoc_insertion_point(field_set_allocated:pb.SubscriptionUpdate.replication_bytes)
}

// bytes signature = 3;
inline void SubscriptionUpdate::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubscriptionUpdate::signature() const {
  // @@protoc_insertion_point(field_get:pb.SubscriptionUpdate.signature)
  return _internal_signature();
}
inline void SubscriptionUpdate::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:pb.SubscriptionUpdate.signature)
}
inline std::string* SubscriptionUpdate::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:pb.SubscriptionUpdate.signature)
  return _internal_mutable_signature();
}
inline const std::string& SubscriptionUpdate::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void SubscriptionUpdate::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SubscriptionUpdate::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SubscriptionUpdate.signature)
}
inline void SubscriptionUpdate::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SubscriptionUpdate.signature)
}
inline void SubscriptionUpdate::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SubscriptionUpdate.signature)
}
inline std::string* SubscriptionUpdate::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubscriptionUpdate::release_signature() {
  // @@protoc_insertion_point(field_release:pb.SubscriptionUpdate.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubscriptionUpdate::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:pb.SubscriptionUpdate.signature)
}

// -------------------------------------------------------------------

// SignedSubscription

// .pb.Subscription sub_part = 1;
inline bool SignedSubscription::_internal_has_sub_part() const {
  return this != internal_default_instance() && sub_part_ != nullptr;
}
inline bool SignedSubscription::has_sub_part() const {
  return _internal_has_sub_part();
}
inline void SignedSubscription::clear_sub_part() {
  if (GetArenaNoVirtual() == nullptr && sub_part_ != nullptr) {
    delete sub_part_;
  }
  sub_part_ = nullptr;
}
inline const ::pb::Subscription& SignedSubscription::_internal_sub_part() const {
  const ::pb::Subscription* p = sub_part_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Subscription*>(
      &::pb::_Subscription_default_instance_);
}
inline const ::pb::Subscription& SignedSubscription::sub_part() const {
  // @@protoc_insertion_point(field_get:pb.SignedSubscription.sub_part)
  return _internal_sub_part();
}
inline ::pb::Subscription* SignedSubscription::release_sub_part() {
  // @@protoc_insertion_point(field_release:pb.SignedSubscription.sub_part)
  
  ::pb::Subscription* temp = sub_part_;
  sub_part_ = nullptr;
  return temp;
}
inline ::pb::Subscription* SignedSubscription::_internal_mutable_sub_part() {
  
  if (sub_part_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Subscription>(GetArenaNoVirtual());
    sub_part_ = p;
  }
  return sub_part_;
}
inline ::pb::Subscription* SignedSubscription::mutable_sub_part() {
  // @@protoc_insertion_point(field_mutable:pb.SignedSubscription.sub_part)
  return _internal_mutable_sub_part();
}
inline void SignedSubscription::set_allocated_sub_part(::pb::Subscription* sub_part) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sub_part_;
  }
  if (sub_part) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sub_part = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_part, submessage_arena);
    }
    
  } else {
    
  }
  sub_part_ = sub_part;
  // @@protoc_insertion_point(field_set_allocated:pb.SignedSubscription.sub_part)
}

// .pb.SubscriptionUpdate update_part = 2;
inline bool SignedSubscription::_internal_has_update_part() const {
  return this != internal_default_instance() && update_part_ != nullptr;
}
inline bool SignedSubscription::has_update_part() const {
  return _internal_has_update_part();
}
inline void SignedSubscription::clear_update_part() {
  if (GetArenaNoVirtual() == nullptr && update_part_ != nullptr) {
    delete update_part_;
  }
  update_part_ = nullptr;
}
inline const ::pb::SubscriptionUpdate& SignedSubscription::_internal_update_part() const {
  const ::pb::SubscriptionUpdate* p = update_part_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SubscriptionUpdate*>(
      &::pb::_SubscriptionUpdate_default_instance_);
}
inline const ::pb::SubscriptionUpdate& SignedSubscription::update_part() const {
  // @@protoc_insertion_point(field_get:pb.SignedSubscription.update_part)
  return _internal_update_part();
}
inline ::pb::SubscriptionUpdate* SignedSubscription::release_update_part() {
  // @@protoc_insertion_point(field_release:pb.SignedSubscription.update_part)
  
  ::pb::SubscriptionUpdate* temp = update_part_;
  update_part_ = nullptr;
  return temp;
}
inline ::pb::SubscriptionUpdate* SignedSubscription::_internal_mutable_update_part() {
  
  if (update_part_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SubscriptionUpdate>(GetArenaNoVirtual());
    update_part_ = p;
  }
  return update_part_;
}
inline ::pb::SubscriptionUpdate* SignedSubscription::mutable_update_part() {
  // @@protoc_insertion_point(field_mutable:pb.SignedSubscription.update_part)
  return _internal_mutable_update_part();
}
inline void SignedSubscription::set_allocated_update_part(::pb::SubscriptionUpdate* update_part) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete update_part_;
  }
  if (update_part) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_part = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_part, submessage_arena);
    }
    
  } else {
    
  }
  update_part_ = update_part;
  // @@protoc_insertion_point(field_set_allocated:pb.SignedSubscription.update_part)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_replication_2eproto
