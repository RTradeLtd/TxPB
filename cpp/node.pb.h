// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "util.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto;
namespace pb {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockstoreRequest;
class BlockstoreRequestDefaultTypeInternal;
extern BlockstoreRequestDefaultTypeInternal _BlockstoreRequest_default_instance_;
class BlockstoreResponse;
class BlockstoreResponseDefaultTypeInternal;
extern BlockstoreResponseDefaultTypeInternal _BlockstoreResponse_default_instance_;
class ConnMgmtRequest;
class ConnMgmtRequestDefaultTypeInternal;
extern ConnMgmtRequestDefaultTypeInternal _ConnMgmtRequest_default_instance_;
class ConnMgmtResponse;
class ConnMgmtResponseDefaultTypeInternal;
extern ConnMgmtResponseDefaultTypeInternal _ConnMgmtResponse_default_instance_;
class ConnMgmtResponse_ConnectedEntry_DoNotUse;
class ConnMgmtResponse_ConnectedEntry_DoNotUseDefaultTypeInternal;
extern ConnMgmtResponse_ConnectedEntry_DoNotUseDefaultTypeInternal _ConnMgmtResponse_ConnectedEntry_DoNotUse_default_instance_;
class ConnMgmtResponse_StatusEntry_DoNotUse;
class ConnMgmtResponse_StatusEntry_DoNotUseDefaultTypeInternal;
extern ConnMgmtResponse_StatusEntry_DoNotUseDefaultTypeInternal _ConnMgmtResponse_StatusEntry_DoNotUse_default_instance_;
class ConnMgmtStatus;
class ConnMgmtStatusDefaultTypeInternal;
extern ConnMgmtStatusDefaultTypeInternal _ConnMgmtStatus_default_instance_;
class DagRequest;
class DagRequestDefaultTypeInternal;
extern DagRequestDefaultTypeInternal _DagRequest_default_instance_;
class DagRequest_LinksEntry_DoNotUse;
class DagRequest_LinksEntry_DoNotUseDefaultTypeInternal;
extern DagRequest_LinksEntry_DoNotUseDefaultTypeInternal _DagRequest_LinksEntry_DoNotUse_default_instance_;
class DagResponse;
class DagResponseDefaultTypeInternal;
extern DagResponseDefaultTypeInternal _DagResponse_default_instance_;
class ExtrasRequest;
class ExtrasRequestDefaultTypeInternal;
extern ExtrasRequestDefaultTypeInternal _ExtrasRequest_default_instance_;
class GetPeersResponse;
class GetPeersResponseDefaultTypeInternal;
extern GetPeersResponseDefaultTypeInternal _GetPeersResponse_default_instance_;
class IPLDLink;
class IPLDLinkDefaultTypeInternal;
extern IPLDLinkDefaultTypeInternal _IPLDLink_default_instance_;
class IPLDNode;
class IPLDNodeDefaultTypeInternal;
extern IPLDNodeDefaultTypeInternal _IPLDNode_default_instance_;
class KeystoreRequest;
class KeystoreRequestDefaultTypeInternal;
extern KeystoreRequestDefaultTypeInternal _KeystoreRequest_default_instance_;
class KeystoreResponse;
class KeystoreResponseDefaultTypeInternal;
extern KeystoreResponseDefaultTypeInternal _KeystoreResponse_default_instance_;
class P2PLsInfo;
class P2PLsInfoDefaultTypeInternal;
extern P2PLsInfoDefaultTypeInternal _P2PLsInfo_default_instance_;
class P2PRequest;
class P2PRequestDefaultTypeInternal;
extern P2PRequestDefaultTypeInternal _P2PRequest_default_instance_;
class P2PResponse;
class P2PResponseDefaultTypeInternal;
extern P2PResponseDefaultTypeInternal _P2PResponse_default_instance_;
class PersistRequest;
class PersistRequestDefaultTypeInternal;
extern PersistRequestDefaultTypeInternal _PersistRequest_default_instance_;
class PersistResponse;
class PersistResponseDefaultTypeInternal;
extern PersistResponseDefaultTypeInternal _PersistResponse_default_instance_;
class PersistResponse_ErrorsEntry_DoNotUse;
class PersistResponse_ErrorsEntry_DoNotUseDefaultTypeInternal;
extern PersistResponse_ErrorsEntry_DoNotUseDefaultTypeInternal _PersistResponse_ErrorsEntry_DoNotUse_default_instance_;
class PersistResponse_StatusEntry_DoNotUse;
class PersistResponse_StatusEntry_DoNotUseDefaultTypeInternal;
extern PersistResponse_StatusEntry_DoNotUseDefaultTypeInternal _PersistResponse_StatusEntry_DoNotUse_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Block* Arena::CreateMaybeMessage<::pb::Block>(Arena*);
template<> ::pb::BlockstoreRequest* Arena::CreateMaybeMessage<::pb::BlockstoreRequest>(Arena*);
template<> ::pb::BlockstoreResponse* Arena::CreateMaybeMessage<::pb::BlockstoreResponse>(Arena*);
template<> ::pb::ConnMgmtRequest* Arena::CreateMaybeMessage<::pb::ConnMgmtRequest>(Arena*);
template<> ::pb::ConnMgmtResponse* Arena::CreateMaybeMessage<::pb::ConnMgmtResponse>(Arena*);
template<> ::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::ConnMgmtResponse_ConnectedEntry_DoNotUse>(Arena*);
template<> ::pb::ConnMgmtResponse_StatusEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::ConnMgmtResponse_StatusEntry_DoNotUse>(Arena*);
template<> ::pb::ConnMgmtStatus* Arena::CreateMaybeMessage<::pb::ConnMgmtStatus>(Arena*);
template<> ::pb::DagRequest* Arena::CreateMaybeMessage<::pb::DagRequest>(Arena*);
template<> ::pb::DagRequest_LinksEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::DagRequest_LinksEntry_DoNotUse>(Arena*);
template<> ::pb::DagResponse* Arena::CreateMaybeMessage<::pb::DagResponse>(Arena*);
template<> ::pb::ExtrasRequest* Arena::CreateMaybeMessage<::pb::ExtrasRequest>(Arena*);
template<> ::pb::GetPeersResponse* Arena::CreateMaybeMessage<::pb::GetPeersResponse>(Arena*);
template<> ::pb::IPLDLink* Arena::CreateMaybeMessage<::pb::IPLDLink>(Arena*);
template<> ::pb::IPLDNode* Arena::CreateMaybeMessage<::pb::IPLDNode>(Arena*);
template<> ::pb::KeystoreRequest* Arena::CreateMaybeMessage<::pb::KeystoreRequest>(Arena*);
template<> ::pb::KeystoreResponse* Arena::CreateMaybeMessage<::pb::KeystoreResponse>(Arena*);
template<> ::pb::P2PLsInfo* Arena::CreateMaybeMessage<::pb::P2PLsInfo>(Arena*);
template<> ::pb::P2PRequest* Arena::CreateMaybeMessage<::pb::P2PRequest>(Arena*);
template<> ::pb::P2PResponse* Arena::CreateMaybeMessage<::pb::P2PResponse>(Arena*);
template<> ::pb::PersistRequest* Arena::CreateMaybeMessage<::pb::PersistRequest>(Arena*);
template<> ::pb::PersistResponse* Arena::CreateMaybeMessage<::pb::PersistResponse>(Arena*);
template<> ::pb::PersistResponse_ErrorsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::PersistResponse_ErrorsEntry_DoNotUse>(Arena*);
template<> ::pb::PersistResponse_StatusEntry_DoNotUse* Arena::CreateMaybeMessage<::pb::PersistResponse_StatusEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum P2PREQTYPE : int {
  CLOSE = 0,
  FORWARD = 1,
  LISTEN = 2,
  LS = 3,
  P2PREQTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  P2PREQTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool P2PREQTYPE_IsValid(int value);
constexpr P2PREQTYPE P2PREQTYPE_MIN = CLOSE;
constexpr P2PREQTYPE P2PREQTYPE_MAX = LS;
constexpr int P2PREQTYPE_ARRAYSIZE = P2PREQTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* P2PREQTYPE_descriptor();
template<typename T>
inline const std::string& P2PREQTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, P2PREQTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function P2PREQTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    P2PREQTYPE_descriptor(), enum_t_value);
}
inline bool P2PREQTYPE_Parse(
    const std::string& name, P2PREQTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<P2PREQTYPE>(
    P2PREQTYPE_descriptor(), name, value);
}
enum CONNMGMTREQTYPE : int {
  CM_CONNECT = 0,
  CM_DISCONNECT = 1,
  CM_STATUS = 2,
  CM_GET_PEERS = 3,
  CONNMGMTREQTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CONNMGMTREQTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CONNMGMTREQTYPE_IsValid(int value);
constexpr CONNMGMTREQTYPE CONNMGMTREQTYPE_MIN = CM_CONNECT;
constexpr CONNMGMTREQTYPE CONNMGMTREQTYPE_MAX = CM_GET_PEERS;
constexpr int CONNMGMTREQTYPE_ARRAYSIZE = CONNMGMTREQTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CONNMGMTREQTYPE_descriptor();
template<typename T>
inline const std::string& CONNMGMTREQTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CONNMGMTREQTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CONNMGMTREQTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CONNMGMTREQTYPE_descriptor(), enum_t_value);
}
inline bool CONNMGMTREQTYPE_Parse(
    const std::string& name, CONNMGMTREQTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CONNMGMTREQTYPE>(
    CONNMGMTREQTYPE_descriptor(), name, value);
}
enum EXTRASREQTYPE : int {
  EX_ENABLE = 0,
  EX_DISABLE = 1,
  EXTRASREQTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EXTRASREQTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EXTRASREQTYPE_IsValid(int value);
constexpr EXTRASREQTYPE EXTRASREQTYPE_MIN = EX_ENABLE;
constexpr EXTRASREQTYPE EXTRASREQTYPE_MAX = EX_DISABLE;
constexpr int EXTRASREQTYPE_ARRAYSIZE = EXTRASREQTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EXTRASREQTYPE_descriptor();
template<typename T>
inline const std::string& EXTRASREQTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EXTRASREQTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EXTRASREQTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EXTRASREQTYPE_descriptor(), enum_t_value);
}
inline bool EXTRASREQTYPE_Parse(
    const std::string& name, EXTRASREQTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EXTRASREQTYPE>(
    EXTRASREQTYPE_descriptor(), name, value);
}
enum EXTRASTYPE : int {
  IDENTIFY = 0,
  PUBSUB = 1,
  DISCOVERY = 2,
  MDNS = 3,
  EXTRASTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EXTRASTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EXTRASTYPE_IsValid(int value);
constexpr EXTRASTYPE EXTRASTYPE_MIN = IDENTIFY;
constexpr EXTRASTYPE EXTRASTYPE_MAX = MDNS;
constexpr int EXTRASTYPE_ARRAYSIZE = EXTRASTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EXTRASTYPE_descriptor();
template<typename T>
inline const std::string& EXTRASTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EXTRASTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EXTRASTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EXTRASTYPE_descriptor(), enum_t_value);
}
inline bool EXTRASTYPE_Parse(
    const std::string& name, EXTRASTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EXTRASTYPE>(
    EXTRASTYPE_descriptor(), name, value);
}
enum BSREQTYPE : int {
  BS_DELETE = 0,
  BS_PUT = 1,
  BS_PUT_MANY = 2,
  BS_GET = 3,
  BS_GET_MANY = 4,
  BSREQTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BSREQTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BSREQTYPE_IsValid(int value);
constexpr BSREQTYPE BSREQTYPE_MIN = BS_DELETE;
constexpr BSREQTYPE BSREQTYPE_MAX = BS_GET_MANY;
constexpr int BSREQTYPE_ARRAYSIZE = BSREQTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BSREQTYPE_descriptor();
template<typename T>
inline const std::string& BSREQTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BSREQTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BSREQTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BSREQTYPE_descriptor(), enum_t_value);
}
inline bool BSREQTYPE_Parse(
    const std::string& name, BSREQTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BSREQTYPE>(
    BSREQTYPE_descriptor(), name, value);
}
enum BSREQOPTS : int {
  DEFAULT = 0,
  BS_FORCE = 1,
  BSREQOPTS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BSREQOPTS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BSREQOPTS_IsValid(int value);
constexpr BSREQOPTS BSREQOPTS_MIN = DEFAULT;
constexpr BSREQOPTS BSREQOPTS_MAX = BS_FORCE;
constexpr int BSREQOPTS_ARRAYSIZE = BSREQOPTS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BSREQOPTS_descriptor();
template<typename T>
inline const std::string& BSREQOPTS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BSREQOPTS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BSREQOPTS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BSREQOPTS_descriptor(), enum_t_value);
}
inline bool BSREQOPTS_Parse(
    const std::string& name, BSREQOPTS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BSREQOPTS>(
    BSREQOPTS_descriptor(), name, value);
}
enum DAGREQTYPE : int {
  DAG_PUT = 0,
  DAG_GET = 1,
  DAG_NEW_NODE = 2,
  DAG_ADD_LINKS = 3,
  DAG_GET_LINKS = 4,
  DAGREQTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DAGREQTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DAGREQTYPE_IsValid(int value);
constexpr DAGREQTYPE DAGREQTYPE_MIN = DAG_PUT;
constexpr DAGREQTYPE DAGREQTYPE_MAX = DAG_GET_LINKS;
constexpr int DAGREQTYPE_ARRAYSIZE = DAGREQTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DAGREQTYPE_descriptor();
template<typename T>
inline const std::string& DAGREQTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DAGREQTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DAGREQTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DAGREQTYPE_descriptor(), enum_t_value);
}
inline bool DAGREQTYPE_Parse(
    const std::string& name, DAGREQTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DAGREQTYPE>(
    DAGREQTYPE_descriptor(), name, value);
}
enum KSREQTYPE : int {
  KS_HAS = 0,
  KS_GET = 1,
  KS_PUT = 2,
  KS_DELETE = 3,
  KS_LIST = 4,
  KSREQTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KSREQTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KSREQTYPE_IsValid(int value);
constexpr KSREQTYPE KSREQTYPE_MIN = KS_HAS;
constexpr KSREQTYPE KSREQTYPE_MAX = KS_LIST;
constexpr int KSREQTYPE_ARRAYSIZE = KSREQTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KSREQTYPE_descriptor();
template<typename T>
inline const std::string& KSREQTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KSREQTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KSREQTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KSREQTYPE_descriptor(), enum_t_value);
}
inline bool KSREQTYPE_Parse(
    const std::string& name, KSREQTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KSREQTYPE>(
    KSREQTYPE_descriptor(), name, value);
}
// ===================================================================

class P2PRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.P2PRequest) */ {
 public:
  P2PRequest();
  virtual ~P2PRequest();

  P2PRequest(const P2PRequest& from);
  P2PRequest(P2PRequest&& from) noexcept
    : P2PRequest() {
    *this = ::std::move(from);
  }

  inline P2PRequest& operator=(const P2PRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2PRequest& operator=(P2PRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const P2PRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P2PRequest* internal_default_instance() {
    return reinterpret_cast<const P2PRequest*>(
               &_P2PRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(P2PRequest& a, P2PRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(P2PRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2PRequest* New() const final {
    return CreateMaybeMessage<P2PRequest>(nullptr);
  }

  P2PRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2PRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2PRequest& from);
  void MergeFrom(const P2PRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2PRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.P2PRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolNameFieldNumber = 4,
    kListenAddressFieldNumber = 5,
    kTargetAddressFieldNumber = 6,
    kRemoteAddressFieldNumber = 7,
    kRequestTypeFieldNumber = 1,
    kAllFieldNumber = 2,
    kVerboseFieldNumber = 3,
    kAllowCustomProtocolsFieldNumber = 8,
    kReportPeerIDFieldNumber = 9,
  };
  // string protocolName = 4;
  void clear_protocolname();
  const std::string& protocolname() const;
  void set_protocolname(const std::string& value);
  void set_protocolname(std::string&& value);
  void set_protocolname(const char* value);
  void set_protocolname(const char* value, size_t size);
  std::string* mutable_protocolname();
  std::string* release_protocolname();
  void set_allocated_protocolname(std::string* protocolname);
  private:
  const std::string& _internal_protocolname() const;
  void _internal_set_protocolname(const std::string& value);
  std::string* _internal_mutable_protocolname();
  public:

  // string listenAddress = 5;
  void clear_listenaddress();
  const std::string& listenaddress() const;
  void set_listenaddress(const std::string& value);
  void set_listenaddress(std::string&& value);
  void set_listenaddress(const char* value);
  void set_listenaddress(const char* value, size_t size);
  std::string* mutable_listenaddress();
  std::string* release_listenaddress();
  void set_allocated_listenaddress(std::string* listenaddress);
  private:
  const std::string& _internal_listenaddress() const;
  void _internal_set_listenaddress(const std::string& value);
  std::string* _internal_mutable_listenaddress();
  public:

  // string targetAddress = 6;
  void clear_targetaddress();
  const std::string& targetaddress() const;
  void set_targetaddress(const std::string& value);
  void set_targetaddress(std::string&& value);
  void set_targetaddress(const char* value);
  void set_targetaddress(const char* value, size_t size);
  std::string* mutable_targetaddress();
  std::string* release_targetaddress();
  void set_allocated_targetaddress(std::string* targetaddress);
  private:
  const std::string& _internal_targetaddress() const;
  void _internal_set_targetaddress(const std::string& value);
  std::string* _internal_mutable_targetaddress();
  public:

  // string remoteAddress = 7;
  void clear_remoteaddress();
  const std::string& remoteaddress() const;
  void set_remoteaddress(const std::string& value);
  void set_remoteaddress(std::string&& value);
  void set_remoteaddress(const char* value);
  void set_remoteaddress(const char* value, size_t size);
  std::string* mutable_remoteaddress();
  std::string* release_remoteaddress();
  void set_allocated_remoteaddress(std::string* remoteaddress);
  private:
  const std::string& _internal_remoteaddress() const;
  void _internal_set_remoteaddress(const std::string& value);
  std::string* _internal_mutable_remoteaddress();
  public:

  // .pb.P2PREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::P2PREQTYPE requesttype() const;
  void set_requesttype(::pb::P2PREQTYPE value);
  private:
  ::pb::P2PREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::P2PREQTYPE value);
  public:

  // bool all = 2;
  void clear_all();
  bool all() const;
  void set_all(bool value);
  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);
  public:

  // bool verbose = 3;
  void clear_verbose();
  bool verbose() const;
  void set_verbose(bool value);
  private:
  bool _internal_verbose() const;
  void _internal_set_verbose(bool value);
  public:

  // bool allowCustomProtocols = 8;
  void clear_allowcustomprotocols();
  bool allowcustomprotocols() const;
  void set_allowcustomprotocols(bool value);
  private:
  bool _internal_allowcustomprotocols() const;
  void _internal_set_allowcustomprotocols(bool value);
  public:

  // bool reportPeerID = 9;
  void clear_reportpeerid();
  bool reportpeerid() const;
  void set_reportpeerid(bool value);
  private:
  bool _internal_reportpeerid() const;
  void _internal_set_reportpeerid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.P2PRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocolname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listenaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remoteaddress_;
  int requesttype_;
  bool all_;
  bool verbose_;
  bool allowcustomprotocols_;
  bool reportpeerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class P2PResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.P2PResponse) */ {
 public:
  P2PResponse();
  virtual ~P2PResponse();

  P2PResponse(const P2PResponse& from);
  P2PResponse(P2PResponse&& from) noexcept
    : P2PResponse() {
    *this = ::std::move(from);
  }

  inline P2PResponse& operator=(const P2PResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2PResponse& operator=(P2PResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const P2PResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P2PResponse* internal_default_instance() {
    return reinterpret_cast<const P2PResponse*>(
               &_P2PResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(P2PResponse& a, P2PResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(P2PResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2PResponse* New() const final {
    return CreateMaybeMessage<P2PResponse>(nullptr);
  }

  P2PResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2PResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2PResponse& from);
  void MergeFrom(const P2PResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2PResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.P2PResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kStreamInfosFieldNumber = 4,
    kRequestTypeFieldNumber = 1,
    kConnsClosedFieldNumber = 3,
  };
  // repeated string names = 2;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated .pb.P2PLsInfo streamInfos = 4;
  int streaminfos_size() const;
  private:
  int _internal_streaminfos_size() const;
  public:
  void clear_streaminfos();
  ::pb::P2PLsInfo* mutable_streaminfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::P2PLsInfo >*
      mutable_streaminfos();
  private:
  const ::pb::P2PLsInfo& _internal_streaminfos(int index) const;
  ::pb::P2PLsInfo* _internal_add_streaminfos();
  public:
  const ::pb::P2PLsInfo& streaminfos(int index) const;
  ::pb::P2PLsInfo* add_streaminfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::P2PLsInfo >&
      streaminfos() const;

  // .pb.P2PREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::P2PREQTYPE requesttype() const;
  void set_requesttype(::pb::P2PREQTYPE value);
  private:
  ::pb::P2PREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::P2PREQTYPE value);
  public:

  // int32 connsClosed = 3;
  void clear_connsclosed();
  ::PROTOBUF_NAMESPACE_ID::int32 connsclosed() const;
  void set_connsclosed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connsclosed() const;
  void _internal_set_connsclosed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.P2PResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::P2PLsInfo > streaminfos_;
  int requesttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 connsclosed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class P2PLsInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.P2PLsInfo) */ {
 public:
  P2PLsInfo();
  virtual ~P2PLsInfo();

  P2PLsInfo(const P2PLsInfo& from);
  P2PLsInfo(P2PLsInfo&& from) noexcept
    : P2PLsInfo() {
    *this = ::std::move(from);
  }

  inline P2PLsInfo& operator=(const P2PLsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2PLsInfo& operator=(P2PLsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const P2PLsInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P2PLsInfo* internal_default_instance() {
    return reinterpret_cast<const P2PLsInfo*>(
               &_P2PLsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(P2PLsInfo& a, P2PLsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(P2PLsInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2PLsInfo* New() const final {
    return CreateMaybeMessage<P2PLsInfo>(nullptr);
  }

  P2PLsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2PLsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2PLsInfo& from);
  void MergeFrom(const P2PLsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2PLsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.P2PLsInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolNameFieldNumber = 1,
    kListenAddressFieldNumber = 2,
    kTargetAddressFieldNumber = 3,
    kLocalFieldNumber = 4,
  };
  // string protocolName = 1;
  void clear_protocolname();
  const std::string& protocolname() const;
  void set_protocolname(const std::string& value);
  void set_protocolname(std::string&& value);
  void set_protocolname(const char* value);
  void set_protocolname(const char* value, size_t size);
  std::string* mutable_protocolname();
  std::string* release_protocolname();
  void set_allocated_protocolname(std::string* protocolname);
  private:
  const std::string& _internal_protocolname() const;
  void _internal_set_protocolname(const std::string& value);
  std::string* _internal_mutable_protocolname();
  public:

  // string listenAddress = 2;
  void clear_listenaddress();
  const std::string& listenaddress() const;
  void set_listenaddress(const std::string& value);
  void set_listenaddress(std::string&& value);
  void set_listenaddress(const char* value);
  void set_listenaddress(const char* value, size_t size);
  std::string* mutable_listenaddress();
  std::string* release_listenaddress();
  void set_allocated_listenaddress(std::string* listenaddress);
  private:
  const std::string& _internal_listenaddress() const;
  void _internal_set_listenaddress(const std::string& value);
  std::string* _internal_mutable_listenaddress();
  public:

  // string targetAddress = 3;
  void clear_targetaddress();
  const std::string& targetaddress() const;
  void set_targetaddress(const std::string& value);
  void set_targetaddress(std::string&& value);
  void set_targetaddress(const char* value);
  void set_targetaddress(const char* value, size_t size);
  std::string* mutable_targetaddress();
  std::string* release_targetaddress();
  void set_allocated_targetaddress(std::string* targetaddress);
  private:
  const std::string& _internal_targetaddress() const;
  void _internal_set_targetaddress(const std::string& value);
  std::string* _internal_mutable_targetaddress();
  public:

  // bool local = 4;
  void clear_local();
  bool local() const;
  void set_local(bool value);
  private:
  bool _internal_local() const;
  void _internal_set_local(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.P2PLsInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocolname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listenaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetaddress_;
  bool local_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class GetPeersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetPeersResponse) */ {
 public:
  GetPeersResponse();
  virtual ~GetPeersResponse();

  GetPeersResponse(const GetPeersResponse& from);
  GetPeersResponse(GetPeersResponse&& from) noexcept
    : GetPeersResponse() {
    *this = ::std::move(from);
  }

  inline GetPeersResponse& operator=(const GetPeersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeersResponse& operator=(GetPeersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeersResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeersResponse*>(
               &_GetPeersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPeersResponse& a, GetPeersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeersResponse* New() const final {
    return CreateMaybeMessage<GetPeersResponse>(nullptr);
  }

  GetPeersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeersResponse& from);
  void MergeFrom(const GetPeersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetPeersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerIDsFieldNumber = 1,
  };
  // repeated string peerIDs = 1;
  int peerids_size() const;
  private:
  int _internal_peerids_size() const;
  public:
  void clear_peerids();
  const std::string& peerids(int index) const;
  std::string* mutable_peerids(int index);
  void set_peerids(int index, const std::string& value);
  void set_peerids(int index, std::string&& value);
  void set_peerids(int index, const char* value);
  void set_peerids(int index, const char* value, size_t size);
  std::string* add_peerids();
  void add_peerids(const std::string& value);
  void add_peerids(std::string&& value);
  void add_peerids(const char* value);
  void add_peerids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peerids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peerids();
  private:
  const std::string& _internal_peerids(int index) const;
  std::string* _internal_add_peerids();
  public:

  // @@protoc_insertion_point(class_scope:pb.GetPeersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peerids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class ConnMgmtRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ConnMgmtRequest) */ {
 public:
  ConnMgmtRequest();
  virtual ~ConnMgmtRequest();

  ConnMgmtRequest(const ConnMgmtRequest& from);
  ConnMgmtRequest(ConnMgmtRequest&& from) noexcept
    : ConnMgmtRequest() {
    *this = ::std::move(from);
  }

  inline ConnMgmtRequest& operator=(const ConnMgmtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnMgmtRequest& operator=(ConnMgmtRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnMgmtRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnMgmtRequest* internal_default_instance() {
    return reinterpret_cast<const ConnMgmtRequest*>(
               &_ConnMgmtRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConnMgmtRequest& a, ConnMgmtRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnMgmtRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnMgmtRequest* New() const final {
    return CreateMaybeMessage<ConnMgmtRequest>(nullptr);
  }

  ConnMgmtRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnMgmtRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnMgmtRequest& from);
  void MergeFrom(const ConnMgmtRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnMgmtRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ConnMgmtRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiAddrsFieldNumber = 2,
    kPeerIDsFieldNumber = 3,
    kRequestTypeFieldNumber = 1,
  };
  // repeated string multiAddrs = 2;
  int multiaddrs_size() const;
  private:
  int _internal_multiaddrs_size() const;
  public:
  void clear_multiaddrs();
  const std::string& multiaddrs(int index) const;
  std::string* mutable_multiaddrs(int index);
  void set_multiaddrs(int index, const std::string& value);
  void set_multiaddrs(int index, std::string&& value);
  void set_multiaddrs(int index, const char* value);
  void set_multiaddrs(int index, const char* value, size_t size);
  std::string* add_multiaddrs();
  void add_multiaddrs(const std::string& value);
  void add_multiaddrs(std::string&& value);
  void add_multiaddrs(const char* value);
  void add_multiaddrs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& multiaddrs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_multiaddrs();
  private:
  const std::string& _internal_multiaddrs(int index) const;
  std::string* _internal_add_multiaddrs();
  public:

  // repeated string peerIDs = 3;
  int peerids_size() const;
  private:
  int _internal_peerids_size() const;
  public:
  void clear_peerids();
  const std::string& peerids(int index) const;
  std::string* mutable_peerids(int index);
  void set_peerids(int index, const std::string& value);
  void set_peerids(int index, std::string&& value);
  void set_peerids(int index, const char* value);
  void set_peerids(int index, const char* value, size_t size);
  std::string* add_peerids();
  void add_peerids(const std::string& value);
  void add_peerids(std::string&& value);
  void add_peerids(const char* value);
  void add_peerids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peerids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peerids();
  private:
  const std::string& _internal_peerids(int index) const;
  std::string* _internal_add_peerids();
  public:

  // .pb.CONNMGMTREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::CONNMGMTREQTYPE requesttype() const;
  void set_requesttype(::pb::CONNMGMTREQTYPE value);
  private:
  ::pb::CONNMGMTREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::CONNMGMTREQTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ConnMgmtRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> multiaddrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peerids_;
  int requesttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class ConnMgmtResponse_ConnectedEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnMgmtResponse_ConnectedEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnMgmtResponse_ConnectedEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  ConnMgmtResponse_ConnectedEntry_DoNotUse();
  ConnMgmtResponse_ConnectedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ConnMgmtResponse_ConnectedEntry_DoNotUse& other);
  static const ConnMgmtResponse_ConnectedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConnMgmtResponse_ConnectedEntry_DoNotUse*>(&_ConnMgmtResponse_ConnectedEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb.ConnMgmtResponse.ConnectedEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class ConnMgmtResponse_StatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnMgmtResponse_StatusEntry_DoNotUse, 
    std::string, ::pb::ConnMgmtStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnMgmtResponse_StatusEntry_DoNotUse, 
    std::string, ::pb::ConnMgmtStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ConnMgmtResponse_StatusEntry_DoNotUse();
  ConnMgmtResponse_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ConnMgmtResponse_StatusEntry_DoNotUse& other);
  static const ConnMgmtResponse_StatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConnMgmtResponse_StatusEntry_DoNotUse*>(&_ConnMgmtResponse_StatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb.ConnMgmtResponse.StatusEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class ConnMgmtResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ConnMgmtResponse) */ {
 public:
  ConnMgmtResponse();
  virtual ~ConnMgmtResponse();

  ConnMgmtResponse(const ConnMgmtResponse& from);
  ConnMgmtResponse(ConnMgmtResponse&& from) noexcept
    : ConnMgmtResponse() {
    *this = ::std::move(from);
  }

  inline ConnMgmtResponse& operator=(const ConnMgmtResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnMgmtResponse& operator=(ConnMgmtResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnMgmtResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnMgmtResponse* internal_default_instance() {
    return reinterpret_cast<const ConnMgmtResponse*>(
               &_ConnMgmtResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConnMgmtResponse& a, ConnMgmtResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnMgmtResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnMgmtResponse* New() const final {
    return CreateMaybeMessage<ConnMgmtResponse>(nullptr);
  }

  ConnMgmtResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnMgmtResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnMgmtResponse& from);
  void MergeFrom(const ConnMgmtResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnMgmtResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ConnMgmtResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConnectedFieldNumber = 2,
    kStatusFieldNumber = 3,
    kPeerIDsFieldNumber = 4,
    kRequestTypeFieldNumber = 1,
  };
  // map<string, bool> connected = 2;
  int connected_size() const;
  private:
  int _internal_connected_size() const;
  public:
  void clear_connected();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      _internal_connected() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      _internal_mutable_connected();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      connected() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      mutable_connected();

  // map<string, .pb.ConnMgmtStatus> status = 3;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >&
      _internal_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >*
      _internal_mutable_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >&
      status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >*
      mutable_status();

  // repeated string peerIDs = 4;
  int peerids_size() const;
  private:
  int _internal_peerids_size() const;
  public:
  void clear_peerids();
  const std::string& peerids(int index) const;
  std::string* mutable_peerids(int index);
  void set_peerids(int index, const std::string& value);
  void set_peerids(int index, std::string&& value);
  void set_peerids(int index, const char* value);
  void set_peerids(int index, const char* value, size_t size);
  std::string* add_peerids();
  void add_peerids(const std::string& value);
  void add_peerids(std::string&& value);
  void add_peerids(const char* value);
  void add_peerids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peerids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peerids();
  private:
  const std::string& _internal_peerids(int index) const;
  std::string* _internal_add_peerids();
  public:

  // .pb.CONNMGMTREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::CONNMGMTREQTYPE requesttype() const;
  void set_requesttype(::pb::CONNMGMTREQTYPE value);
  private:
  ::pb::CONNMGMTREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::CONNMGMTREQTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ConnMgmtResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ConnMgmtResponse_ConnectedEntry_DoNotUse,
      std::string, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > connected_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ConnMgmtResponse_StatusEntry_DoNotUse,
      std::string, ::pb::ConnMgmtStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peerids_;
  int requesttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class ConnMgmtStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ConnMgmtStatus) */ {
 public:
  ConnMgmtStatus();
  virtual ~ConnMgmtStatus();

  ConnMgmtStatus(const ConnMgmtStatus& from);
  ConnMgmtStatus(ConnMgmtStatus&& from) noexcept
    : ConnMgmtStatus() {
    *this = ::std::move(from);
  }

  inline ConnMgmtStatus& operator=(const ConnMgmtStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnMgmtStatus& operator=(ConnMgmtStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnMgmtStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnMgmtStatus* internal_default_instance() {
    return reinterpret_cast<const ConnMgmtStatus*>(
               &_ConnMgmtStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConnMgmtStatus& a, ConnMgmtStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnMgmtStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnMgmtStatus* New() const final {
    return CreateMaybeMessage<ConnMgmtStatus>(nullptr);
  }

  ConnMgmtStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnMgmtStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnMgmtStatus& from);
  void MergeFrom(const ConnMgmtStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnMgmtStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ConnMgmtStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kDisconnectedFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool disconnected = 1;
  void clear_disconnected();
  bool disconnected() const;
  void set_disconnected(bool value);
  private:
  bool _internal_disconnected() const;
  void _internal_set_disconnected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ConnMgmtStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool disconnected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class ExtrasRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ExtrasRequest) */ {
 public:
  ExtrasRequest();
  virtual ~ExtrasRequest();

  ExtrasRequest(const ExtrasRequest& from);
  ExtrasRequest(ExtrasRequest&& from) noexcept
    : ExtrasRequest() {
    *this = ::std::move(from);
  }

  inline ExtrasRequest& operator=(const ExtrasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtrasRequest& operator=(ExtrasRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtrasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtrasRequest* internal_default_instance() {
    return reinterpret_cast<const ExtrasRequest*>(
               &_ExtrasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ExtrasRequest& a, ExtrasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtrasRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtrasRequest* New() const final {
    return CreateMaybeMessage<ExtrasRequest>(nullptr);
  }

  ExtrasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtrasRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtrasRequest& from);
  void MergeFrom(const ExtrasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtrasRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ExtrasRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTypeFieldNumber = 1,
    kExtrasFeatureFieldNumber = 2,
  };
  // .pb.EXTRASREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::EXTRASREQTYPE requesttype() const;
  void set_requesttype(::pb::EXTRASREQTYPE value);
  private:
  ::pb::EXTRASREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::EXTRASREQTYPE value);
  public:

  // .pb.EXTRASTYPE extrasFeature = 2;
  void clear_extrasfeature();
  ::pb::EXTRASTYPE extrasfeature() const;
  void set_extrasfeature(::pb::EXTRASTYPE value);
  private:
  ::pb::EXTRASTYPE _internal_extrasfeature() const;
  void _internal_set_extrasfeature(::pb::EXTRASTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ExtrasRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int requesttype_;
  int extrasfeature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class BlockstoreRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BlockstoreRequest) */ {
 public:
  BlockstoreRequest();
  virtual ~BlockstoreRequest();

  BlockstoreRequest(const BlockstoreRequest& from);
  BlockstoreRequest(BlockstoreRequest&& from) noexcept
    : BlockstoreRequest() {
    *this = ::std::move(from);
  }

  inline BlockstoreRequest& operator=(const BlockstoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockstoreRequest& operator=(BlockstoreRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockstoreRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockstoreRequest* internal_default_instance() {
    return reinterpret_cast<const BlockstoreRequest*>(
               &_BlockstoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BlockstoreRequest& a, BlockstoreRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockstoreRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockstoreRequest* New() const final {
    return CreateMaybeMessage<BlockstoreRequest>(nullptr);
  }

  BlockstoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockstoreRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockstoreRequest& from);
  void MergeFrom(const BlockstoreRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockstoreRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BlockstoreRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqOptsFieldNumber = 2,
    kCidsFieldNumber = 3,
    kDataFieldNumber = 4,
    kCidVersionFieldNumber = 5,
    kHashFuncFieldNumber = 7,
    kRequestTypeFieldNumber = 1,
  };
  // repeated .pb.BSREQOPTS reqOpts = 2;
  int reqopts_size() const;
  private:
  int _internal_reqopts_size() const;
  public:
  void clear_reqopts();
  private:
  ::pb::BSREQOPTS _internal_reqopts(int index) const;
  void _internal_add_reqopts(::pb::BSREQOPTS value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_reqopts();
  public:
  ::pb::BSREQOPTS reqopts(int index) const;
  void set_reqopts(int index, ::pb::BSREQOPTS value);
  void add_reqopts(::pb::BSREQOPTS value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& reqopts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_reqopts();

  // repeated string cids = 3;
  int cids_size() const;
  private:
  int _internal_cids_size() const;
  public:
  void clear_cids();
  const std::string& cids(int index) const;
  std::string* mutable_cids(int index);
  void set_cids(int index, const std::string& value);
  void set_cids(int index, std::string&& value);
  void set_cids(int index, const char* value);
  void set_cids(int index, const char* value, size_t size);
  std::string* add_cids();
  void add_cids(const std::string& value);
  void add_cids(std::string&& value);
  void add_cids(const char* value);
  void add_cids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cids();
  private:
  const std::string& _internal_cids(int index) const;
  std::string* _internal_add_cids();
  public:

  // repeated bytes data = 4;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // string cidVersion = 5;
  void clear_cidversion();
  const std::string& cidversion() const;
  void set_cidversion(const std::string& value);
  void set_cidversion(std::string&& value);
  void set_cidversion(const char* value);
  void set_cidversion(const char* value, size_t size);
  std::string* mutable_cidversion();
  std::string* release_cidversion();
  void set_allocated_cidversion(std::string* cidversion);
  private:
  const std::string& _internal_cidversion() const;
  void _internal_set_cidversion(const std::string& value);
  std::string* _internal_mutable_cidversion();
  public:

  // string hashFunc = 7;
  void clear_hashfunc();
  const std::string& hashfunc() const;
  void set_hashfunc(const std::string& value);
  void set_hashfunc(std::string&& value);
  void set_hashfunc(const char* value);
  void set_hashfunc(const char* value, size_t size);
  std::string* mutable_hashfunc();
  std::string* release_hashfunc();
  void set_allocated_hashfunc(std::string* hashfunc);
  private:
  const std::string& _internal_hashfunc() const;
  void _internal_set_hashfunc(const std::string& value);
  std::string* _internal_mutable_hashfunc();
  public:

  // .pb.BSREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::BSREQTYPE requesttype() const;
  void set_requesttype(::pb::BSREQTYPE value);
  private:
  ::pb::BSREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::BSREQTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BlockstoreRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> reqopts_;
  mutable std::atomic<int> _reqopts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cidversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashfunc_;
  int requesttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class BlockstoreResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BlockstoreResponse) */ {
 public:
  BlockstoreResponse();
  virtual ~BlockstoreResponse();

  BlockstoreResponse(const BlockstoreResponse& from);
  BlockstoreResponse(BlockstoreResponse&& from) noexcept
    : BlockstoreResponse() {
    *this = ::std::move(from);
  }

  inline BlockstoreResponse& operator=(const BlockstoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockstoreResponse& operator=(BlockstoreResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockstoreResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockstoreResponse* internal_default_instance() {
    return reinterpret_cast<const BlockstoreResponse*>(
               &_BlockstoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BlockstoreResponse& a, BlockstoreResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockstoreResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockstoreResponse* New() const final {
    return CreateMaybeMessage<BlockstoreResponse>(nullptr);
  }

  BlockstoreResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockstoreResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockstoreResponse& from);
  void MergeFrom(const BlockstoreResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockstoreResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BlockstoreResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kRequestTypeFieldNumber = 1,
  };
  // repeated .pb.Block blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::pb::Block* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Block >*
      mutable_blocks();
  private:
  const ::pb::Block& _internal_blocks(int index) const;
  ::pb::Block* _internal_add_blocks();
  public:
  const ::pb::Block& blocks(int index) const;
  ::pb::Block* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Block >&
      blocks() const;

  // .pb.BSREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::BSREQTYPE requesttype() const;
  void set_requesttype(::pb::BSREQTYPE value);
  private:
  ::pb::BSREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::BSREQTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BlockstoreResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Block > blocks_;
  int requesttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Block :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Block";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string cid = 1;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:pb.Block)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class DagRequest_LinksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DagRequest_LinksEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DagRequest_LinksEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DagRequest_LinksEntry_DoNotUse();
  DagRequest_LinksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DagRequest_LinksEntry_DoNotUse& other);
  static const DagRequest_LinksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DagRequest_LinksEntry_DoNotUse*>(&_DagRequest_LinksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb.DagRequest.LinksEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb.DagRequest.LinksEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class DagRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.DagRequest) */ {
 public:
  DagRequest();
  virtual ~DagRequest();

  DagRequest(const DagRequest& from);
  DagRequest(DagRequest&& from) noexcept
    : DagRequest() {
    *this = ::std::move(from);
  }

  inline DagRequest& operator=(const DagRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DagRequest& operator=(DagRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DagRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DagRequest* internal_default_instance() {
    return reinterpret_cast<const DagRequest*>(
               &_DagRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DagRequest& a, DagRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DagRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DagRequest* New() const final {
    return CreateMaybeMessage<DagRequest>(nullptr);
  }

  DagRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DagRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DagRequest& from);
  void MergeFrom(const DagRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DagRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.DagRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 8,
    kDataFieldNumber = 2,
    kObjectEncodingFieldNumber = 3,
    kSerializationFormatFieldNumber = 4,
    kHashFuncFieldNumber = 5,
    kHashFieldNumber = 7,
    kCidVersionFieldNumber = 6,
    kRequestTypeFieldNumber = 1,
  };
  // map<string, string> links = 8;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_links() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_links();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      links() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_links();

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string objectEncoding = 3;
  void clear_objectencoding();
  const std::string& objectencoding() const;
  void set_objectencoding(const std::string& value);
  void set_objectencoding(std::string&& value);
  void set_objectencoding(const char* value);
  void set_objectencoding(const char* value, size_t size);
  std::string* mutable_objectencoding();
  std::string* release_objectencoding();
  void set_allocated_objectencoding(std::string* objectencoding);
  private:
  const std::string& _internal_objectencoding() const;
  void _internal_set_objectencoding(const std::string& value);
  std::string* _internal_mutable_objectencoding();
  public:

  // string serializationFormat = 4;
  void clear_serializationformat();
  const std::string& serializationformat() const;
  void set_serializationformat(const std::string& value);
  void set_serializationformat(std::string&& value);
  void set_serializationformat(const char* value);
  void set_serializationformat(const char* value, size_t size);
  std::string* mutable_serializationformat();
  std::string* release_serializationformat();
  void set_allocated_serializationformat(std::string* serializationformat);
  private:
  const std::string& _internal_serializationformat() const;
  void _internal_set_serializationformat(const std::string& value);
  std::string* _internal_mutable_serializationformat();
  public:

  // string hashFunc = 5;
  void clear_hashfunc();
  const std::string& hashfunc() const;
  void set_hashfunc(const std::string& value);
  void set_hashfunc(std::string&& value);
  void set_hashfunc(const char* value);
  void set_hashfunc(const char* value, size_t size);
  std::string* mutable_hashfunc();
  std::string* release_hashfunc();
  void set_allocated_hashfunc(std::string* hashfunc);
  private:
  const std::string& _internal_hashfunc() const;
  void _internal_set_hashfunc(const std::string& value);
  std::string* _internal_mutable_hashfunc();
  public:

  // string hash = 7;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int64 cidVersion = 6;
  void clear_cidversion();
  ::PROTOBUF_NAMESPACE_ID::int64 cidversion() const;
  void set_cidversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cidversion() const;
  void _internal_set_cidversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .pb.DAGREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::DAGREQTYPE requesttype() const;
  void set_requesttype(::pb::DAGREQTYPE value);
  private:
  ::pb::DAGREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::DAGREQTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pb.DagRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DagRequest_LinksEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > links_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectencoding_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serializationformat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashfunc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 cidversion_;
  int requesttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class DagResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.DagResponse) */ {
 public:
  DagResponse();
  virtual ~DagResponse();

  DagResponse(const DagResponse& from);
  DagResponse(DagResponse&& from) noexcept
    : DagResponse() {
    *this = ::std::move(from);
  }

  inline DagResponse& operator=(const DagResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DagResponse& operator=(DagResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DagResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DagResponse* internal_default_instance() {
    return reinterpret_cast<const DagResponse*>(
               &_DagResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DagResponse& a, DagResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DagResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DagResponse* New() const final {
    return CreateMaybeMessage<DagResponse>(nullptr);
  }

  DagResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DagResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DagResponse& from);
  void MergeFrom(const DagResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DagResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.DagResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 2,
    kLinksFieldNumber = 4,
    kRawDataFieldNumber = 3,
    kRequestTypeFieldNumber = 1,
  };
  // repeated string hashes = 2;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  const std::string& hashes(int index) const;
  std::string* mutable_hashes(int index);
  void set_hashes(int index, const std::string& value);
  void set_hashes(int index, std::string&& value);
  void set_hashes(int index, const char* value);
  void set_hashes(int index, const char* value, size_t size);
  std::string* add_hashes();
  void add_hashes(const std::string& value);
  void add_hashes(std::string&& value);
  void add_hashes(const char* value);
  void add_hashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hashes();
  private:
  const std::string& _internal_hashes(int index) const;
  std::string* _internal_add_hashes();
  public:

  // repeated .pb.IPLDLink links = 4;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::pb::IPLDLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::IPLDLink >*
      mutable_links();
  private:
  const ::pb::IPLDLink& _internal_links(int index) const;
  ::pb::IPLDLink* _internal_add_links();
  public:
  const ::pb::IPLDLink& links(int index) const;
  ::pb::IPLDLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::IPLDLink >&
      links() const;

  // bytes rawData = 3;
  void clear_rawdata();
  const std::string& rawdata() const;
  void set_rawdata(const std::string& value);
  void set_rawdata(std::string&& value);
  void set_rawdata(const char* value);
  void set_rawdata(const void* value, size_t size);
  std::string* mutable_rawdata();
  std::string* release_rawdata();
  void set_allocated_rawdata(std::string* rawdata);
  private:
  const std::string& _internal_rawdata() const;
  void _internal_set_rawdata(const std::string& value);
  std::string* _internal_mutable_rawdata();
  public:

  // .pb.DAGREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::DAGREQTYPE requesttype() const;
  void set_requesttype(::pb::DAGREQTYPE value);
  private:
  ::pb::DAGREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::DAGREQTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pb.DagResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hashes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::IPLDLink > links_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawdata_;
  int requesttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class IPLDLink :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.IPLDLink) */ {
 public:
  IPLDLink();
  virtual ~IPLDLink();

  IPLDLink(const IPLDLink& from);
  IPLDLink(IPLDLink&& from) noexcept
    : IPLDLink() {
    *this = ::std::move(from);
  }

  inline IPLDLink& operator=(const IPLDLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPLDLink& operator=(IPLDLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPLDLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPLDLink* internal_default_instance() {
    return reinterpret_cast<const IPLDLink*>(
               &_IPLDLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(IPLDLink& a, IPLDLink& b) {
    a.Swap(&b);
  }
  inline void Swap(IPLDLink* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPLDLink* New() const final {
    return CreateMaybeMessage<IPLDLink>(nullptr);
  }

  IPLDLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPLDLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPLDLink& from);
  void MergeFrom(const IPLDLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPLDLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.IPLDLink";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kNameFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.IPLDLink)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class IPLDNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.IPLDNode) */ {
 public:
  IPLDNode();
  virtual ~IPLDNode();

  IPLDNode(const IPLDNode& from);
  IPLDNode(IPLDNode&& from) noexcept
    : IPLDNode() {
    *this = ::std::move(from);
  }

  inline IPLDNode& operator=(const IPLDNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPLDNode& operator=(IPLDNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPLDNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPLDNode* internal_default_instance() {
    return reinterpret_cast<const IPLDNode*>(
               &_IPLDNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IPLDNode& a, IPLDNode& b) {
    a.Swap(&b);
  }
  inline void Swap(IPLDNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPLDNode* New() const final {
    return CreateMaybeMessage<IPLDNode>(nullptr);
  }

  IPLDNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPLDNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPLDNode& from);
  void MergeFrom(const IPLDNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPLDNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.IPLDNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 2,
    kDataFieldNumber = 1,
  };
  // repeated .pb.IPLDLink links = 2;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::pb::IPLDLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::IPLDLink >*
      mutable_links();
  private:
  const ::pb::IPLDLink& _internal_links(int index) const;
  ::pb::IPLDLink* _internal_add_links();
  public:
  const ::pb::IPLDLink& links(int index) const;
  ::pb::IPLDLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::IPLDLink >&
      links() const;

  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:pb.IPLDNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::IPLDLink > links_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class KeystoreRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.KeystoreRequest) */ {
 public:
  KeystoreRequest();
  virtual ~KeystoreRequest();

  KeystoreRequest(const KeystoreRequest& from);
  KeystoreRequest(KeystoreRequest&& from) noexcept
    : KeystoreRequest() {
    *this = ::std::move(from);
  }

  inline KeystoreRequest& operator=(const KeystoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeystoreRequest& operator=(KeystoreRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeystoreRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeystoreRequest* internal_default_instance() {
    return reinterpret_cast<const KeystoreRequest*>(
               &_KeystoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(KeystoreRequest& a, KeystoreRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeystoreRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeystoreRequest* New() const final {
    return CreateMaybeMessage<KeystoreRequest>(nullptr);
  }

  KeystoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeystoreRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeystoreRequest& from);
  void MergeFrom(const KeystoreRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeystoreRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.KeystoreRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPrivateKeyFieldNumber = 3,
    kRequestTypeFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes privateKey = 3;
  void clear_privatekey();
  const std::string& privatekey() const;
  void set_privatekey(const std::string& value);
  void set_privatekey(std::string&& value);
  void set_privatekey(const char* value);
  void set_privatekey(const void* value, size_t size);
  std::string* mutable_privatekey();
  std::string* release_privatekey();
  void set_allocated_privatekey(std::string* privatekey);
  private:
  const std::string& _internal_privatekey() const;
  void _internal_set_privatekey(const std::string& value);
  std::string* _internal_mutable_privatekey();
  public:

  // .pb.KSREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::KSREQTYPE requesttype() const;
  void set_requesttype(::pb::KSREQTYPE value);
  private:
  ::pb::KSREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::KSREQTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pb.KeystoreRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privatekey_;
  int requesttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class KeystoreResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.KeystoreResponse) */ {
 public:
  KeystoreResponse();
  virtual ~KeystoreResponse();

  KeystoreResponse(const KeystoreResponse& from);
  KeystoreResponse(KeystoreResponse&& from) noexcept
    : KeystoreResponse() {
    *this = ::std::move(from);
  }

  inline KeystoreResponse& operator=(const KeystoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeystoreResponse& operator=(KeystoreResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeystoreResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeystoreResponse* internal_default_instance() {
    return reinterpret_cast<const KeystoreResponse*>(
               &_KeystoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(KeystoreResponse& a, KeystoreResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KeystoreResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeystoreResponse* New() const final {
    return CreateMaybeMessage<KeystoreResponse>(nullptr);
  }

  KeystoreResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeystoreResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeystoreResponse& from);
  void MergeFrom(const KeystoreResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeystoreResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.KeystoreResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyNamesFieldNumber = 3,
    kPrivateKeyFieldNumber = 2,
    kRequestTypeFieldNumber = 1,
    kHasFieldNumber = 4,
  };
  // repeated string keyNames = 3;
  int keynames_size() const;
  private:
  int _internal_keynames_size() const;
  public:
  void clear_keynames();
  const std::string& keynames(int index) const;
  std::string* mutable_keynames(int index);
  void set_keynames(int index, const std::string& value);
  void set_keynames(int index, std::string&& value);
  void set_keynames(int index, const char* value);
  void set_keynames(int index, const char* value, size_t size);
  std::string* add_keynames();
  void add_keynames(const std::string& value);
  void add_keynames(std::string&& value);
  void add_keynames(const char* value);
  void add_keynames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keynames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keynames();
  private:
  const std::string& _internal_keynames(int index) const;
  std::string* _internal_add_keynames();
  public:

  // bytes privateKey = 2;
  void clear_privatekey();
  const std::string& privatekey() const;
  void set_privatekey(const std::string& value);
  void set_privatekey(std::string&& value);
  void set_privatekey(const char* value);
  void set_privatekey(const void* value, size_t size);
  std::string* mutable_privatekey();
  std::string* release_privatekey();
  void set_allocated_privatekey(std::string* privatekey);
  private:
  const std::string& _internal_privatekey() const;
  void _internal_set_privatekey(const std::string& value);
  std::string* _internal_mutable_privatekey();
  public:

  // .pb.KSREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::KSREQTYPE requesttype() const;
  void set_requesttype(::pb::KSREQTYPE value);
  private:
  ::pb::KSREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::KSREQTYPE value);
  public:

  // bool has = 4;
  void clear_has();
  bool has() const;
  void set_has(bool value);
  private:
  bool _internal_has() const;
  void _internal_set_has(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.KeystoreResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keynames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privatekey_;
  int requesttype_;
  bool has_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class PersistRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PersistRequest) */ {
 public:
  PersistRequest();
  virtual ~PersistRequest();

  PersistRequest(const PersistRequest& from);
  PersistRequest(PersistRequest&& from) noexcept
    : PersistRequest() {
    *this = ::std::move(from);
  }

  inline PersistRequest& operator=(const PersistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistRequest& operator=(PersistRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersistRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistRequest* internal_default_instance() {
    return reinterpret_cast<const PersistRequest*>(
               &_PersistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PersistRequest& a, PersistRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistRequest* New() const final {
    return CreateMaybeMessage<PersistRequest>(nullptr);
  }

  PersistRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersistRequest& from);
  void MergeFrom(const PersistRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PersistRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidsFieldNumber = 1,
  };
  // repeated string cids = 1;
  int cids_size() const;
  private:
  int _internal_cids_size() const;
  public:
  void clear_cids();
  const std::string& cids(int index) const;
  std::string* mutable_cids(int index);
  void set_cids(int index, const std::string& value);
  void set_cids(int index, std::string&& value);
  void set_cids(int index, const char* value);
  void set_cids(int index, const char* value, size_t size);
  std::string* add_cids();
  void add_cids(const std::string& value);
  void add_cids(std::string&& value);
  void add_cids(const char* value);
  void add_cids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cids();
  private:
  const std::string& _internal_cids(int index) const;
  std::string* _internal_add_cids();
  public:

  // @@protoc_insertion_point(class_scope:pb.PersistRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class PersistResponse_StatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PersistResponse_StatusEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PersistResponse_StatusEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  PersistResponse_StatusEntry_DoNotUse();
  PersistResponse_StatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PersistResponse_StatusEntry_DoNotUse& other);
  static const PersistResponse_StatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PersistResponse_StatusEntry_DoNotUse*>(&_PersistResponse_StatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb.PersistResponse.StatusEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[21];
  }

  public:
};

// -------------------------------------------------------------------

class PersistResponse_ErrorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PersistResponse_ErrorsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PersistResponse_ErrorsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PersistResponse_ErrorsEntry_DoNotUse();
  PersistResponse_ErrorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PersistResponse_ErrorsEntry_DoNotUse& other);
  static const PersistResponse_ErrorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PersistResponse_ErrorsEntry_DoNotUse*>(&_PersistResponse_ErrorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb.PersistResponse.ErrorsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb.PersistResponse.ErrorsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[22];
  }

  public:
};

// -------------------------------------------------------------------

class PersistResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PersistResponse) */ {
 public:
  PersistResponse();
  virtual ~PersistResponse();

  PersistResponse(const PersistResponse& from);
  PersistResponse(PersistResponse&& from) noexcept
    : PersistResponse() {
    *this = ::std::move(from);
  }

  inline PersistResponse& operator=(const PersistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistResponse& operator=(PersistResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersistResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistResponse* internal_default_instance() {
    return reinterpret_cast<const PersistResponse*>(
               &_PersistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PersistResponse& a, PersistResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistResponse* New() const final {
    return CreateMaybeMessage<PersistResponse>(nullptr);
  }

  PersistResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersistResponse& from);
  void MergeFrom(const PersistResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PersistResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kErrorsFieldNumber = 2,
  };
  // map<string, bool> status = 1;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      _internal_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      _internal_mutable_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      mutable_status();

  // map<string, string> errors = 2;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_errors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_errors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      errors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_errors();

  // @@protoc_insertion_point(class_scope:pb.PersistResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PersistResponse_StatusEntry_DoNotUse,
      std::string, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > status_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PersistResponse_ErrorsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// P2PRequest

// .pb.P2PREQTYPE requestType = 1;
inline void P2PRequest::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::P2PREQTYPE P2PRequest::_internal_requesttype() const {
  return static_cast< ::pb::P2PREQTYPE >(requesttype_);
}
inline ::pb::P2PREQTYPE P2PRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.P2PRequest.requestType)
  return _internal_requesttype();
}
inline void P2PRequest::_internal_set_requesttype(::pb::P2PREQTYPE value) {
  
  requesttype_ = value;
}
inline void P2PRequest::set_requesttype(::pb::P2PREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.P2PRequest.requestType)
}

// bool all = 2;
inline void P2PRequest::clear_all() {
  all_ = false;
}
inline bool P2PRequest::_internal_all() const {
  return all_;
}
inline bool P2PRequest::all() const {
  // @@protoc_insertion_point(field_get:pb.P2PRequest.all)
  return _internal_all();
}
inline void P2PRequest::_internal_set_all(bool value) {
  
  all_ = value;
}
inline void P2PRequest::set_all(bool value) {
  _internal_set_all(value);
  // @@protoc_insertion_point(field_set:pb.P2PRequest.all)
}

// bool verbose = 3;
inline void P2PRequest::clear_verbose() {
  verbose_ = false;
}
inline bool P2PRequest::_internal_verbose() const {
  return verbose_;
}
inline bool P2PRequest::verbose() const {
  // @@protoc_insertion_point(field_get:pb.P2PRequest.verbose)
  return _internal_verbose();
}
inline void P2PRequest::_internal_set_verbose(bool value) {
  
  verbose_ = value;
}
inline void P2PRequest::set_verbose(bool value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:pb.P2PRequest.verbose)
}

// string protocolName = 4;
inline void P2PRequest::clear_protocolname() {
  protocolname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& P2PRequest::protocolname() const {
  // @@protoc_insertion_point(field_get:pb.P2PRequest.protocolName)
  return _internal_protocolname();
}
inline void P2PRequest::set_protocolname(const std::string& value) {
  _internal_set_protocolname(value);
  // @@protoc_insertion_point(field_set:pb.P2PRequest.protocolName)
}
inline std::string* P2PRequest::mutable_protocolname() {
  // @@protoc_insertion_point(field_mutable:pb.P2PRequest.protocolName)
  return _internal_mutable_protocolname();
}
inline const std::string& P2PRequest::_internal_protocolname() const {
  return protocolname_.GetNoArena();
}
inline void P2PRequest::_internal_set_protocolname(const std::string& value) {
  
  protocolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void P2PRequest::set_protocolname(std::string&& value) {
  
  protocolname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.P2PRequest.protocolName)
}
inline void P2PRequest::set_protocolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.P2PRequest.protocolName)
}
inline void P2PRequest::set_protocolname(const char* value, size_t size) {
  
  protocolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.P2PRequest.protocolName)
}
inline std::string* P2PRequest::_internal_mutable_protocolname() {
  
  return protocolname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* P2PRequest::release_protocolname() {
  // @@protoc_insertion_point(field_release:pb.P2PRequest.protocolName)
  
  return protocolname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void P2PRequest::set_allocated_protocolname(std::string* protocolname) {
  if (protocolname != nullptr) {
    
  } else {
    
  }
  protocolname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocolname);
  // @@protoc_insertion_point(field_set_allocated:pb.P2PRequest.protocolName)
}

// string listenAddress = 5;
inline void P2PRequest::clear_listenaddress() {
  listenaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& P2PRequest::listenaddress() const {
  // @@protoc_insertion_point(field_get:pb.P2PRequest.listenAddress)
  return _internal_listenaddress();
}
inline void P2PRequest::set_listenaddress(const std::string& value) {
  _internal_set_listenaddress(value);
  // @@protoc_insertion_point(field_set:pb.P2PRequest.listenAddress)
}
inline std::string* P2PRequest::mutable_listenaddress() {
  // @@protoc_insertion_point(field_mutable:pb.P2PRequest.listenAddress)
  return _internal_mutable_listenaddress();
}
inline const std::string& P2PRequest::_internal_listenaddress() const {
  return listenaddress_.GetNoArena();
}
inline void P2PRequest::_internal_set_listenaddress(const std::string& value) {
  
  listenaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void P2PRequest::set_listenaddress(std::string&& value) {
  
  listenaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.P2PRequest.listenAddress)
}
inline void P2PRequest::set_listenaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  listenaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.P2PRequest.listenAddress)
}
inline void P2PRequest::set_listenaddress(const char* value, size_t size) {
  
  listenaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.P2PRequest.listenAddress)
}
inline std::string* P2PRequest::_internal_mutable_listenaddress() {
  
  return listenaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* P2PRequest::release_listenaddress() {
  // @@protoc_insertion_point(field_release:pb.P2PRequest.listenAddress)
  
  return listenaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void P2PRequest::set_allocated_listenaddress(std::string* listenaddress) {
  if (listenaddress != nullptr) {
    
  } else {
    
  }
  listenaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), listenaddress);
  // @@protoc_insertion_point(field_set_allocated:pb.P2PRequest.listenAddress)
}

// string targetAddress = 6;
inline void P2PRequest::clear_targetaddress() {
  targetaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& P2PRequest::targetaddress() const {
  // @@protoc_insertion_point(field_get:pb.P2PRequest.targetAddress)
  return _internal_targetaddress();
}
inline void P2PRequest::set_targetaddress(const std::string& value) {
  _internal_set_targetaddress(value);
  // @@protoc_insertion_point(field_set:pb.P2PRequest.targetAddress)
}
inline std::string* P2PRequest::mutable_targetaddress() {
  // @@protoc_insertion_point(field_mutable:pb.P2PRequest.targetAddress)
  return _internal_mutable_targetaddress();
}
inline const std::string& P2PRequest::_internal_targetaddress() const {
  return targetaddress_.GetNoArena();
}
inline void P2PRequest::_internal_set_targetaddress(const std::string& value) {
  
  targetaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void P2PRequest::set_targetaddress(std::string&& value) {
  
  targetaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.P2PRequest.targetAddress)
}
inline void P2PRequest::set_targetaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.P2PRequest.targetAddress)
}
inline void P2PRequest::set_targetaddress(const char* value, size_t size) {
  
  targetaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.P2PRequest.targetAddress)
}
inline std::string* P2PRequest::_internal_mutable_targetaddress() {
  
  return targetaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* P2PRequest::release_targetaddress() {
  // @@protoc_insertion_point(field_release:pb.P2PRequest.targetAddress)
  
  return targetaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void P2PRequest::set_allocated_targetaddress(std::string* targetaddress) {
  if (targetaddress != nullptr) {
    
  } else {
    
  }
  targetaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetaddress);
  // @@protoc_insertion_point(field_set_allocated:pb.P2PRequest.targetAddress)
}

// string remoteAddress = 7;
inline void P2PRequest::clear_remoteaddress() {
  remoteaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& P2PRequest::remoteaddress() const {
  // @@protoc_insertion_point(field_get:pb.P2PRequest.remoteAddress)
  return _internal_remoteaddress();
}
inline void P2PRequest::set_remoteaddress(const std::string& value) {
  _internal_set_remoteaddress(value);
  // @@protoc_insertion_point(field_set:pb.P2PRequest.remoteAddress)
}
inline std::string* P2PRequest::mutable_remoteaddress() {
  // @@protoc_insertion_point(field_mutable:pb.P2PRequest.remoteAddress)
  return _internal_mutable_remoteaddress();
}
inline const std::string& P2PRequest::_internal_remoteaddress() const {
  return remoteaddress_.GetNoArena();
}
inline void P2PRequest::_internal_set_remoteaddress(const std::string& value) {
  
  remoteaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void P2PRequest::set_remoteaddress(std::string&& value) {
  
  remoteaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.P2PRequest.remoteAddress)
}
inline void P2PRequest::set_remoteaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remoteaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.P2PRequest.remoteAddress)
}
inline void P2PRequest::set_remoteaddress(const char* value, size_t size) {
  
  remoteaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.P2PRequest.remoteAddress)
}
inline std::string* P2PRequest::_internal_mutable_remoteaddress() {
  
  return remoteaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* P2PRequest::release_remoteaddress() {
  // @@protoc_insertion_point(field_release:pb.P2PRequest.remoteAddress)
  
  return remoteaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void P2PRequest::set_allocated_remoteaddress(std::string* remoteaddress) {
  if (remoteaddress != nullptr) {
    
  } else {
    
  }
  remoteaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remoteaddress);
  // @@protoc_insertion_point(field_set_allocated:pb.P2PRequest.remoteAddress)
}

// bool allowCustomProtocols = 8;
inline void P2PRequest::clear_allowcustomprotocols() {
  allowcustomprotocols_ = false;
}
inline bool P2PRequest::_internal_allowcustomprotocols() const {
  return allowcustomprotocols_;
}
inline bool P2PRequest::allowcustomprotocols() const {
  // @@protoc_insertion_point(field_get:pb.P2PRequest.allowCustomProtocols)
  return _internal_allowcustomprotocols();
}
inline void P2PRequest::_internal_set_allowcustomprotocols(bool value) {
  
  allowcustomprotocols_ = value;
}
inline void P2PRequest::set_allowcustomprotocols(bool value) {
  _internal_set_allowcustomprotocols(value);
  // @@protoc_insertion_point(field_set:pb.P2PRequest.allowCustomProtocols)
}

// bool reportPeerID = 9;
inline void P2PRequest::clear_reportpeerid() {
  reportpeerid_ = false;
}
inline bool P2PRequest::_internal_reportpeerid() const {
  return reportpeerid_;
}
inline bool P2PRequest::reportpeerid() const {
  // @@protoc_insertion_point(field_get:pb.P2PRequest.reportPeerID)
  return _internal_reportpeerid();
}
inline void P2PRequest::_internal_set_reportpeerid(bool value) {
  
  reportpeerid_ = value;
}
inline void P2PRequest::set_reportpeerid(bool value) {
  _internal_set_reportpeerid(value);
  // @@protoc_insertion_point(field_set:pb.P2PRequest.reportPeerID)
}

// -------------------------------------------------------------------

// P2PResponse

// .pb.P2PREQTYPE requestType = 1;
inline void P2PResponse::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::P2PREQTYPE P2PResponse::_internal_requesttype() const {
  return static_cast< ::pb::P2PREQTYPE >(requesttype_);
}
inline ::pb::P2PREQTYPE P2PResponse::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.P2PResponse.requestType)
  return _internal_requesttype();
}
inline void P2PResponse::_internal_set_requesttype(::pb::P2PREQTYPE value) {
  
  requesttype_ = value;
}
inline void P2PResponse::set_requesttype(::pb::P2PREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.P2PResponse.requestType)
}

// repeated string names = 2;
inline int P2PResponse::_internal_names_size() const {
  return names_.size();
}
inline int P2PResponse::names_size() const {
  return _internal_names_size();
}
inline void P2PResponse::clear_names() {
  names_.Clear();
}
inline std::string* P2PResponse::add_names() {
  // @@protoc_insertion_point(field_add_mutable:pb.P2PResponse.names)
  return _internal_add_names();
}
inline const std::string& P2PResponse::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& P2PResponse::names(int index) const {
  // @@protoc_insertion_point(field_get:pb.P2PResponse.names)
  return _internal_names(index);
}
inline std::string* P2PResponse::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:pb.P2PResponse.names)
  return names_.Mutable(index);
}
inline void P2PResponse::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.P2PResponse.names)
  names_.Mutable(index)->assign(value);
}
inline void P2PResponse::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.P2PResponse.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void P2PResponse::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.P2PResponse.names)
}
inline void P2PResponse::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.P2PResponse.names)
}
inline std::string* P2PResponse::_internal_add_names() {
  return names_.Add();
}
inline void P2PResponse::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.P2PResponse.names)
}
inline void P2PResponse::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.P2PResponse.names)
}
inline void P2PResponse::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.P2PResponse.names)
}
inline void P2PResponse::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.P2PResponse.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P2PResponse::names() const {
  // @@protoc_insertion_point(field_list:pb.P2PResponse.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P2PResponse::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:pb.P2PResponse.names)
  return &names_;
}

// int32 connsClosed = 3;
inline void P2PResponse::clear_connsclosed() {
  connsclosed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PResponse::_internal_connsclosed() const {
  return connsclosed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PResponse::connsclosed() const {
  // @@protoc_insertion_point(field_get:pb.P2PResponse.connsClosed)
  return _internal_connsclosed();
}
inline void P2PResponse::_internal_set_connsclosed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  connsclosed_ = value;
}
inline void P2PResponse::set_connsclosed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connsclosed(value);
  // @@protoc_insertion_point(field_set:pb.P2PResponse.connsClosed)
}

// repeated .pb.P2PLsInfo streamInfos = 4;
inline int P2PResponse::_internal_streaminfos_size() const {
  return streaminfos_.size();
}
inline int P2PResponse::streaminfos_size() const {
  return _internal_streaminfos_size();
}
inline void P2PResponse::clear_streaminfos() {
  streaminfos_.Clear();
}
inline ::pb::P2PLsInfo* P2PResponse::mutable_streaminfos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.P2PResponse.streamInfos)
  return streaminfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::P2PLsInfo >*
P2PResponse::mutable_streaminfos() {
  // @@protoc_insertion_point(field_mutable_list:pb.P2PResponse.streamInfos)
  return &streaminfos_;
}
inline const ::pb::P2PLsInfo& P2PResponse::_internal_streaminfos(int index) const {
  return streaminfos_.Get(index);
}
inline const ::pb::P2PLsInfo& P2PResponse::streaminfos(int index) const {
  // @@protoc_insertion_point(field_get:pb.P2PResponse.streamInfos)
  return _internal_streaminfos(index);
}
inline ::pb::P2PLsInfo* P2PResponse::_internal_add_streaminfos() {
  return streaminfos_.Add();
}
inline ::pb::P2PLsInfo* P2PResponse::add_streaminfos() {
  // @@protoc_insertion_point(field_add:pb.P2PResponse.streamInfos)
  return _internal_add_streaminfos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::P2PLsInfo >&
P2PResponse::streaminfos() const {
  // @@protoc_insertion_point(field_list:pb.P2PResponse.streamInfos)
  return streaminfos_;
}

// -------------------------------------------------------------------

// P2PLsInfo

// string protocolName = 1;
inline void P2PLsInfo::clear_protocolname() {
  protocolname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& P2PLsInfo::protocolname() const {
  // @@protoc_insertion_point(field_get:pb.P2PLsInfo.protocolName)
  return _internal_protocolname();
}
inline void P2PLsInfo::set_protocolname(const std::string& value) {
  _internal_set_protocolname(value);
  // @@protoc_insertion_point(field_set:pb.P2PLsInfo.protocolName)
}
inline std::string* P2PLsInfo::mutable_protocolname() {
  // @@protoc_insertion_point(field_mutable:pb.P2PLsInfo.protocolName)
  return _internal_mutable_protocolname();
}
inline const std::string& P2PLsInfo::_internal_protocolname() const {
  return protocolname_.GetNoArena();
}
inline void P2PLsInfo::_internal_set_protocolname(const std::string& value) {
  
  protocolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void P2PLsInfo::set_protocolname(std::string&& value) {
  
  protocolname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.P2PLsInfo.protocolName)
}
inline void P2PLsInfo::set_protocolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.P2PLsInfo.protocolName)
}
inline void P2PLsInfo::set_protocolname(const char* value, size_t size) {
  
  protocolname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.P2PLsInfo.protocolName)
}
inline std::string* P2PLsInfo::_internal_mutable_protocolname() {
  
  return protocolname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* P2PLsInfo::release_protocolname() {
  // @@protoc_insertion_point(field_release:pb.P2PLsInfo.protocolName)
  
  return protocolname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void P2PLsInfo::set_allocated_protocolname(std::string* protocolname) {
  if (protocolname != nullptr) {
    
  } else {
    
  }
  protocolname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocolname);
  // @@protoc_insertion_point(field_set_allocated:pb.P2PLsInfo.protocolName)
}

// string listenAddress = 2;
inline void P2PLsInfo::clear_listenaddress() {
  listenaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& P2PLsInfo::listenaddress() const {
  // @@protoc_insertion_point(field_get:pb.P2PLsInfo.listenAddress)
  return _internal_listenaddress();
}
inline void P2PLsInfo::set_listenaddress(const std::string& value) {
  _internal_set_listenaddress(value);
  // @@protoc_insertion_point(field_set:pb.P2PLsInfo.listenAddress)
}
inline std::string* P2PLsInfo::mutable_listenaddress() {
  // @@protoc_insertion_point(field_mutable:pb.P2PLsInfo.listenAddress)
  return _internal_mutable_listenaddress();
}
inline const std::string& P2PLsInfo::_internal_listenaddress() const {
  return listenaddress_.GetNoArena();
}
inline void P2PLsInfo::_internal_set_listenaddress(const std::string& value) {
  
  listenaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void P2PLsInfo::set_listenaddress(std::string&& value) {
  
  listenaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.P2PLsInfo.listenAddress)
}
inline void P2PLsInfo::set_listenaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  listenaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.P2PLsInfo.listenAddress)
}
inline void P2PLsInfo::set_listenaddress(const char* value, size_t size) {
  
  listenaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.P2PLsInfo.listenAddress)
}
inline std::string* P2PLsInfo::_internal_mutable_listenaddress() {
  
  return listenaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* P2PLsInfo::release_listenaddress() {
  // @@protoc_insertion_point(field_release:pb.P2PLsInfo.listenAddress)
  
  return listenaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void P2PLsInfo::set_allocated_listenaddress(std::string* listenaddress) {
  if (listenaddress != nullptr) {
    
  } else {
    
  }
  listenaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), listenaddress);
  // @@protoc_insertion_point(field_set_allocated:pb.P2PLsInfo.listenAddress)
}

// string targetAddress = 3;
inline void P2PLsInfo::clear_targetaddress() {
  targetaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& P2PLsInfo::targetaddress() const {
  // @@protoc_insertion_point(field_get:pb.P2PLsInfo.targetAddress)
  return _internal_targetaddress();
}
inline void P2PLsInfo::set_targetaddress(const std::string& value) {
  _internal_set_targetaddress(value);
  // @@protoc_insertion_point(field_set:pb.P2PLsInfo.targetAddress)
}
inline std::string* P2PLsInfo::mutable_targetaddress() {
  // @@protoc_insertion_point(field_mutable:pb.P2PLsInfo.targetAddress)
  return _internal_mutable_targetaddress();
}
inline const std::string& P2PLsInfo::_internal_targetaddress() const {
  return targetaddress_.GetNoArena();
}
inline void P2PLsInfo::_internal_set_targetaddress(const std::string& value) {
  
  targetaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void P2PLsInfo::set_targetaddress(std::string&& value) {
  
  targetaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.P2PLsInfo.targetAddress)
}
inline void P2PLsInfo::set_targetaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.P2PLsInfo.targetAddress)
}
inline void P2PLsInfo::set_targetaddress(const char* value, size_t size) {
  
  targetaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.P2PLsInfo.targetAddress)
}
inline std::string* P2PLsInfo::_internal_mutable_targetaddress() {
  
  return targetaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* P2PLsInfo::release_targetaddress() {
  // @@protoc_insertion_point(field_release:pb.P2PLsInfo.targetAddress)
  
  return targetaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void P2PLsInfo::set_allocated_targetaddress(std::string* targetaddress) {
  if (targetaddress != nullptr) {
    
  } else {
    
  }
  targetaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetaddress);
  // @@protoc_insertion_point(field_set_allocated:pb.P2PLsInfo.targetAddress)
}

// bool local = 4;
inline void P2PLsInfo::clear_local() {
  local_ = false;
}
inline bool P2PLsInfo::_internal_local() const {
  return local_;
}
inline bool P2PLsInfo::local() const {
  // @@protoc_insertion_point(field_get:pb.P2PLsInfo.local)
  return _internal_local();
}
inline void P2PLsInfo::_internal_set_local(bool value) {
  
  local_ = value;
}
inline void P2PLsInfo::set_local(bool value) {
  _internal_set_local(value);
  // @@protoc_insertion_point(field_set:pb.P2PLsInfo.local)
}

// -------------------------------------------------------------------

// GetPeersResponse

// repeated string peerIDs = 1;
inline int GetPeersResponse::_internal_peerids_size() const {
  return peerids_.size();
}
inline int GetPeersResponse::peerids_size() const {
  return _internal_peerids_size();
}
inline void GetPeersResponse::clear_peerids() {
  peerids_.Clear();
}
inline std::string* GetPeersResponse::add_peerids() {
  // @@protoc_insertion_point(field_add_mutable:pb.GetPeersResponse.peerIDs)
  return _internal_add_peerids();
}
inline const std::string& GetPeersResponse::_internal_peerids(int index) const {
  return peerids_.Get(index);
}
inline const std::string& GetPeersResponse::peerids(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetPeersResponse.peerIDs)
  return _internal_peerids(index);
}
inline std::string* GetPeersResponse::mutable_peerids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetPeersResponse.peerIDs)
  return peerids_.Mutable(index);
}
inline void GetPeersResponse::set_peerids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.GetPeersResponse.peerIDs)
  peerids_.Mutable(index)->assign(value);
}
inline void GetPeersResponse::set_peerids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetPeersResponse.peerIDs)
  peerids_.Mutable(index)->assign(std::move(value));
}
inline void GetPeersResponse::set_peerids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.GetPeersResponse.peerIDs)
}
inline void GetPeersResponse::set_peerids(int index, const char* value, size_t size) {
  peerids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.GetPeersResponse.peerIDs)
}
inline std::string* GetPeersResponse::_internal_add_peerids() {
  return peerids_.Add();
}
inline void GetPeersResponse::add_peerids(const std::string& value) {
  peerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.GetPeersResponse.peerIDs)
}
inline void GetPeersResponse::add_peerids(std::string&& value) {
  peerids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.GetPeersResponse.peerIDs)
}
inline void GetPeersResponse::add_peerids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.GetPeersResponse.peerIDs)
}
inline void GetPeersResponse::add_peerids(const char* value, size_t size) {
  peerids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.GetPeersResponse.peerIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetPeersResponse::peerids() const {
  // @@protoc_insertion_point(field_list:pb.GetPeersResponse.peerIDs)
  return peerids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetPeersResponse::mutable_peerids() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetPeersResponse.peerIDs)
  return &peerids_;
}

// -------------------------------------------------------------------

// ConnMgmtRequest

// .pb.CONNMGMTREQTYPE requestType = 1;
inline void ConnMgmtRequest::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::CONNMGMTREQTYPE ConnMgmtRequest::_internal_requesttype() const {
  return static_cast< ::pb::CONNMGMTREQTYPE >(requesttype_);
}
inline ::pb::CONNMGMTREQTYPE ConnMgmtRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.ConnMgmtRequest.requestType)
  return _internal_requesttype();
}
inline void ConnMgmtRequest::_internal_set_requesttype(::pb::CONNMGMTREQTYPE value) {
  
  requesttype_ = value;
}
inline void ConnMgmtRequest::set_requesttype(::pb::CONNMGMTREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.ConnMgmtRequest.requestType)
}

// repeated string multiAddrs = 2;
inline int ConnMgmtRequest::_internal_multiaddrs_size() const {
  return multiaddrs_.size();
}
inline int ConnMgmtRequest::multiaddrs_size() const {
  return _internal_multiaddrs_size();
}
inline void ConnMgmtRequest::clear_multiaddrs() {
  multiaddrs_.Clear();
}
inline std::string* ConnMgmtRequest::add_multiaddrs() {
  // @@protoc_insertion_point(field_add_mutable:pb.ConnMgmtRequest.multiAddrs)
  return _internal_add_multiaddrs();
}
inline const std::string& ConnMgmtRequest::_internal_multiaddrs(int index) const {
  return multiaddrs_.Get(index);
}
inline const std::string& ConnMgmtRequest::multiaddrs(int index) const {
  // @@protoc_insertion_point(field_get:pb.ConnMgmtRequest.multiAddrs)
  return _internal_multiaddrs(index);
}
inline std::string* ConnMgmtRequest::mutable_multiaddrs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ConnMgmtRequest.multiAddrs)
  return multiaddrs_.Mutable(index);
}
inline void ConnMgmtRequest::set_multiaddrs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.ConnMgmtRequest.multiAddrs)
  multiaddrs_.Mutable(index)->assign(value);
}
inline void ConnMgmtRequest::set_multiaddrs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.ConnMgmtRequest.multiAddrs)
  multiaddrs_.Mutable(index)->assign(std::move(value));
}
inline void ConnMgmtRequest::set_multiaddrs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  multiaddrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.ConnMgmtRequest.multiAddrs)
}
inline void ConnMgmtRequest::set_multiaddrs(int index, const char* value, size_t size) {
  multiaddrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.ConnMgmtRequest.multiAddrs)
}
inline std::string* ConnMgmtRequest::_internal_add_multiaddrs() {
  return multiaddrs_.Add();
}
inline void ConnMgmtRequest::add_multiaddrs(const std::string& value) {
  multiaddrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.ConnMgmtRequest.multiAddrs)
}
inline void ConnMgmtRequest::add_multiaddrs(std::string&& value) {
  multiaddrs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.ConnMgmtRequest.multiAddrs)
}
inline void ConnMgmtRequest::add_multiaddrs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  multiaddrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.ConnMgmtRequest.multiAddrs)
}
inline void ConnMgmtRequest::add_multiaddrs(const char* value, size_t size) {
  multiaddrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.ConnMgmtRequest.multiAddrs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConnMgmtRequest::multiaddrs() const {
  // @@protoc_insertion_point(field_list:pb.ConnMgmtRequest.multiAddrs)
  return multiaddrs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConnMgmtRequest::mutable_multiaddrs() {
  // @@protoc_insertion_point(field_mutable_list:pb.ConnMgmtRequest.multiAddrs)
  return &multiaddrs_;
}

// repeated string peerIDs = 3;
inline int ConnMgmtRequest::_internal_peerids_size() const {
  return peerids_.size();
}
inline int ConnMgmtRequest::peerids_size() const {
  return _internal_peerids_size();
}
inline void ConnMgmtRequest::clear_peerids() {
  peerids_.Clear();
}
inline std::string* ConnMgmtRequest::add_peerids() {
  // @@protoc_insertion_point(field_add_mutable:pb.ConnMgmtRequest.peerIDs)
  return _internal_add_peerids();
}
inline const std::string& ConnMgmtRequest::_internal_peerids(int index) const {
  return peerids_.Get(index);
}
inline const std::string& ConnMgmtRequest::peerids(int index) const {
  // @@protoc_insertion_point(field_get:pb.ConnMgmtRequest.peerIDs)
  return _internal_peerids(index);
}
inline std::string* ConnMgmtRequest::mutable_peerids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ConnMgmtRequest.peerIDs)
  return peerids_.Mutable(index);
}
inline void ConnMgmtRequest::set_peerids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.ConnMgmtRequest.peerIDs)
  peerids_.Mutable(index)->assign(value);
}
inline void ConnMgmtRequest::set_peerids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.ConnMgmtRequest.peerIDs)
  peerids_.Mutable(index)->assign(std::move(value));
}
inline void ConnMgmtRequest::set_peerids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.ConnMgmtRequest.peerIDs)
}
inline void ConnMgmtRequest::set_peerids(int index, const char* value, size_t size) {
  peerids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.ConnMgmtRequest.peerIDs)
}
inline std::string* ConnMgmtRequest::_internal_add_peerids() {
  return peerids_.Add();
}
inline void ConnMgmtRequest::add_peerids(const std::string& value) {
  peerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.ConnMgmtRequest.peerIDs)
}
inline void ConnMgmtRequest::add_peerids(std::string&& value) {
  peerids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.ConnMgmtRequest.peerIDs)
}
inline void ConnMgmtRequest::add_peerids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.ConnMgmtRequest.peerIDs)
}
inline void ConnMgmtRequest::add_peerids(const char* value, size_t size) {
  peerids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.ConnMgmtRequest.peerIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConnMgmtRequest::peerids() const {
  // @@protoc_insertion_point(field_list:pb.ConnMgmtRequest.peerIDs)
  return peerids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConnMgmtRequest::mutable_peerids() {
  // @@protoc_insertion_point(field_mutable_list:pb.ConnMgmtRequest.peerIDs)
  return &peerids_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConnMgmtResponse

// .pb.CONNMGMTREQTYPE requestType = 1;
inline void ConnMgmtResponse::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::CONNMGMTREQTYPE ConnMgmtResponse::_internal_requesttype() const {
  return static_cast< ::pb::CONNMGMTREQTYPE >(requesttype_);
}
inline ::pb::CONNMGMTREQTYPE ConnMgmtResponse::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.ConnMgmtResponse.requestType)
  return _internal_requesttype();
}
inline void ConnMgmtResponse::_internal_set_requesttype(::pb::CONNMGMTREQTYPE value) {
  
  requesttype_ = value;
}
inline void ConnMgmtResponse::set_requesttype(::pb::CONNMGMTREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.ConnMgmtResponse.requestType)
}

// map<string, bool> connected = 2;
inline int ConnMgmtResponse::_internal_connected_size() const {
  return connected_.size();
}
inline int ConnMgmtResponse::connected_size() const {
  return _internal_connected_size();
}
inline void ConnMgmtResponse::clear_connected() {
  connected_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
ConnMgmtResponse::_internal_connected() const {
  return connected_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
ConnMgmtResponse::connected() const {
  // @@protoc_insertion_point(field_map:pb.ConnMgmtResponse.connected)
  return _internal_connected();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
ConnMgmtResponse::_internal_mutable_connected() {
  return connected_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
ConnMgmtResponse::mutable_connected() {
  // @@protoc_insertion_point(field_mutable_map:pb.ConnMgmtResponse.connected)
  return _internal_mutable_connected();
}

// map<string, .pb.ConnMgmtStatus> status = 3;
inline int ConnMgmtResponse::_internal_status_size() const {
  return status_.size();
}
inline int ConnMgmtResponse::status_size() const {
  return _internal_status_size();
}
inline void ConnMgmtResponse::clear_status() {
  status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >&
ConnMgmtResponse::_internal_status() const {
  return status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >&
ConnMgmtResponse::status() const {
  // @@protoc_insertion_point(field_map:pb.ConnMgmtResponse.status)
  return _internal_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >*
ConnMgmtResponse::_internal_mutable_status() {
  return status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb::ConnMgmtStatus >*
ConnMgmtResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_map:pb.ConnMgmtResponse.status)
  return _internal_mutable_status();
}

// repeated string peerIDs = 4;
inline int ConnMgmtResponse::_internal_peerids_size() const {
  return peerids_.size();
}
inline int ConnMgmtResponse::peerids_size() const {
  return _internal_peerids_size();
}
inline void ConnMgmtResponse::clear_peerids() {
  peerids_.Clear();
}
inline std::string* ConnMgmtResponse::add_peerids() {
  // @@protoc_insertion_point(field_add_mutable:pb.ConnMgmtResponse.peerIDs)
  return _internal_add_peerids();
}
inline const std::string& ConnMgmtResponse::_internal_peerids(int index) const {
  return peerids_.Get(index);
}
inline const std::string& ConnMgmtResponse::peerids(int index) const {
  // @@protoc_insertion_point(field_get:pb.ConnMgmtResponse.peerIDs)
  return _internal_peerids(index);
}
inline std::string* ConnMgmtResponse::mutable_peerids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ConnMgmtResponse.peerIDs)
  return peerids_.Mutable(index);
}
inline void ConnMgmtResponse::set_peerids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.ConnMgmtResponse.peerIDs)
  peerids_.Mutable(index)->assign(value);
}
inline void ConnMgmtResponse::set_peerids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.ConnMgmtResponse.peerIDs)
  peerids_.Mutable(index)->assign(std::move(value));
}
inline void ConnMgmtResponse::set_peerids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.ConnMgmtResponse.peerIDs)
}
inline void ConnMgmtResponse::set_peerids(int index, const char* value, size_t size) {
  peerids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.ConnMgmtResponse.peerIDs)
}
inline std::string* ConnMgmtResponse::_internal_add_peerids() {
  return peerids_.Add();
}
inline void ConnMgmtResponse::add_peerids(const std::string& value) {
  peerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.ConnMgmtResponse.peerIDs)
}
inline void ConnMgmtResponse::add_peerids(std::string&& value) {
  peerids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.ConnMgmtResponse.peerIDs)
}
inline void ConnMgmtResponse::add_peerids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.ConnMgmtResponse.peerIDs)
}
inline void ConnMgmtResponse::add_peerids(const char* value, size_t size) {
  peerids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.ConnMgmtResponse.peerIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConnMgmtResponse::peerids() const {
  // @@protoc_insertion_point(field_list:pb.ConnMgmtResponse.peerIDs)
  return peerids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConnMgmtResponse::mutable_peerids() {
  // @@protoc_insertion_point(field_mutable_list:pb.ConnMgmtResponse.peerIDs)
  return &peerids_;
}

// -------------------------------------------------------------------

// ConnMgmtStatus

// bool disconnected = 1;
inline void ConnMgmtStatus::clear_disconnected() {
  disconnected_ = false;
}
inline bool ConnMgmtStatus::_internal_disconnected() const {
  return disconnected_;
}
inline bool ConnMgmtStatus::disconnected() const {
  // @@protoc_insertion_point(field_get:pb.ConnMgmtStatus.disconnected)
  return _internal_disconnected();
}
inline void ConnMgmtStatus::_internal_set_disconnected(bool value) {
  
  disconnected_ = value;
}
inline void ConnMgmtStatus::set_disconnected(bool value) {
  _internal_set_disconnected(value);
  // @@protoc_insertion_point(field_set:pb.ConnMgmtStatus.disconnected)
}

// string reason = 2;
inline void ConnMgmtStatus::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnMgmtStatus::reason() const {
  // @@protoc_insertion_point(field_get:pb.ConnMgmtStatus.reason)
  return _internal_reason();
}
inline void ConnMgmtStatus::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pb.ConnMgmtStatus.reason)
}
inline std::string* ConnMgmtStatus::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pb.ConnMgmtStatus.reason)
  return _internal_mutable_reason();
}
inline const std::string& ConnMgmtStatus::_internal_reason() const {
  return reason_.GetNoArena();
}
inline void ConnMgmtStatus::_internal_set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnMgmtStatus::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ConnMgmtStatus.reason)
}
inline void ConnMgmtStatus::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ConnMgmtStatus.reason)
}
inline void ConnMgmtStatus::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ConnMgmtStatus.reason)
}
inline std::string* ConnMgmtStatus::_internal_mutable_reason() {
  
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnMgmtStatus::release_reason() {
  // @@protoc_insertion_point(field_release:pb.ConnMgmtStatus.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnMgmtStatus::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:pb.ConnMgmtStatus.reason)
}

// -------------------------------------------------------------------

// ExtrasRequest

// .pb.EXTRASREQTYPE requestType = 1;
inline void ExtrasRequest::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::EXTRASREQTYPE ExtrasRequest::_internal_requesttype() const {
  return static_cast< ::pb::EXTRASREQTYPE >(requesttype_);
}
inline ::pb::EXTRASREQTYPE ExtrasRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.ExtrasRequest.requestType)
  return _internal_requesttype();
}
inline void ExtrasRequest::_internal_set_requesttype(::pb::EXTRASREQTYPE value) {
  
  requesttype_ = value;
}
inline void ExtrasRequest::set_requesttype(::pb::EXTRASREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.ExtrasRequest.requestType)
}

// .pb.EXTRASTYPE extrasFeature = 2;
inline void ExtrasRequest::clear_extrasfeature() {
  extrasfeature_ = 0;
}
inline ::pb::EXTRASTYPE ExtrasRequest::_internal_extrasfeature() const {
  return static_cast< ::pb::EXTRASTYPE >(extrasfeature_);
}
inline ::pb::EXTRASTYPE ExtrasRequest::extrasfeature() const {
  // @@protoc_insertion_point(field_get:pb.ExtrasRequest.extrasFeature)
  return _internal_extrasfeature();
}
inline void ExtrasRequest::_internal_set_extrasfeature(::pb::EXTRASTYPE value) {
  
  extrasfeature_ = value;
}
inline void ExtrasRequest::set_extrasfeature(::pb::EXTRASTYPE value) {
  _internal_set_extrasfeature(value);
  // @@protoc_insertion_point(field_set:pb.ExtrasRequest.extrasFeature)
}

// -------------------------------------------------------------------

// BlockstoreRequest

// .pb.BSREQTYPE requestType = 1;
inline void BlockstoreRequest::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::BSREQTYPE BlockstoreRequest::_internal_requesttype() const {
  return static_cast< ::pb::BSREQTYPE >(requesttype_);
}
inline ::pb::BSREQTYPE BlockstoreRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.BlockstoreRequest.requestType)
  return _internal_requesttype();
}
inline void BlockstoreRequest::_internal_set_requesttype(::pb::BSREQTYPE value) {
  
  requesttype_ = value;
}
inline void BlockstoreRequest::set_requesttype(::pb::BSREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.BlockstoreRequest.requestType)
}

// repeated .pb.BSREQOPTS reqOpts = 2;
inline int BlockstoreRequest::_internal_reqopts_size() const {
  return reqopts_.size();
}
inline int BlockstoreRequest::reqopts_size() const {
  return _internal_reqopts_size();
}
inline void BlockstoreRequest::clear_reqopts() {
  reqopts_.Clear();
}
inline ::pb::BSREQOPTS BlockstoreRequest::_internal_reqopts(int index) const {
  return static_cast< ::pb::BSREQOPTS >(reqopts_.Get(index));
}
inline ::pb::BSREQOPTS BlockstoreRequest::reqopts(int index) const {
  // @@protoc_insertion_point(field_get:pb.BlockstoreRequest.reqOpts)
  return _internal_reqopts(index);
}
inline void BlockstoreRequest::set_reqopts(int index, ::pb::BSREQOPTS value) {
  reqopts_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BlockstoreRequest.reqOpts)
}
inline void BlockstoreRequest::_internal_add_reqopts(::pb::BSREQOPTS value) {
  reqopts_.Add(value);
}
inline void BlockstoreRequest::add_reqopts(::pb::BSREQOPTS value) {
  // @@protoc_insertion_point(field_add:pb.BlockstoreRequest.reqOpts)
  _internal_add_reqopts(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
BlockstoreRequest::reqopts() const {
  // @@protoc_insertion_point(field_list:pb.BlockstoreRequest.reqOpts)
  return reqopts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BlockstoreRequest::_internal_mutable_reqopts() {
  return &reqopts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BlockstoreRequest::mutable_reqopts() {
  // @@protoc_insertion_point(field_mutable_list:pb.BlockstoreRequest.reqOpts)
  return _internal_mutable_reqopts();
}

// repeated string cids = 3;
inline int BlockstoreRequest::_internal_cids_size() const {
  return cids_.size();
}
inline int BlockstoreRequest::cids_size() const {
  return _internal_cids_size();
}
inline void BlockstoreRequest::clear_cids() {
  cids_.Clear();
}
inline std::string* BlockstoreRequest::add_cids() {
  // @@protoc_insertion_point(field_add_mutable:pb.BlockstoreRequest.cids)
  return _internal_add_cids();
}
inline const std::string& BlockstoreRequest::_internal_cids(int index) const {
  return cids_.Get(index);
}
inline const std::string& BlockstoreRequest::cids(int index) const {
  // @@protoc_insertion_point(field_get:pb.BlockstoreRequest.cids)
  return _internal_cids(index);
}
inline std::string* BlockstoreRequest::mutable_cids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BlockstoreRequest.cids)
  return cids_.Mutable(index);
}
inline void BlockstoreRequest::set_cids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.BlockstoreRequest.cids)
  cids_.Mutable(index)->assign(value);
}
inline void BlockstoreRequest::set_cids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.BlockstoreRequest.cids)
  cids_.Mutable(index)->assign(std::move(value));
}
inline void BlockstoreRequest::set_cids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BlockstoreRequest.cids)
}
inline void BlockstoreRequest::set_cids(int index, const char* value, size_t size) {
  cids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BlockstoreRequest.cids)
}
inline std::string* BlockstoreRequest::_internal_add_cids() {
  return cids_.Add();
}
inline void BlockstoreRequest::add_cids(const std::string& value) {
  cids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.BlockstoreRequest.cids)
}
inline void BlockstoreRequest::add_cids(std::string&& value) {
  cids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.BlockstoreRequest.cids)
}
inline void BlockstoreRequest::add_cids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.BlockstoreRequest.cids)
}
inline void BlockstoreRequest::add_cids(const char* value, size_t size) {
  cids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.BlockstoreRequest.cids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockstoreRequest::cids() const {
  // @@protoc_insertion_point(field_list:pb.BlockstoreRequest.cids)
  return cids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockstoreRequest::mutable_cids() {
  // @@protoc_insertion_point(field_mutable_list:pb.BlockstoreRequest.cids)
  return &cids_;
}

// repeated bytes data = 4;
inline int BlockstoreRequest::_internal_data_size() const {
  return data_.size();
}
inline int BlockstoreRequest::data_size() const {
  return _internal_data_size();
}
inline void BlockstoreRequest::clear_data() {
  data_.Clear();
}
inline std::string* BlockstoreRequest::add_data() {
  // @@protoc_insertion_point(field_add_mutable:pb.BlockstoreRequest.data)
  return _internal_add_data();
}
inline const std::string& BlockstoreRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& BlockstoreRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.BlockstoreRequest.data)
  return _internal_data(index);
}
inline std::string* BlockstoreRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BlockstoreRequest.data)
  return data_.Mutable(index);
}
inline void BlockstoreRequest::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.BlockstoreRequest.data)
  data_.Mutable(index)->assign(value);
}
inline void BlockstoreRequest::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.BlockstoreRequest.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void BlockstoreRequest::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BlockstoreRequest.data)
}
inline void BlockstoreRequest::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BlockstoreRequest.data)
}
inline std::string* BlockstoreRequest::_internal_add_data() {
  return data_.Add();
}
inline void BlockstoreRequest::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.BlockstoreRequest.data)
}
inline void BlockstoreRequest::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.BlockstoreRequest.data)
}
inline void BlockstoreRequest::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.BlockstoreRequest.data)
}
inline void BlockstoreRequest::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.BlockstoreRequest.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockstoreRequest::data() const {
  // @@protoc_insertion_point(field_list:pb.BlockstoreRequest.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockstoreRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.BlockstoreRequest.data)
  return &data_;
}

// string cidVersion = 5;
inline void BlockstoreRequest::clear_cidversion() {
  cidversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockstoreRequest::cidversion() const {
  // @@protoc_insertion_point(field_get:pb.BlockstoreRequest.cidVersion)
  return _internal_cidversion();
}
inline void BlockstoreRequest::set_cidversion(const std::string& value) {
  _internal_set_cidversion(value);
  // @@protoc_insertion_point(field_set:pb.BlockstoreRequest.cidVersion)
}
inline std::string* BlockstoreRequest::mutable_cidversion() {
  // @@protoc_insertion_point(field_mutable:pb.BlockstoreRequest.cidVersion)
  return _internal_mutable_cidversion();
}
inline const std::string& BlockstoreRequest::_internal_cidversion() const {
  return cidversion_.GetNoArena();
}
inline void BlockstoreRequest::_internal_set_cidversion(const std::string& value) {
  
  cidversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockstoreRequest::set_cidversion(std::string&& value) {
  
  cidversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BlockstoreRequest.cidVersion)
}
inline void BlockstoreRequest::set_cidversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cidversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BlockstoreRequest.cidVersion)
}
inline void BlockstoreRequest::set_cidversion(const char* value, size_t size) {
  
  cidversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BlockstoreRequest.cidVersion)
}
inline std::string* BlockstoreRequest::_internal_mutable_cidversion() {
  
  return cidversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockstoreRequest::release_cidversion() {
  // @@protoc_insertion_point(field_release:pb.BlockstoreRequest.cidVersion)
  
  return cidversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockstoreRequest::set_allocated_cidversion(std::string* cidversion) {
  if (cidversion != nullptr) {
    
  } else {
    
  }
  cidversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cidversion);
  // @@protoc_insertion_point(field_set_allocated:pb.BlockstoreRequest.cidVersion)
}

// string hashFunc = 7;
inline void BlockstoreRequest::clear_hashfunc() {
  hashfunc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockstoreRequest::hashfunc() const {
  // @@protoc_insertion_point(field_get:pb.BlockstoreRequest.hashFunc)
  return _internal_hashfunc();
}
inline void BlockstoreRequest::set_hashfunc(const std::string& value) {
  _internal_set_hashfunc(value);
  // @@protoc_insertion_point(field_set:pb.BlockstoreRequest.hashFunc)
}
inline std::string* BlockstoreRequest::mutable_hashfunc() {
  // @@protoc_insertion_point(field_mutable:pb.BlockstoreRequest.hashFunc)
  return _internal_mutable_hashfunc();
}
inline const std::string& BlockstoreRequest::_internal_hashfunc() const {
  return hashfunc_.GetNoArena();
}
inline void BlockstoreRequest::_internal_set_hashfunc(const std::string& value) {
  
  hashfunc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockstoreRequest::set_hashfunc(std::string&& value) {
  
  hashfunc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BlockstoreRequest.hashFunc)
}
inline void BlockstoreRequest::set_hashfunc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hashfunc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BlockstoreRequest.hashFunc)
}
inline void BlockstoreRequest::set_hashfunc(const char* value, size_t size) {
  
  hashfunc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BlockstoreRequest.hashFunc)
}
inline std::string* BlockstoreRequest::_internal_mutable_hashfunc() {
  
  return hashfunc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockstoreRequest::release_hashfunc() {
  // @@protoc_insertion_point(field_release:pb.BlockstoreRequest.hashFunc)
  
  return hashfunc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockstoreRequest::set_allocated_hashfunc(std::string* hashfunc) {
  if (hashfunc != nullptr) {
    
  } else {
    
  }
  hashfunc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashfunc);
  // @@protoc_insertion_point(field_set_allocated:pb.BlockstoreRequest.hashFunc)
}

// -------------------------------------------------------------------

// BlockstoreResponse

// .pb.BSREQTYPE requestType = 1;
inline void BlockstoreResponse::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::BSREQTYPE BlockstoreResponse::_internal_requesttype() const {
  return static_cast< ::pb::BSREQTYPE >(requesttype_);
}
inline ::pb::BSREQTYPE BlockstoreResponse::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.BlockstoreResponse.requestType)
  return _internal_requesttype();
}
inline void BlockstoreResponse::_internal_set_requesttype(::pb::BSREQTYPE value) {
  
  requesttype_ = value;
}
inline void BlockstoreResponse::set_requesttype(::pb::BSREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.BlockstoreResponse.requestType)
}

// repeated .pb.Block blocks = 2;
inline int BlockstoreResponse::_internal_blocks_size() const {
  return blocks_.size();
}
inline int BlockstoreResponse::blocks_size() const {
  return _internal_blocks_size();
}
inline void BlockstoreResponse::clear_blocks() {
  blocks_.Clear();
}
inline ::pb::Block* BlockstoreResponse::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BlockstoreResponse.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Block >*
BlockstoreResponse::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:pb.BlockstoreResponse.blocks)
  return &blocks_;
}
inline const ::pb::Block& BlockstoreResponse::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::pb::Block& BlockstoreResponse::blocks(int index) const {
  // @@protoc_insertion_point(field_get:pb.BlockstoreResponse.blocks)
  return _internal_blocks(index);
}
inline ::pb::Block* BlockstoreResponse::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::pb::Block* BlockstoreResponse::add_blocks() {
  // @@protoc_insertion_point(field_add:pb.BlockstoreResponse.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Block >&
BlockstoreResponse::blocks() const {
  // @@protoc_insertion_point(field_list:pb.BlockstoreResponse.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// Block

// string cid = 1;
inline void Block::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Block::cid() const {
  // @@protoc_insertion_point(field_get:pb.Block.cid)
  return _internal_cid();
}
inline void Block::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:pb.Block.cid)
}
inline std::string* Block::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:pb.Block.cid)
  return _internal_mutable_cid();
}
inline const std::string& Block::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void Block::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Block::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.cid)
}
inline void Block::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Block.cid)
}
inline void Block::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Block.cid)
}
inline std::string* Block::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Block::release_cid() {
  // @@protoc_insertion_point(field_release:pb.Block.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:pb.Block.cid)
}

// bytes data = 2;
inline void Block::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Block::data() const {
  // @@protoc_insertion_point(field_get:pb.Block.data)
  return _internal_data();
}
inline void Block::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:pb.Block.data)
}
inline std::string* Block::mutable_data() {
  // @@protoc_insertion_point(field_mutable:pb.Block.data)
  return _internal_mutable_data();
}
inline const std::string& Block::_internal_data() const {
  return data_.GetNoArena();
}
inline void Block::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Block::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.data)
}
inline void Block::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Block.data)
}
inline void Block::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Block.data)
}
inline std::string* Block::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Block::release_data() {
  // @@protoc_insertion_point(field_release:pb.Block.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.Block.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DagRequest

// .pb.DAGREQTYPE requestType = 1;
inline void DagRequest::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::DAGREQTYPE DagRequest::_internal_requesttype() const {
  return static_cast< ::pb::DAGREQTYPE >(requesttype_);
}
inline ::pb::DAGREQTYPE DagRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.DagRequest.requestType)
  return _internal_requesttype();
}
inline void DagRequest::_internal_set_requesttype(::pb::DAGREQTYPE value) {
  
  requesttype_ = value;
}
inline void DagRequest::set_requesttype(::pb::DAGREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.DagRequest.requestType)
}

// bytes data = 2;
inline void DagRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DagRequest::data() const {
  // @@protoc_insertion_point(field_get:pb.DagRequest.data)
  return _internal_data();
}
inline void DagRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:pb.DagRequest.data)
}
inline std::string* DagRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:pb.DagRequest.data)
  return _internal_mutable_data();
}
inline const std::string& DagRequest::_internal_data() const {
  return data_.GetNoArena();
}
inline void DagRequest::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DagRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DagRequest.data)
}
inline void DagRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DagRequest.data)
}
inline void DagRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DagRequest.data)
}
inline std::string* DagRequest::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DagRequest::release_data() {
  // @@protoc_insertion_point(field_release:pb.DagRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DagRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.DagRequest.data)
}

// string objectEncoding = 3;
inline void DagRequest::clear_objectencoding() {
  objectencoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DagRequest::objectencoding() const {
  // @@protoc_insertion_point(field_get:pb.DagRequest.objectEncoding)
  return _internal_objectencoding();
}
inline void DagRequest::set_objectencoding(const std::string& value) {
  _internal_set_objectencoding(value);
  // @@protoc_insertion_point(field_set:pb.DagRequest.objectEncoding)
}
inline std::string* DagRequest::mutable_objectencoding() {
  // @@protoc_insertion_point(field_mutable:pb.DagRequest.objectEncoding)
  return _internal_mutable_objectencoding();
}
inline const std::string& DagRequest::_internal_objectencoding() const {
  return objectencoding_.GetNoArena();
}
inline void DagRequest::_internal_set_objectencoding(const std::string& value) {
  
  objectencoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DagRequest::set_objectencoding(std::string&& value) {
  
  objectencoding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DagRequest.objectEncoding)
}
inline void DagRequest::set_objectencoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  objectencoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DagRequest.objectEncoding)
}
inline void DagRequest::set_objectencoding(const char* value, size_t size) {
  
  objectencoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DagRequest.objectEncoding)
}
inline std::string* DagRequest::_internal_mutable_objectencoding() {
  
  return objectencoding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DagRequest::release_objectencoding() {
  // @@protoc_insertion_point(field_release:pb.DagRequest.objectEncoding)
  
  return objectencoding_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DagRequest::set_allocated_objectencoding(std::string* objectencoding) {
  if (objectencoding != nullptr) {
    
  } else {
    
  }
  objectencoding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objectencoding);
  // @@protoc_insertion_point(field_set_allocated:pb.DagRequest.objectEncoding)
}

// string serializationFormat = 4;
inline void DagRequest::clear_serializationformat() {
  serializationformat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DagRequest::serializationformat() const {
  // @@protoc_insertion_point(field_get:pb.DagRequest.serializationFormat)
  return _internal_serializationformat();
}
inline void DagRequest::set_serializationformat(const std::string& value) {
  _internal_set_serializationformat(value);
  // @@protoc_insertion_point(field_set:pb.DagRequest.serializationFormat)
}
inline std::string* DagRequest::mutable_serializationformat() {
  // @@protoc_insertion_point(field_mutable:pb.DagRequest.serializationFormat)
  return _internal_mutable_serializationformat();
}
inline const std::string& DagRequest::_internal_serializationformat() const {
  return serializationformat_.GetNoArena();
}
inline void DagRequest::_internal_set_serializationformat(const std::string& value) {
  
  serializationformat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DagRequest::set_serializationformat(std::string&& value) {
  
  serializationformat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DagRequest.serializationFormat)
}
inline void DagRequest::set_serializationformat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serializationformat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DagRequest.serializationFormat)
}
inline void DagRequest::set_serializationformat(const char* value, size_t size) {
  
  serializationformat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DagRequest.serializationFormat)
}
inline std::string* DagRequest::_internal_mutable_serializationformat() {
  
  return serializationformat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DagRequest::release_serializationformat() {
  // @@protoc_insertion_point(field_release:pb.DagRequest.serializationFormat)
  
  return serializationformat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DagRequest::set_allocated_serializationformat(std::string* serializationformat) {
  if (serializationformat != nullptr) {
    
  } else {
    
  }
  serializationformat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serializationformat);
  // @@protoc_insertion_point(field_set_allocated:pb.DagRequest.serializationFormat)
}

// string hashFunc = 5;
inline void DagRequest::clear_hashfunc() {
  hashfunc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DagRequest::hashfunc() const {
  // @@protoc_insertion_point(field_get:pb.DagRequest.hashFunc)
  return _internal_hashfunc();
}
inline void DagRequest::set_hashfunc(const std::string& value) {
  _internal_set_hashfunc(value);
  // @@protoc_insertion_point(field_set:pb.DagRequest.hashFunc)
}
inline std::string* DagRequest::mutable_hashfunc() {
  // @@protoc_insertion_point(field_mutable:pb.DagRequest.hashFunc)
  return _internal_mutable_hashfunc();
}
inline const std::string& DagRequest::_internal_hashfunc() const {
  return hashfunc_.GetNoArena();
}
inline void DagRequest::_internal_set_hashfunc(const std::string& value) {
  
  hashfunc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DagRequest::set_hashfunc(std::string&& value) {
  
  hashfunc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DagRequest.hashFunc)
}
inline void DagRequest::set_hashfunc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hashfunc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DagRequest.hashFunc)
}
inline void DagRequest::set_hashfunc(const char* value, size_t size) {
  
  hashfunc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DagRequest.hashFunc)
}
inline std::string* DagRequest::_internal_mutable_hashfunc() {
  
  return hashfunc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DagRequest::release_hashfunc() {
  // @@protoc_insertion_point(field_release:pb.DagRequest.hashFunc)
  
  return hashfunc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DagRequest::set_allocated_hashfunc(std::string* hashfunc) {
  if (hashfunc != nullptr) {
    
  } else {
    
  }
  hashfunc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashfunc);
  // @@protoc_insertion_point(field_set_allocated:pb.DagRequest.hashFunc)
}

// int64 cidVersion = 6;
inline void DagRequest::clear_cidversion() {
  cidversion_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DagRequest::_internal_cidversion() const {
  return cidversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DagRequest::cidversion() const {
  // @@protoc_insertion_point(field_get:pb.DagRequest.cidVersion)
  return _internal_cidversion();
}
inline void DagRequest::_internal_set_cidversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cidversion_ = value;
}
inline void DagRequest::set_cidversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cidversion(value);
  // @@protoc_insertion_point(field_set:pb.DagRequest.cidVersion)
}

// string hash = 7;
inline void DagRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DagRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.DagRequest.hash)
  return _internal_hash();
}
inline void DagRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.DagRequest.hash)
}
inline std::string* DagRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.DagRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& DagRequest::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void DagRequest::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DagRequest::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DagRequest.hash)
}
inline void DagRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DagRequest.hash)
}
inline void DagRequest::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DagRequest.hash)
}
inline std::string* DagRequest::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DagRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.DagRequest.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DagRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:pb.DagRequest.hash)
}

// map<string, string> links = 8;
inline int DagRequest::_internal_links_size() const {
  return links_.size();
}
inline int DagRequest::links_size() const {
  return _internal_links_size();
}
inline void DagRequest::clear_links() {
  links_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DagRequest::_internal_links() const {
  return links_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DagRequest::links() const {
  // @@protoc_insertion_point(field_map:pb.DagRequest.links)
  return _internal_links();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DagRequest::_internal_mutable_links() {
  return links_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DagRequest::mutable_links() {
  // @@protoc_insertion_point(field_mutable_map:pb.DagRequest.links)
  return _internal_mutable_links();
}

// -------------------------------------------------------------------

// DagResponse

// .pb.DAGREQTYPE requestType = 1;
inline void DagResponse::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::DAGREQTYPE DagResponse::_internal_requesttype() const {
  return static_cast< ::pb::DAGREQTYPE >(requesttype_);
}
inline ::pb::DAGREQTYPE DagResponse::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.DagResponse.requestType)
  return _internal_requesttype();
}
inline void DagResponse::_internal_set_requesttype(::pb::DAGREQTYPE value) {
  
  requesttype_ = value;
}
inline void DagResponse::set_requesttype(::pb::DAGREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.DagResponse.requestType)
}

// repeated string hashes = 2;
inline int DagResponse::_internal_hashes_size() const {
  return hashes_.size();
}
inline int DagResponse::hashes_size() const {
  return _internal_hashes_size();
}
inline void DagResponse::clear_hashes() {
  hashes_.Clear();
}
inline std::string* DagResponse::add_hashes() {
  // @@protoc_insertion_point(field_add_mutable:pb.DagResponse.hashes)
  return _internal_add_hashes();
}
inline const std::string& DagResponse::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const std::string& DagResponse::hashes(int index) const {
  // @@protoc_insertion_point(field_get:pb.DagResponse.hashes)
  return _internal_hashes(index);
}
inline std::string* DagResponse::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DagResponse.hashes)
  return hashes_.Mutable(index);
}
inline void DagResponse::set_hashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.DagResponse.hashes)
  hashes_.Mutable(index)->assign(value);
}
inline void DagResponse::set_hashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.DagResponse.hashes)
  hashes_.Mutable(index)->assign(std::move(value));
}
inline void DagResponse::set_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.DagResponse.hashes)
}
inline void DagResponse::set_hashes(int index, const char* value, size_t size) {
  hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.DagResponse.hashes)
}
inline std::string* DagResponse::_internal_add_hashes() {
  return hashes_.Add();
}
inline void DagResponse::add_hashes(const std::string& value) {
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.DagResponse.hashes)
}
inline void DagResponse::add_hashes(std::string&& value) {
  hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.DagResponse.hashes)
}
inline void DagResponse::add_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.DagResponse.hashes)
}
inline void DagResponse::add_hashes(const char* value, size_t size) {
  hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.DagResponse.hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DagResponse::hashes() const {
  // @@protoc_insertion_point(field_list:pb.DagResponse.hashes)
  return hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DagResponse::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:pb.DagResponse.hashes)
  return &hashes_;
}

// bytes rawData = 3;
inline void DagResponse::clear_rawdata() {
  rawdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DagResponse::rawdata() const {
  // @@protoc_insertion_point(field_get:pb.DagResponse.rawData)
  return _internal_rawdata();
}
inline void DagResponse::set_rawdata(const std::string& value) {
  _internal_set_rawdata(value);
  // @@protoc_insertion_point(field_set:pb.DagResponse.rawData)
}
inline std::string* DagResponse::mutable_rawdata() {
  // @@protoc_insertion_point(field_mutable:pb.DagResponse.rawData)
  return _internal_mutable_rawdata();
}
inline const std::string& DagResponse::_internal_rawdata() const {
  return rawdata_.GetNoArena();
}
inline void DagResponse::_internal_set_rawdata(const std::string& value) {
  
  rawdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DagResponse::set_rawdata(std::string&& value) {
  
  rawdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DagResponse.rawData)
}
inline void DagResponse::set_rawdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rawdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DagResponse.rawData)
}
inline void DagResponse::set_rawdata(const void* value, size_t size) {
  
  rawdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DagResponse.rawData)
}
inline std::string* DagResponse::_internal_mutable_rawdata() {
  
  return rawdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DagResponse::release_rawdata() {
  // @@protoc_insertion_point(field_release:pb.DagResponse.rawData)
  
  return rawdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DagResponse::set_allocated_rawdata(std::string* rawdata) {
  if (rawdata != nullptr) {
    
  } else {
    
  }
  rawdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rawdata);
  // @@protoc_insertion_point(field_set_allocated:pb.DagResponse.rawData)
}

// repeated .pb.IPLDLink links = 4;
inline int DagResponse::_internal_links_size() const {
  return links_.size();
}
inline int DagResponse::links_size() const {
  return _internal_links_size();
}
inline void DagResponse::clear_links() {
  links_.Clear();
}
inline ::pb::IPLDLink* DagResponse::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DagResponse.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::IPLDLink >*
DagResponse::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:pb.DagResponse.links)
  return &links_;
}
inline const ::pb::IPLDLink& DagResponse::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::pb::IPLDLink& DagResponse::links(int index) const {
  // @@protoc_insertion_point(field_get:pb.DagResponse.links)
  return _internal_links(index);
}
inline ::pb::IPLDLink* DagResponse::_internal_add_links() {
  return links_.Add();
}
inline ::pb::IPLDLink* DagResponse::add_links() {
  // @@protoc_insertion_point(field_add:pb.DagResponse.links)
  return _internal_add_links();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::IPLDLink >&
DagResponse::links() const {
  // @@protoc_insertion_point(field_list:pb.DagResponse.links)
  return links_;
}

// -------------------------------------------------------------------

// IPLDLink

// bytes hash = 1;
inline void IPLDLink::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IPLDLink::hash() const {
  // @@protoc_insertion_point(field_get:pb.IPLDLink.hash)
  return _internal_hash();
}
inline void IPLDLink::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.IPLDLink.hash)
}
inline std::string* IPLDLink::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.IPLDLink.hash)
  return _internal_mutable_hash();
}
inline const std::string& IPLDLink::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void IPLDLink::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IPLDLink::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.IPLDLink.hash)
}
inline void IPLDLink::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.IPLDLink.hash)
}
inline void IPLDLink::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.IPLDLink.hash)
}
inline std::string* IPLDLink::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IPLDLink::release_hash() {
  // @@protoc_insertion_point(field_release:pb.IPLDLink.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IPLDLink::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:pb.IPLDLink.hash)
}

// string name = 2;
inline void IPLDLink::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IPLDLink::name() const {
  // @@protoc_insertion_point(field_get:pb.IPLDLink.name)
  return _internal_name();
}
inline void IPLDLink::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.IPLDLink.name)
}
inline std::string* IPLDLink::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.IPLDLink.name)
  return _internal_mutable_name();
}
inline const std::string& IPLDLink::_internal_name() const {
  return name_.GetNoArena();
}
inline void IPLDLink::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IPLDLink::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.IPLDLink.name)
}
inline void IPLDLink::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.IPLDLink.name)
}
inline void IPLDLink::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.IPLDLink.name)
}
inline std::string* IPLDLink::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IPLDLink::release_name() {
  // @@protoc_insertion_point(field_release:pb.IPLDLink.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IPLDLink::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.IPLDLink.name)
}

// uint64 size = 3;
inline void IPLDLink::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IPLDLink::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IPLDLink::size() const {
  // @@protoc_insertion_point(field_get:pb.IPLDLink.size)
  return _internal_size();
}
inline void IPLDLink::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void IPLDLink::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:pb.IPLDLink.size)
}

// -------------------------------------------------------------------

// IPLDNode

// repeated .pb.IPLDLink links = 2;
inline int IPLDNode::_internal_links_size() const {
  return links_.size();
}
inline int IPLDNode::links_size() const {
  return _internal_links_size();
}
inline void IPLDNode::clear_links() {
  links_.Clear();
}
inline ::pb::IPLDLink* IPLDNode::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IPLDNode.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::IPLDLink >*
IPLDNode::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:pb.IPLDNode.links)
  return &links_;
}
inline const ::pb::IPLDLink& IPLDNode::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::pb::IPLDLink& IPLDNode::links(int index) const {
  // @@protoc_insertion_point(field_get:pb.IPLDNode.links)
  return _internal_links(index);
}
inline ::pb::IPLDLink* IPLDNode::_internal_add_links() {
  return links_.Add();
}
inline ::pb::IPLDLink* IPLDNode::add_links() {
  // @@protoc_insertion_point(field_add:pb.IPLDNode.links)
  return _internal_add_links();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::IPLDLink >&
IPLDNode::links() const {
  // @@protoc_insertion_point(field_list:pb.IPLDNode.links)
  return links_;
}

// bytes data = 1;
inline void IPLDNode::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IPLDNode::data() const {
  // @@protoc_insertion_point(field_get:pb.IPLDNode.data)
  return _internal_data();
}
inline void IPLDNode::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:pb.IPLDNode.data)
}
inline std::string* IPLDNode::mutable_data() {
  // @@protoc_insertion_point(field_mutable:pb.IPLDNode.data)
  return _internal_mutable_data();
}
inline const std::string& IPLDNode::_internal_data() const {
  return data_.GetNoArena();
}
inline void IPLDNode::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IPLDNode::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.IPLDNode.data)
}
inline void IPLDNode::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.IPLDNode.data)
}
inline void IPLDNode::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.IPLDNode.data)
}
inline std::string* IPLDNode::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IPLDNode::release_data() {
  // @@protoc_insertion_point(field_release:pb.IPLDNode.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IPLDNode::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.IPLDNode.data)
}

// -------------------------------------------------------------------

// KeystoreRequest

// .pb.KSREQTYPE requestType = 1;
inline void KeystoreRequest::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::KSREQTYPE KeystoreRequest::_internal_requesttype() const {
  return static_cast< ::pb::KSREQTYPE >(requesttype_);
}
inline ::pb::KSREQTYPE KeystoreRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.KeystoreRequest.requestType)
  return _internal_requesttype();
}
inline void KeystoreRequest::_internal_set_requesttype(::pb::KSREQTYPE value) {
  
  requesttype_ = value;
}
inline void KeystoreRequest::set_requesttype(::pb::KSREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.KeystoreRequest.requestType)
}

// string name = 2;
inline void KeystoreRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeystoreRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.KeystoreRequest.name)
  return _internal_name();
}
inline void KeystoreRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.KeystoreRequest.name)
}
inline std::string* KeystoreRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.KeystoreRequest.name)
  return _internal_mutable_name();
}
inline const std::string& KeystoreRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void KeystoreRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeystoreRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.KeystoreRequest.name)
}
inline void KeystoreRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.KeystoreRequest.name)
}
inline void KeystoreRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.KeystoreRequest.name)
}
inline std::string* KeystoreRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeystoreRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.KeystoreRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeystoreRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.KeystoreRequest.name)
}

// bytes privateKey = 3;
inline void KeystoreRequest::clear_privatekey() {
  privatekey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeystoreRequest::privatekey() const {
  // @@protoc_insertion_point(field_get:pb.KeystoreRequest.privateKey)
  return _internal_privatekey();
}
inline void KeystoreRequest::set_privatekey(const std::string& value) {
  _internal_set_privatekey(value);
  // @@protoc_insertion_point(field_set:pb.KeystoreRequest.privateKey)
}
inline std::string* KeystoreRequest::mutable_privatekey() {
  // @@protoc_insertion_point(field_mutable:pb.KeystoreRequest.privateKey)
  return _internal_mutable_privatekey();
}
inline const std::string& KeystoreRequest::_internal_privatekey() const {
  return privatekey_.GetNoArena();
}
inline void KeystoreRequest::_internal_set_privatekey(const std::string& value) {
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeystoreRequest::set_privatekey(std::string&& value) {
  
  privatekey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.KeystoreRequest.privateKey)
}
inline void KeystoreRequest::set_privatekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.KeystoreRequest.privateKey)
}
inline void KeystoreRequest::set_privatekey(const void* value, size_t size) {
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.KeystoreRequest.privateKey)
}
inline std::string* KeystoreRequest::_internal_mutable_privatekey() {
  
  return privatekey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeystoreRequest::release_privatekey() {
  // @@protoc_insertion_point(field_release:pb.KeystoreRequest.privateKey)
  
  return privatekey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeystoreRequest::set_allocated_privatekey(std::string* privatekey) {
  if (privatekey != nullptr) {
    
  } else {
    
  }
  privatekey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), privatekey);
  // @@protoc_insertion_point(field_set_allocated:pb.KeystoreRequest.privateKey)
}

// -------------------------------------------------------------------

// KeystoreResponse

// .pb.KSREQTYPE requestType = 1;
inline void KeystoreResponse::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::KSREQTYPE KeystoreResponse::_internal_requesttype() const {
  return static_cast< ::pb::KSREQTYPE >(requesttype_);
}
inline ::pb::KSREQTYPE KeystoreResponse::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.KeystoreResponse.requestType)
  return _internal_requesttype();
}
inline void KeystoreResponse::_internal_set_requesttype(::pb::KSREQTYPE value) {
  
  requesttype_ = value;
}
inline void KeystoreResponse::set_requesttype(::pb::KSREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.KeystoreResponse.requestType)
}

// bytes privateKey = 2;
inline void KeystoreResponse::clear_privatekey() {
  privatekey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeystoreResponse::privatekey() const {
  // @@protoc_insertion_point(field_get:pb.KeystoreResponse.privateKey)
  return _internal_privatekey();
}
inline void KeystoreResponse::set_privatekey(const std::string& value) {
  _internal_set_privatekey(value);
  // @@protoc_insertion_point(field_set:pb.KeystoreResponse.privateKey)
}
inline std::string* KeystoreResponse::mutable_privatekey() {
  // @@protoc_insertion_point(field_mutable:pb.KeystoreResponse.privateKey)
  return _internal_mutable_privatekey();
}
inline const std::string& KeystoreResponse::_internal_privatekey() const {
  return privatekey_.GetNoArena();
}
inline void KeystoreResponse::_internal_set_privatekey(const std::string& value) {
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeystoreResponse::set_privatekey(std::string&& value) {
  
  privatekey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.KeystoreResponse.privateKey)
}
inline void KeystoreResponse::set_privatekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.KeystoreResponse.privateKey)
}
inline void KeystoreResponse::set_privatekey(const void* value, size_t size) {
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.KeystoreResponse.privateKey)
}
inline std::string* KeystoreResponse::_internal_mutable_privatekey() {
  
  return privatekey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeystoreResponse::release_privatekey() {
  // @@protoc_insertion_point(field_release:pb.KeystoreResponse.privateKey)
  
  return privatekey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeystoreResponse::set_allocated_privatekey(std::string* privatekey) {
  if (privatekey != nullptr) {
    
  } else {
    
  }
  privatekey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), privatekey);
  // @@protoc_insertion_point(field_set_allocated:pb.KeystoreResponse.privateKey)
}

// repeated string keyNames = 3;
inline int KeystoreResponse::_internal_keynames_size() const {
  return keynames_.size();
}
inline int KeystoreResponse::keynames_size() const {
  return _internal_keynames_size();
}
inline void KeystoreResponse::clear_keynames() {
  keynames_.Clear();
}
inline std::string* KeystoreResponse::add_keynames() {
  // @@protoc_insertion_point(field_add_mutable:pb.KeystoreResponse.keyNames)
  return _internal_add_keynames();
}
inline const std::string& KeystoreResponse::_internal_keynames(int index) const {
  return keynames_.Get(index);
}
inline const std::string& KeystoreResponse::keynames(int index) const {
  // @@protoc_insertion_point(field_get:pb.KeystoreResponse.keyNames)
  return _internal_keynames(index);
}
inline std::string* KeystoreResponse::mutable_keynames(int index) {
  // @@protoc_insertion_point(field_mutable:pb.KeystoreResponse.keyNames)
  return keynames_.Mutable(index);
}
inline void KeystoreResponse::set_keynames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.KeystoreResponse.keyNames)
  keynames_.Mutable(index)->assign(value);
}
inline void KeystoreResponse::set_keynames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.KeystoreResponse.keyNames)
  keynames_.Mutable(index)->assign(std::move(value));
}
inline void KeystoreResponse::set_keynames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keynames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.KeystoreResponse.keyNames)
}
inline void KeystoreResponse::set_keynames(int index, const char* value, size_t size) {
  keynames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.KeystoreResponse.keyNames)
}
inline std::string* KeystoreResponse::_internal_add_keynames() {
  return keynames_.Add();
}
inline void KeystoreResponse::add_keynames(const std::string& value) {
  keynames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.KeystoreResponse.keyNames)
}
inline void KeystoreResponse::add_keynames(std::string&& value) {
  keynames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.KeystoreResponse.keyNames)
}
inline void KeystoreResponse::add_keynames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keynames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.KeystoreResponse.keyNames)
}
inline void KeystoreResponse::add_keynames(const char* value, size_t size) {
  keynames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.KeystoreResponse.keyNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
KeystoreResponse::keynames() const {
  // @@protoc_insertion_point(field_list:pb.KeystoreResponse.keyNames)
  return keynames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
KeystoreResponse::mutable_keynames() {
  // @@protoc_insertion_point(field_mutable_list:pb.KeystoreResponse.keyNames)
  return &keynames_;
}

// bool has = 4;
inline void KeystoreResponse::clear_has() {
  has_ = false;
}
inline bool KeystoreResponse::_internal_has() const {
  return has_;
}
inline bool KeystoreResponse::has() const {
  // @@protoc_insertion_point(field_get:pb.KeystoreResponse.has)
  return _internal_has();
}
inline void KeystoreResponse::_internal_set_has(bool value) {
  
  has_ = value;
}
inline void KeystoreResponse::set_has(bool value) {
  _internal_set_has(value);
  // @@protoc_insertion_point(field_set:pb.KeystoreResponse.has)
}

// -------------------------------------------------------------------

// PersistRequest

// repeated string cids = 1;
inline int PersistRequest::_internal_cids_size() const {
  return cids_.size();
}
inline int PersistRequest::cids_size() const {
  return _internal_cids_size();
}
inline void PersistRequest::clear_cids() {
  cids_.Clear();
}
inline std::string* PersistRequest::add_cids() {
  // @@protoc_insertion_point(field_add_mutable:pb.PersistRequest.cids)
  return _internal_add_cids();
}
inline const std::string& PersistRequest::_internal_cids(int index) const {
  return cids_.Get(index);
}
inline const std::string& PersistRequest::cids(int index) const {
  // @@protoc_insertion_point(field_get:pb.PersistRequest.cids)
  return _internal_cids(index);
}
inline std::string* PersistRequest::mutable_cids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PersistRequest.cids)
  return cids_.Mutable(index);
}
inline void PersistRequest::set_cids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.PersistRequest.cids)
  cids_.Mutable(index)->assign(value);
}
inline void PersistRequest::set_cids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.PersistRequest.cids)
  cids_.Mutable(index)->assign(std::move(value));
}
inline void PersistRequest::set_cids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PersistRequest.cids)
}
inline void PersistRequest::set_cids(int index, const char* value, size_t size) {
  cids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PersistRequest.cids)
}
inline std::string* PersistRequest::_internal_add_cids() {
  return cids_.Add();
}
inline void PersistRequest::add_cids(const std::string& value) {
  cids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.PersistRequest.cids)
}
inline void PersistRequest::add_cids(std::string&& value) {
  cids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.PersistRequest.cids)
}
inline void PersistRequest::add_cids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.PersistRequest.cids)
}
inline void PersistRequest::add_cids(const char* value, size_t size) {
  cids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.PersistRequest.cids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PersistRequest::cids() const {
  // @@protoc_insertion_point(field_list:pb.PersistRequest.cids)
  return cids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PersistRequest::mutable_cids() {
  // @@protoc_insertion_point(field_mutable_list:pb.PersistRequest.cids)
  return &cids_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PersistResponse

// map<string, bool> status = 1;
inline int PersistResponse::_internal_status_size() const {
  return status_.size();
}
inline int PersistResponse::status_size() const {
  return _internal_status_size();
}
inline void PersistResponse::clear_status() {
  status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
PersistResponse::_internal_status() const {
  return status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
PersistResponse::status() const {
  // @@protoc_insertion_point(field_map:pb.PersistResponse.status)
  return _internal_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
PersistResponse::_internal_mutable_status() {
  return status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
PersistResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_map:pb.PersistResponse.status)
  return _internal_mutable_status();
}

// map<string, string> errors = 2;
inline int PersistResponse::_internal_errors_size() const {
  return errors_.size();
}
inline int PersistResponse::errors_size() const {
  return _internal_errors_size();
}
inline void PersistResponse::clear_errors() {
  errors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PersistResponse::_internal_errors() const {
  return errors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PersistResponse::errors() const {
  // @@protoc_insertion_point(field_map:pb.PersistResponse.errors)
  return _internal_errors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PersistResponse::_internal_mutable_errors() {
  return errors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PersistResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_map:pb.PersistResponse.errors)
  return _internal_mutable_errors();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::P2PREQTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::P2PREQTYPE>() {
  return ::pb::P2PREQTYPE_descriptor();
}
template <> struct is_proto_enum< ::pb::CONNMGMTREQTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CONNMGMTREQTYPE>() {
  return ::pb::CONNMGMTREQTYPE_descriptor();
}
template <> struct is_proto_enum< ::pb::EXTRASREQTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EXTRASREQTYPE>() {
  return ::pb::EXTRASREQTYPE_descriptor();
}
template <> struct is_proto_enum< ::pb::EXTRASTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EXTRASTYPE>() {
  return ::pb::EXTRASTYPE_descriptor();
}
template <> struct is_proto_enum< ::pb::BSREQTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::BSREQTYPE>() {
  return ::pb::BSREQTYPE_descriptor();
}
template <> struct is_proto_enum< ::pb::BSREQOPTS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::BSREQOPTS>() {
  return ::pb::BSREQOPTS_descriptor();
}
template <> struct is_proto_enum< ::pb::DAGREQTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::DAGREQTYPE>() {
  return ::pb::DAGREQTYPE_descriptor();
}
template <> struct is_proto_enum< ::pb::KSREQTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::KSREQTYPE>() {
  return ::pb::KSREQTYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2eproto
