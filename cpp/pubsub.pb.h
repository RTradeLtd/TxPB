// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pubsub.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pubsub_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pubsub_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pubsub_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pubsub_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pubsub_2eproto;
namespace pb {
class PubSubMessage;
class PubSubMessageDefaultTypeInternal;
extern PubSubMessageDefaultTypeInternal _PubSubMessage_default_instance_;
class PubSubPeer;
class PubSubPeerDefaultTypeInternal;
extern PubSubPeerDefaultTypeInternal _PubSubPeer_default_instance_;
class PubSubRequest;
class PubSubRequestDefaultTypeInternal;
extern PubSubRequestDefaultTypeInternal _PubSubRequest_default_instance_;
class PubSubResponse;
class PubSubResponseDefaultTypeInternal;
extern PubSubResponseDefaultTypeInternal _PubSubResponse_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::PubSubMessage* Arena::CreateMaybeMessage<::pb::PubSubMessage>(Arena*);
template<> ::pb::PubSubPeer* Arena::CreateMaybeMessage<::pb::PubSubPeer>(Arena*);
template<> ::pb::PubSubRequest* Arena::CreateMaybeMessage<::pb::PubSubRequest>(Arena*);
template<> ::pb::PubSubResponse* Arena::CreateMaybeMessage<::pb::PubSubResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum PSREQTYPE : int {
  PS_GET_TOPICS = 0,
  PS_LIST_PEERS = 1,
  PS_SUBSCRIBE = 2,
  PS_PUBLISH = 3,
  PSREQTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PSREQTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PSREQTYPE_IsValid(int value);
constexpr PSREQTYPE PSREQTYPE_MIN = PS_GET_TOPICS;
constexpr PSREQTYPE PSREQTYPE_MAX = PS_PUBLISH;
constexpr int PSREQTYPE_ARRAYSIZE = PSREQTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PSREQTYPE_descriptor();
template<typename T>
inline const std::string& PSREQTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PSREQTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PSREQTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PSREQTYPE_descriptor(), enum_t_value);
}
inline bool PSREQTYPE_Parse(
    const std::string& name, PSREQTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PSREQTYPE>(
    PSREQTYPE_descriptor(), name, value);
}
// ===================================================================

class PubSubRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PubSubRequest) */ {
 public:
  PubSubRequest();
  virtual ~PubSubRequest();

  PubSubRequest(const PubSubRequest& from);
  PubSubRequest(PubSubRequest&& from) noexcept
    : PubSubRequest() {
    *this = ::std::move(from);
  }

  inline PubSubRequest& operator=(const PubSubRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubSubRequest& operator=(PubSubRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PubSubRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubSubRequest* internal_default_instance() {
    return reinterpret_cast<const PubSubRequest*>(
               &_PubSubRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PubSubRequest& a, PubSubRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PubSubRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PubSubRequest* New() const final {
    return CreateMaybeMessage<PubSubRequest>(nullptr);
  }

  PubSubRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PubSubRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PubSubRequest& from);
  void MergeFrom(const PubSubRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubSubRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PubSubRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pubsub_2eproto);
    return ::descriptor_table_pubsub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 2,
    kDataFieldNumber = 3,
    kRequestTypeFieldNumber = 1,
  };
  // repeated string topics = 2;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();
  private:
  const std::string& _internal_topics(int index) const;
  std::string* _internal_add_topics();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .pb.PSREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::PSREQTYPE requesttype() const;
  void set_requesttype(::pb::PSREQTYPE value);
  private:
  ::pb::PSREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::PSREQTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PubSubRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int requesttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pubsub_2eproto;
};
// -------------------------------------------------------------------

class PubSubResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PubSubResponse) */ {
 public:
  PubSubResponse();
  virtual ~PubSubResponse();

  PubSubResponse(const PubSubResponse& from);
  PubSubResponse(PubSubResponse&& from) noexcept
    : PubSubResponse() {
    *this = ::std::move(from);
  }

  inline PubSubResponse& operator=(const PubSubResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubSubResponse& operator=(PubSubResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PubSubResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubSubResponse* internal_default_instance() {
    return reinterpret_cast<const PubSubResponse*>(
               &_PubSubResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PubSubResponse& a, PubSubResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PubSubResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PubSubResponse* New() const final {
    return CreateMaybeMessage<PubSubResponse>(nullptr);
  }

  PubSubResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PubSubResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PubSubResponse& from);
  void MergeFrom(const PubSubResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubSubResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PubSubResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pubsub_2eproto);
    return ::descriptor_table_pubsub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTopicsFieldNumber = 3,
    kPeersFieldNumber = 4,
    kRequestTypeFieldNumber = 1,
  };
  // repeated .pb.PubSubMessage message = 2;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::pb::PubSubMessage* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PubSubMessage >*
      mutable_message();
  private:
  const ::pb::PubSubMessage& _internal_message(int index) const;
  ::pb::PubSubMessage* _internal_add_message();
  public:
  const ::pb::PubSubMessage& message(int index) const;
  ::pb::PubSubMessage* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PubSubMessage >&
      message() const;

  // repeated string topics = 3;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();
  private:
  const std::string& _internal_topics(int index) const;
  std::string* _internal_add_topics();
  public:

  // repeated .pb.PubSubPeer peers = 4;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::pb::PubSubPeer* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PubSubPeer >*
      mutable_peers();
  private:
  const ::pb::PubSubPeer& _internal_peers(int index) const;
  ::pb::PubSubPeer* _internal_add_peers();
  public:
  const ::pb::PubSubPeer& peers(int index) const;
  ::pb::PubSubPeer* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PubSubPeer >&
      peers() const;

  // .pb.PSREQTYPE requestType = 1;
  void clear_requesttype();
  ::pb::PSREQTYPE requesttype() const;
  void set_requesttype(::pb::PSREQTYPE value);
  private:
  ::pb::PSREQTYPE _internal_requesttype() const;
  void _internal_set_requesttype(::pb::PSREQTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PubSubResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PubSubMessage > message_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PubSubPeer > peers_;
  int requesttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pubsub_2eproto;
};
// -------------------------------------------------------------------

class PubSubMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PubSubMessage) */ {
 public:
  PubSubMessage();
  virtual ~PubSubMessage();

  PubSubMessage(const PubSubMessage& from);
  PubSubMessage(PubSubMessage&& from) noexcept
    : PubSubMessage() {
    *this = ::std::move(from);
  }

  inline PubSubMessage& operator=(const PubSubMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubSubMessage& operator=(PubSubMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PubSubMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubSubMessage* internal_default_instance() {
    return reinterpret_cast<const PubSubMessage*>(
               &_PubSubMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PubSubMessage& a, PubSubMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PubSubMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PubSubMessage* New() const final {
    return CreateMaybeMessage<PubSubMessage>(nullptr);
  }

  PubSubMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PubSubMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PubSubMessage& from);
  void MergeFrom(const PubSubMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubSubMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PubSubMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pubsub_2eproto);
    return ::descriptor_table_pubsub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicIDsFieldNumber = 4,
    kFromFieldNumber = 1,
    kDataFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kSignatureFieldNumber = 5,
    kKeyFieldNumber = 6,
  };
  // repeated string topicIDs = 4;
  int topicids_size() const;
  private:
  int _internal_topicids_size() const;
  public:
  void clear_topicids();
  const std::string& topicids(int index) const;
  std::string* mutable_topicids(int index);
  void set_topicids(int index, const std::string& value);
  void set_topicids(int index, std::string&& value);
  void set_topicids(int index, const char* value);
  void set_topicids(int index, const char* value, size_t size);
  std::string* add_topicids();
  void add_topicids(const std::string& value);
  void add_topicids(std::string&& value);
  void add_topicids(const char* value);
  void add_topicids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topicids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topicids();
  private:
  const std::string& _internal_topicids(int index) const;
  std::string* _internal_add_topicids();
  public:

  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes seqno = 3;
  void clear_seqno();
  const std::string& seqno() const;
  void set_seqno(const std::string& value);
  void set_seqno(std::string&& value);
  void set_seqno(const char* value);
  void set_seqno(const void* value, size_t size);
  std::string* mutable_seqno();
  std::string* release_seqno();
  void set_allocated_seqno(std::string* seqno);
  private:
  const std::string& _internal_seqno() const;
  void _internal_set_seqno(const std::string& value);
  std::string* _internal_mutable_seqno();
  public:

  // bytes signature = 5;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes key = 6;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:pb.PubSubMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topicids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seqno_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pubsub_2eproto;
};
// -------------------------------------------------------------------

class PubSubPeer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PubSubPeer) */ {
 public:
  PubSubPeer();
  virtual ~PubSubPeer();

  PubSubPeer(const PubSubPeer& from);
  PubSubPeer(PubSubPeer&& from) noexcept
    : PubSubPeer() {
    *this = ::std::move(from);
  }

  inline PubSubPeer& operator=(const PubSubPeer& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubSubPeer& operator=(PubSubPeer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PubSubPeer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubSubPeer* internal_default_instance() {
    return reinterpret_cast<const PubSubPeer*>(
               &_PubSubPeer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PubSubPeer& a, PubSubPeer& b) {
    a.Swap(&b);
  }
  inline void Swap(PubSubPeer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PubSubPeer* New() const final {
    return CreateMaybeMessage<PubSubPeer>(nullptr);
  }

  PubSubPeer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PubSubPeer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PubSubPeer& from);
  void MergeFrom(const PubSubPeer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubSubPeer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PubSubPeer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pubsub_2eproto);
    return ::descriptor_table_pubsub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kPeerIDFieldNumber = 2,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string peerID = 2;
  void clear_peerid();
  const std::string& peerid() const;
  void set_peerid(const std::string& value);
  void set_peerid(std::string&& value);
  void set_peerid(const char* value);
  void set_peerid(const char* value, size_t size);
  std::string* mutable_peerid();
  std::string* release_peerid();
  void set_allocated_peerid(std::string* peerid);
  private:
  const std::string& _internal_peerid() const;
  void _internal_set_peerid(const std::string& value);
  std::string* _internal_mutable_peerid();
  public:

  // @@protoc_insertion_point(class_scope:pb.PubSubPeer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pubsub_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PubSubRequest

// .pb.PSREQTYPE requestType = 1;
inline void PubSubRequest::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::PSREQTYPE PubSubRequest::_internal_requesttype() const {
  return static_cast< ::pb::PSREQTYPE >(requesttype_);
}
inline ::pb::PSREQTYPE PubSubRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.PubSubRequest.requestType)
  return _internal_requesttype();
}
inline void PubSubRequest::_internal_set_requesttype(::pb::PSREQTYPE value) {
  
  requesttype_ = value;
}
inline void PubSubRequest::set_requesttype(::pb::PSREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.PubSubRequest.requestType)
}

// repeated string topics = 2;
inline int PubSubRequest::_internal_topics_size() const {
  return topics_.size();
}
inline int PubSubRequest::topics_size() const {
  return _internal_topics_size();
}
inline void PubSubRequest::clear_topics() {
  topics_.Clear();
}
inline std::string* PubSubRequest::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:pb.PubSubRequest.topics)
  return _internal_add_topics();
}
inline const std::string& PubSubRequest::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const std::string& PubSubRequest::topics(int index) const {
  // @@protoc_insertion_point(field_get:pb.PubSubRequest.topics)
  return _internal_topics(index);
}
inline std::string* PubSubRequest::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PubSubRequest.topics)
  return topics_.Mutable(index);
}
inline void PubSubRequest::set_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.PubSubRequest.topics)
  topics_.Mutable(index)->assign(value);
}
inline void PubSubRequest::set_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.PubSubRequest.topics)
  topics_.Mutable(index)->assign(std::move(value));
}
inline void PubSubRequest::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PubSubRequest.topics)
}
inline void PubSubRequest::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubRequest.topics)
}
inline std::string* PubSubRequest::_internal_add_topics() {
  return topics_.Add();
}
inline void PubSubRequest::add_topics(const std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.PubSubRequest.topics)
}
inline void PubSubRequest::add_topics(std::string&& value) {
  topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.PubSubRequest.topics)
}
inline void PubSubRequest::add_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.PubSubRequest.topics)
}
inline void PubSubRequest::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.PubSubRequest.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PubSubRequest::topics() const {
  // @@protoc_insertion_point(field_list:pb.PubSubRequest.topics)
  return topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PubSubRequest::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:pb.PubSubRequest.topics)
  return &topics_;
}

// bytes data = 3;
inline void PubSubRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubSubRequest::data() const {
  // @@protoc_insertion_point(field_get:pb.PubSubRequest.data)
  return _internal_data();
}
inline void PubSubRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:pb.PubSubRequest.data)
}
inline std::string* PubSubRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:pb.PubSubRequest.data)
  return _internal_mutable_data();
}
inline const std::string& PubSubRequest::_internal_data() const {
  return data_.GetNoArena();
}
inline void PubSubRequest::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubSubRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PubSubRequest.data)
}
inline void PubSubRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PubSubRequest.data)
}
inline void PubSubRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubRequest.data)
}
inline std::string* PubSubRequest::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubSubRequest::release_data() {
  // @@protoc_insertion_point(field_release:pb.PubSubRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubSubRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.PubSubRequest.data)
}

// -------------------------------------------------------------------

// PubSubResponse

// .pb.PSREQTYPE requestType = 1;
inline void PubSubResponse::clear_requesttype() {
  requesttype_ = 0;
}
inline ::pb::PSREQTYPE PubSubResponse::_internal_requesttype() const {
  return static_cast< ::pb::PSREQTYPE >(requesttype_);
}
inline ::pb::PSREQTYPE PubSubResponse::requesttype() const {
  // @@protoc_insertion_point(field_get:pb.PubSubResponse.requestType)
  return _internal_requesttype();
}
inline void PubSubResponse::_internal_set_requesttype(::pb::PSREQTYPE value) {
  
  requesttype_ = value;
}
inline void PubSubResponse::set_requesttype(::pb::PSREQTYPE value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:pb.PubSubResponse.requestType)
}

// repeated .pb.PubSubMessage message = 2;
inline int PubSubResponse::_internal_message_size() const {
  return message_.size();
}
inline int PubSubResponse::message_size() const {
  return _internal_message_size();
}
inline void PubSubResponse::clear_message() {
  message_.Clear();
}
inline ::pb::PubSubMessage* PubSubResponse::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PubSubResponse.message)
  return message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PubSubMessage >*
PubSubResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:pb.PubSubResponse.message)
  return &message_;
}
inline const ::pb::PubSubMessage& PubSubResponse::_internal_message(int index) const {
  return message_.Get(index);
}
inline const ::pb::PubSubMessage& PubSubResponse::message(int index) const {
  // @@protoc_insertion_point(field_get:pb.PubSubResponse.message)
  return _internal_message(index);
}
inline ::pb::PubSubMessage* PubSubResponse::_internal_add_message() {
  return message_.Add();
}
inline ::pb::PubSubMessage* PubSubResponse::add_message() {
  // @@protoc_insertion_point(field_add:pb.PubSubResponse.message)
  return _internal_add_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PubSubMessage >&
PubSubResponse::message() const {
  // @@protoc_insertion_point(field_list:pb.PubSubResponse.message)
  return message_;
}

// repeated string topics = 3;
inline int PubSubResponse::_internal_topics_size() const {
  return topics_.size();
}
inline int PubSubResponse::topics_size() const {
  return _internal_topics_size();
}
inline void PubSubResponse::clear_topics() {
  topics_.Clear();
}
inline std::string* PubSubResponse::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:pb.PubSubResponse.topics)
  return _internal_add_topics();
}
inline const std::string& PubSubResponse::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const std::string& PubSubResponse::topics(int index) const {
  // @@protoc_insertion_point(field_get:pb.PubSubResponse.topics)
  return _internal_topics(index);
}
inline std::string* PubSubResponse::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PubSubResponse.topics)
  return topics_.Mutable(index);
}
inline void PubSubResponse::set_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.PubSubResponse.topics)
  topics_.Mutable(index)->assign(value);
}
inline void PubSubResponse::set_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.PubSubResponse.topics)
  topics_.Mutable(index)->assign(std::move(value));
}
inline void PubSubResponse::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PubSubResponse.topics)
}
inline void PubSubResponse::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubResponse.topics)
}
inline std::string* PubSubResponse::_internal_add_topics() {
  return topics_.Add();
}
inline void PubSubResponse::add_topics(const std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.PubSubResponse.topics)
}
inline void PubSubResponse::add_topics(std::string&& value) {
  topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.PubSubResponse.topics)
}
inline void PubSubResponse::add_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.PubSubResponse.topics)
}
inline void PubSubResponse::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.PubSubResponse.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PubSubResponse::topics() const {
  // @@protoc_insertion_point(field_list:pb.PubSubResponse.topics)
  return topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PubSubResponse::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:pb.PubSubResponse.topics)
  return &topics_;
}

// repeated .pb.PubSubPeer peers = 4;
inline int PubSubResponse::_internal_peers_size() const {
  return peers_.size();
}
inline int PubSubResponse::peers_size() const {
  return _internal_peers_size();
}
inline void PubSubResponse::clear_peers() {
  peers_.Clear();
}
inline ::pb::PubSubPeer* PubSubResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PubSubResponse.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PubSubPeer >*
PubSubResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:pb.PubSubResponse.peers)
  return &peers_;
}
inline const ::pb::PubSubPeer& PubSubResponse::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::pb::PubSubPeer& PubSubResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:pb.PubSubResponse.peers)
  return _internal_peers(index);
}
inline ::pb::PubSubPeer* PubSubResponse::_internal_add_peers() {
  return peers_.Add();
}
inline ::pb::PubSubPeer* PubSubResponse::add_peers() {
  // @@protoc_insertion_point(field_add:pb.PubSubResponse.peers)
  return _internal_add_peers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PubSubPeer >&
PubSubResponse::peers() const {
  // @@protoc_insertion_point(field_list:pb.PubSubResponse.peers)
  return peers_;
}

// -------------------------------------------------------------------

// PubSubMessage

// bytes from = 1;
inline void PubSubMessage::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubSubMessage::from() const {
  // @@protoc_insertion_point(field_get:pb.PubSubMessage.from)
  return _internal_from();
}
inline void PubSubMessage::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:pb.PubSubMessage.from)
}
inline std::string* PubSubMessage::mutable_from() {
  // @@protoc_insertion_point(field_mutable:pb.PubSubMessage.from)
  return _internal_mutable_from();
}
inline const std::string& PubSubMessage::_internal_from() const {
  return from_.GetNoArena();
}
inline void PubSubMessage::_internal_set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubSubMessage::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PubSubMessage.from)
}
inline void PubSubMessage::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PubSubMessage.from)
}
inline void PubSubMessage::set_from(const void* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubMessage.from)
}
inline std::string* PubSubMessage::_internal_mutable_from() {
  
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubSubMessage::release_from() {
  // @@protoc_insertion_point(field_release:pb.PubSubMessage.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubSubMessage::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:pb.PubSubMessage.from)
}

// bytes data = 2;
inline void PubSubMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubSubMessage::data() const {
  // @@protoc_insertion_point(field_get:pb.PubSubMessage.data)
  return _internal_data();
}
inline void PubSubMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:pb.PubSubMessage.data)
}
inline std::string* PubSubMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:pb.PubSubMessage.data)
  return _internal_mutable_data();
}
inline const std::string& PubSubMessage::_internal_data() const {
  return data_.GetNoArena();
}
inline void PubSubMessage::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubSubMessage::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PubSubMessage.data)
}
inline void PubSubMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PubSubMessage.data)
}
inline void PubSubMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubMessage.data)
}
inline std::string* PubSubMessage::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubSubMessage::release_data() {
  // @@protoc_insertion_point(field_release:pb.PubSubMessage.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubSubMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.PubSubMessage.data)
}

// bytes seqno = 3;
inline void PubSubMessage::clear_seqno() {
  seqno_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubSubMessage::seqno() const {
  // @@protoc_insertion_point(field_get:pb.PubSubMessage.seqno)
  return _internal_seqno();
}
inline void PubSubMessage::set_seqno(const std::string& value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:pb.PubSubMessage.seqno)
}
inline std::string* PubSubMessage::mutable_seqno() {
  // @@protoc_insertion_point(field_mutable:pb.PubSubMessage.seqno)
  return _internal_mutable_seqno();
}
inline const std::string& PubSubMessage::_internal_seqno() const {
  return seqno_.GetNoArena();
}
inline void PubSubMessage::_internal_set_seqno(const std::string& value) {
  
  seqno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubSubMessage::set_seqno(std::string&& value) {
  
  seqno_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PubSubMessage.seqno)
}
inline void PubSubMessage::set_seqno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seqno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PubSubMessage.seqno)
}
inline void PubSubMessage::set_seqno(const void* value, size_t size) {
  
  seqno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubMessage.seqno)
}
inline std::string* PubSubMessage::_internal_mutable_seqno() {
  
  return seqno_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubSubMessage::release_seqno() {
  // @@protoc_insertion_point(field_release:pb.PubSubMessage.seqno)
  
  return seqno_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubSubMessage::set_allocated_seqno(std::string* seqno) {
  if (seqno != nullptr) {
    
  } else {
    
  }
  seqno_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seqno);
  // @@protoc_insertion_point(field_set_allocated:pb.PubSubMessage.seqno)
}

// repeated string topicIDs = 4;
inline int PubSubMessage::_internal_topicids_size() const {
  return topicids_.size();
}
inline int PubSubMessage::topicids_size() const {
  return _internal_topicids_size();
}
inline void PubSubMessage::clear_topicids() {
  topicids_.Clear();
}
inline std::string* PubSubMessage::add_topicids() {
  // @@protoc_insertion_point(field_add_mutable:pb.PubSubMessage.topicIDs)
  return _internal_add_topicids();
}
inline const std::string& PubSubMessage::_internal_topicids(int index) const {
  return topicids_.Get(index);
}
inline const std::string& PubSubMessage::topicids(int index) const {
  // @@protoc_insertion_point(field_get:pb.PubSubMessage.topicIDs)
  return _internal_topicids(index);
}
inline std::string* PubSubMessage::mutable_topicids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PubSubMessage.topicIDs)
  return topicids_.Mutable(index);
}
inline void PubSubMessage::set_topicids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.PubSubMessage.topicIDs)
  topicids_.Mutable(index)->assign(value);
}
inline void PubSubMessage::set_topicids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.PubSubMessage.topicIDs)
  topicids_.Mutable(index)->assign(std::move(value));
}
inline void PubSubMessage::set_topicids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topicids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PubSubMessage.topicIDs)
}
inline void PubSubMessage::set_topicids(int index, const char* value, size_t size) {
  topicids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubMessage.topicIDs)
}
inline std::string* PubSubMessage::_internal_add_topicids() {
  return topicids_.Add();
}
inline void PubSubMessage::add_topicids(const std::string& value) {
  topicids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.PubSubMessage.topicIDs)
}
inline void PubSubMessage::add_topicids(std::string&& value) {
  topicids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.PubSubMessage.topicIDs)
}
inline void PubSubMessage::add_topicids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topicids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.PubSubMessage.topicIDs)
}
inline void PubSubMessage::add_topicids(const char* value, size_t size) {
  topicids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.PubSubMessage.topicIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PubSubMessage::topicids() const {
  // @@protoc_insertion_point(field_list:pb.PubSubMessage.topicIDs)
  return topicids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PubSubMessage::mutable_topicids() {
  // @@protoc_insertion_point(field_mutable_list:pb.PubSubMessage.topicIDs)
  return &topicids_;
}

// bytes signature = 5;
inline void PubSubMessage::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubSubMessage::signature() const {
  // @@protoc_insertion_point(field_get:pb.PubSubMessage.signature)
  return _internal_signature();
}
inline void PubSubMessage::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:pb.PubSubMessage.signature)
}
inline std::string* PubSubMessage::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:pb.PubSubMessage.signature)
  return _internal_mutable_signature();
}
inline const std::string& PubSubMessage::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void PubSubMessage::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubSubMessage::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PubSubMessage.signature)
}
inline void PubSubMessage::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PubSubMessage.signature)
}
inline void PubSubMessage::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubMessage.signature)
}
inline std::string* PubSubMessage::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubSubMessage::release_signature() {
  // @@protoc_insertion_point(field_release:pb.PubSubMessage.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubSubMessage::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:pb.PubSubMessage.signature)
}

// bytes key = 6;
inline void PubSubMessage::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubSubMessage::key() const {
  // @@protoc_insertion_point(field_get:pb.PubSubMessage.key)
  return _internal_key();
}
inline void PubSubMessage::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:pb.PubSubMessage.key)
}
inline std::string* PubSubMessage::mutable_key() {
  // @@protoc_insertion_point(field_mutable:pb.PubSubMessage.key)
  return _internal_mutable_key();
}
inline const std::string& PubSubMessage::_internal_key() const {
  return key_.GetNoArena();
}
inline void PubSubMessage::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubSubMessage::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PubSubMessage.key)
}
inline void PubSubMessage::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PubSubMessage.key)
}
inline void PubSubMessage::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubMessage.key)
}
inline std::string* PubSubMessage::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubSubMessage::release_key() {
  // @@protoc_insertion_point(field_release:pb.PubSubMessage.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubSubMessage::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.PubSubMessage.key)
}

// -------------------------------------------------------------------

// PubSubPeer

// string topic = 1;
inline void PubSubPeer::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubSubPeer::topic() const {
  // @@protoc_insertion_point(field_get:pb.PubSubPeer.topic)
  return _internal_topic();
}
inline void PubSubPeer::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:pb.PubSubPeer.topic)
}
inline std::string* PubSubPeer::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:pb.PubSubPeer.topic)
  return _internal_mutable_topic();
}
inline const std::string& PubSubPeer::_internal_topic() const {
  return topic_.GetNoArena();
}
inline void PubSubPeer::_internal_set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubSubPeer::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PubSubPeer.topic)
}
inline void PubSubPeer::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PubSubPeer.topic)
}
inline void PubSubPeer::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubPeer.topic)
}
inline std::string* PubSubPeer::_internal_mutable_topic() {
  
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubSubPeer::release_topic() {
  // @@protoc_insertion_point(field_release:pb.PubSubPeer.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubSubPeer::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:pb.PubSubPeer.topic)
}

// string peerID = 2;
inline void PubSubPeer::clear_peerid() {
  peerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubSubPeer::peerid() const {
  // @@protoc_insertion_point(field_get:pb.PubSubPeer.peerID)
  return _internal_peerid();
}
inline void PubSubPeer::set_peerid(const std::string& value) {
  _internal_set_peerid(value);
  // @@protoc_insertion_point(field_set:pb.PubSubPeer.peerID)
}
inline std::string* PubSubPeer::mutable_peerid() {
  // @@protoc_insertion_point(field_mutable:pb.PubSubPeer.peerID)
  return _internal_mutable_peerid();
}
inline const std::string& PubSubPeer::_internal_peerid() const {
  return peerid_.GetNoArena();
}
inline void PubSubPeer::_internal_set_peerid(const std::string& value) {
  
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubSubPeer::set_peerid(std::string&& value) {
  
  peerid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PubSubPeer.peerID)
}
inline void PubSubPeer::set_peerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PubSubPeer.peerID)
}
inline void PubSubPeer::set_peerid(const char* value, size_t size) {
  
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PubSubPeer.peerID)
}
inline std::string* PubSubPeer::_internal_mutable_peerid() {
  
  return peerid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubSubPeer::release_peerid() {
  // @@protoc_insertion_point(field_release:pb.PubSubPeer.peerID)
  
  return peerid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubSubPeer::set_allocated_peerid(std::string* peerid) {
  if (peerid != nullptr) {
    
  } else {
    
  }
  peerid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peerid);
  // @@protoc_insertion_point(field_set_allocated:pb.PubSubPeer.peerID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::PSREQTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PSREQTYPE>() {
  return ::pb::PSREQTYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pubsub_2eproto
