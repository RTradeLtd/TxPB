// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node.proto
#ifndef GRPC_node_2eproto__INCLUDED
#define GRPC_node_2eproto__INCLUDED

#include "node.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace pb {

// NodeAPI provide an API to control the underlying custom ipfs node
class NodeAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "pb.NodeAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ConnMgmt provides control over libp2p connections
    virtual ::grpc::Status ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::pb::ConnMgmtResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::ConnMgmtResponse>> AsyncConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::ConnMgmtResponse>>(AsyncConnMgmtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::ConnMgmtResponse>> PrepareAsyncConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::ConnMgmtResponse>>(PrepareAsyncConnMgmtRaw(context, request, cq));
    }
    // Extras provide control over node extras capabilities
    virtual ::grpc::Status Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::pb::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>> AsyncExtras(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>>(AsyncExtrasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>> PrepareAsyncExtras(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>>(PrepareAsyncExtrasRaw(context, request, cq));
    }
    // P2P allows control of generalized p2p streams for tcp/udp based protocol.
    // By using this RPC, we can tunnel traffic similar to ssh tunneling
    // except using libp2p as the transport layer, and and tcp/udp port.
    virtual ::grpc::Status P2P(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::pb::P2PResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::P2PResponse>> AsyncP2P(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::P2PResponse>>(AsyncP2PRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::P2PResponse>> PrepareAsyncP2P(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::P2PResponse>>(PrepareAsyncP2PRaw(context, request, cq));
    }
    // Blockstore allows low-level management of the underlying blockstore
    virtual ::grpc::Status Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::pb::BlockstoreResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::BlockstoreResponse>> AsyncBlockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::BlockstoreResponse>>(AsyncBlockstoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::BlockstoreResponse>> PrepareAsyncBlockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::BlockstoreResponse>>(PrepareAsyncBlockstoreRaw(context, request, cq));
    }
    // Dag is a unidirectional rpc allowing manipulation of low-level ipld objects
    virtual ::grpc::Status Dag(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::pb::DagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::DagResponse>> AsyncDag(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::DagResponse>>(AsyncDagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::DagResponse>> PrepareAsyncDag(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::DagResponse>>(PrepareAsyncDagRaw(context, request, cq));
    }
    // Keystore is a unidirectional RPC allowing management of ipfs keystores
    virtual ::grpc::Status Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::pb::KeystoreResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::KeystoreResponse>> AsyncKeystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::KeystoreResponse>>(AsyncKeystoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::KeystoreResponse>> PrepareAsyncKeystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::KeystoreResponse>>(PrepareAsyncKeystoreRaw(context, request, cq));
    }
    // Persist is used to retrieve data from the network and make it available locally
    virtual ::grpc::Status Persist(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::pb::PersistResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::PersistResponse>> AsyncPersist(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::PersistResponse>>(AsyncPersistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::PersistResponse>> PrepareAsyncPersist(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::PersistResponse>>(PrepareAsyncPersistRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // ConnMgmt provides control over libp2p connections
      virtual void ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConnMgmt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::ConnMgmtResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ConnMgmt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::ConnMgmtResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ConnMgmt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::ConnMgmtResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Extras provide control over node extras capabilities
      virtual void Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest* request, ::pb::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Extras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest* request, ::pb::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Extras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Extras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // P2P allows control of generalized p2p streams for tcp/udp based protocol.
      // By using this RPC, we can tunnel traffic similar to ssh tunneling
      // except using libp2p as the transport layer, and and tcp/udp port.
      virtual void P2P(::grpc::ClientContext* context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void P2P(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::P2PResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void P2P(::grpc::ClientContext* context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void P2P(::grpc::ClientContext* context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void P2P(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::P2PResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void P2P(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::P2PResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Blockstore allows low-level management of the underlying blockstore
      virtual void Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Blockstore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::BlockstoreResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Blockstore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::BlockstoreResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Blockstore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::BlockstoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Dag is a unidirectional rpc allowing manipulation of low-level ipld objects
      virtual void Dag(::grpc::ClientContext* context, const ::pb::DagRequest* request, ::pb::DagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Dag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::DagResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Dag(::grpc::ClientContext* context, const ::pb::DagRequest* request, ::pb::DagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Dag(::grpc::ClientContext* context, const ::pb::DagRequest* request, ::pb::DagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Dag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::DagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Dag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::DagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Keystore is a unidirectional RPC allowing management of ipfs keystores
      virtual void Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Keystore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::KeystoreResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Keystore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::KeystoreResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Keystore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::KeystoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Persist is used to retrieve data from the network and make it available locally
      virtual void Persist(::grpc::ClientContext* context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Persist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::PersistResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Persist(::grpc::ClientContext* context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Persist(::grpc::ClientContext* context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Persist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::PersistResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Persist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::PersistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::ConnMgmtResponse>* AsyncConnMgmtRaw(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::ConnMgmtResponse>* PrepareAsyncConnMgmtRaw(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>* AsyncExtrasRaw(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::Empty>* PrepareAsyncExtrasRaw(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::P2PResponse>* AsyncP2PRaw(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::P2PResponse>* PrepareAsyncP2PRaw(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::BlockstoreResponse>* AsyncBlockstoreRaw(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::BlockstoreResponse>* PrepareAsyncBlockstoreRaw(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::DagResponse>* AsyncDagRaw(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::DagResponse>* PrepareAsyncDagRaw(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::KeystoreResponse>* AsyncKeystoreRaw(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::KeystoreResponse>* PrepareAsyncKeystoreRaw(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::PersistResponse>* AsyncPersistRaw(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::PersistResponse>* PrepareAsyncPersistRaw(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::pb::ConnMgmtResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::ConnMgmtResponse>> AsyncConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::ConnMgmtResponse>>(AsyncConnMgmtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::ConnMgmtResponse>> PrepareAsyncConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::ConnMgmtResponse>>(PrepareAsyncConnMgmtRaw(context, request, cq));
    }
    ::grpc::Status Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::pb::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Empty>> AsyncExtras(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Empty>>(AsyncExtrasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Empty>> PrepareAsyncExtras(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Empty>>(PrepareAsyncExtrasRaw(context, request, cq));
    }
    ::grpc::Status P2P(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::pb::P2PResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::P2PResponse>> AsyncP2P(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::P2PResponse>>(AsyncP2PRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::P2PResponse>> PrepareAsyncP2P(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::P2PResponse>>(PrepareAsyncP2PRaw(context, request, cq));
    }
    ::grpc::Status Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::pb::BlockstoreResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::BlockstoreResponse>> AsyncBlockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::BlockstoreResponse>>(AsyncBlockstoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::BlockstoreResponse>> PrepareAsyncBlockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::BlockstoreResponse>>(PrepareAsyncBlockstoreRaw(context, request, cq));
    }
    ::grpc::Status Dag(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::pb::DagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::DagResponse>> AsyncDag(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::DagResponse>>(AsyncDagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::DagResponse>> PrepareAsyncDag(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::DagResponse>>(PrepareAsyncDagRaw(context, request, cq));
    }
    ::grpc::Status Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::pb::KeystoreResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::KeystoreResponse>> AsyncKeystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::KeystoreResponse>>(AsyncKeystoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::KeystoreResponse>> PrepareAsyncKeystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::KeystoreResponse>>(PrepareAsyncKeystoreRaw(context, request, cq));
    }
    ::grpc::Status Persist(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::pb::PersistResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::PersistResponse>> AsyncPersist(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::PersistResponse>>(AsyncPersistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::PersistResponse>> PrepareAsyncPersist(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::PersistResponse>>(PrepareAsyncPersistRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response, std::function<void(::grpc::Status)>) override;
      void ConnMgmt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::ConnMgmtResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ConnMgmt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::ConnMgmtResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ConnMgmt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::ConnMgmtResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest* request, ::pb::Empty* response, std::function<void(::grpc::Status)>) override;
      void Extras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest* request, ::pb::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Extras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Extras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void P2P(::grpc::ClientContext* context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response, std::function<void(::grpc::Status)>) override;
      void P2P(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::P2PResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void P2P(::grpc::ClientContext* context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void P2P(::grpc::ClientContext* context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void P2P(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::P2PResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void P2P(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::P2PResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response, std::function<void(::grpc::Status)>) override;
      void Blockstore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::BlockstoreResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Blockstore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::BlockstoreResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Blockstore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::BlockstoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Dag(::grpc::ClientContext* context, const ::pb::DagRequest* request, ::pb::DagResponse* response, std::function<void(::grpc::Status)>) override;
      void Dag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::DagResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Dag(::grpc::ClientContext* context, const ::pb::DagRequest* request, ::pb::DagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Dag(::grpc::ClientContext* context, const ::pb::DagRequest* request, ::pb::DagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Dag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::DagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Dag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::DagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response, std::function<void(::grpc::Status)>) override;
      void Keystore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::KeystoreResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Keystore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::KeystoreResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Keystore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::KeystoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Persist(::grpc::ClientContext* context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response, std::function<void(::grpc::Status)>) override;
      void Persist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::PersistResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Persist(::grpc::ClientContext* context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Persist(::grpc::ClientContext* context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Persist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::PersistResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Persist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::PersistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pb::ConnMgmtResponse>* AsyncConnMgmtRaw(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::ConnMgmtResponse>* PrepareAsyncConnMgmtRaw(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::Empty>* AsyncExtrasRaw(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::Empty>* PrepareAsyncExtrasRaw(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::P2PResponse>* AsyncP2PRaw(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::P2PResponse>* PrepareAsyncP2PRaw(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::BlockstoreResponse>* AsyncBlockstoreRaw(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::BlockstoreResponse>* PrepareAsyncBlockstoreRaw(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::DagResponse>* AsyncDagRaw(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::DagResponse>* PrepareAsyncDagRaw(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::KeystoreResponse>* AsyncKeystoreRaw(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::KeystoreResponse>* PrepareAsyncKeystoreRaw(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::PersistResponse>* AsyncPersistRaw(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::PersistResponse>* PrepareAsyncPersistRaw(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ConnMgmt_;
    const ::grpc::internal::RpcMethod rpcmethod_Extras_;
    const ::grpc::internal::RpcMethod rpcmethod_P2P_;
    const ::grpc::internal::RpcMethod rpcmethod_Blockstore_;
    const ::grpc::internal::RpcMethod rpcmethod_Dag_;
    const ::grpc::internal::RpcMethod rpcmethod_Keystore_;
    const ::grpc::internal::RpcMethod rpcmethod_Persist_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ConnMgmt provides control over libp2p connections
    virtual ::grpc::Status ConnMgmt(::grpc::ServerContext* context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response);
    // Extras provide control over node extras capabilities
    virtual ::grpc::Status Extras(::grpc::ServerContext* context, const ::pb::ExtrasRequest* request, ::pb::Empty* response);
    // P2P allows control of generalized p2p streams for tcp/udp based protocol.
    // By using this RPC, we can tunnel traffic similar to ssh tunneling
    // except using libp2p as the transport layer, and and tcp/udp port.
    virtual ::grpc::Status P2P(::grpc::ServerContext* context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response);
    // Blockstore allows low-level management of the underlying blockstore
    virtual ::grpc::Status Blockstore(::grpc::ServerContext* context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response);
    // Dag is a unidirectional rpc allowing manipulation of low-level ipld objects
    virtual ::grpc::Status Dag(::grpc::ServerContext* context, const ::pb::DagRequest* request, ::pb::DagResponse* response);
    // Keystore is a unidirectional RPC allowing management of ipfs keystores
    virtual ::grpc::Status Keystore(::grpc::ServerContext* context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response);
    // Persist is used to retrieve data from the network and make it available locally
    virtual ::grpc::Status Persist(::grpc::ServerContext* context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnMgmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConnMgmt() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ConnMgmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnMgmt(::grpc::ServerContext* /*context*/, const ::pb::ConnMgmtRequest* /*request*/, ::pb::ConnMgmtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnMgmt(::grpc::ServerContext* context, ::pb::ConnMgmtRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::ConnMgmtResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Extras : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Extras() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Extras() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Extras(::grpc::ServerContext* /*context*/, const ::pb::ExtrasRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExtras(::grpc::ServerContext* context, ::pb::ExtrasRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_P2P : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_P2P() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_P2P() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status P2P(::grpc::ServerContext* /*context*/, const ::pb::P2PRequest* /*request*/, ::pb::P2PResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestP2P(::grpc::ServerContext* context, ::pb::P2PRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::P2PResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Blockstore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Blockstore() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Blockstore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Blockstore(::grpc::ServerContext* /*context*/, const ::pb::BlockstoreRequest* /*request*/, ::pb::BlockstoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBlockstore(::grpc::ServerContext* context, ::pb::BlockstoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::BlockstoreResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Dag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Dag() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Dag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dag(::grpc::ServerContext* /*context*/, const ::pb::DagRequest* /*request*/, ::pb::DagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDag(::grpc::ServerContext* context, ::pb::DagRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::DagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Keystore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Keystore() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Keystore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Keystore(::grpc::ServerContext* /*context*/, const ::pb::KeystoreRequest* /*request*/, ::pb::KeystoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKeystore(::grpc::ServerContext* context, ::pb::KeystoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::KeystoreResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Persist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Persist() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Persist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Persist(::grpc::ServerContext* /*context*/, const ::pb::PersistRequest* /*request*/, ::pb::PersistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPersist(::grpc::ServerContext* context, ::pb::PersistRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::PersistResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ConnMgmt<WithAsyncMethod_Extras<WithAsyncMethod_P2P<WithAsyncMethod_Blockstore<WithAsyncMethod_Dag<WithAsyncMethod_Keystore<WithAsyncMethod_Persist<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ConnMgmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ConnMgmt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::ConnMgmtRequest, ::pb::ConnMgmtResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response) { return this->ConnMgmt(context, request, response); }));}
    void SetMessageAllocatorFor_ConnMgmt(
        ::grpc::experimental::MessageAllocator< ::pb::ConnMgmtRequest, ::pb::ConnMgmtResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::ConnMgmtRequest, ::pb::ConnMgmtResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ConnMgmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnMgmt(::grpc::ServerContext* /*context*/, const ::pb::ConnMgmtRequest* /*request*/, ::pb::ConnMgmtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ConnMgmt(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::ConnMgmtRequest* /*request*/, ::pb::ConnMgmtResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ConnMgmt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::ConnMgmtRequest* /*request*/, ::pb::ConnMgmtResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Extras : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Extras() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::ExtrasRequest, ::pb::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::ExtrasRequest* request, ::pb::Empty* response) { return this->Extras(context, request, response); }));}
    void SetMessageAllocatorFor_Extras(
        ::grpc::experimental::MessageAllocator< ::pb::ExtrasRequest, ::pb::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::ExtrasRequest, ::pb::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Extras() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Extras(::grpc::ServerContext* /*context*/, const ::pb::ExtrasRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Extras(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::ExtrasRequest* /*request*/, ::pb::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Extras(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::ExtrasRequest* /*request*/, ::pb::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_P2P : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_P2P() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::P2PRequest, ::pb::P2PResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response) { return this->P2P(context, request, response); }));}
    void SetMessageAllocatorFor_P2P(
        ::grpc::experimental::MessageAllocator< ::pb::P2PRequest, ::pb::P2PResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::P2PRequest, ::pb::P2PResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_P2P() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status P2P(::grpc::ServerContext* /*context*/, const ::pb::P2PRequest* /*request*/, ::pb::P2PResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* P2P(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::P2PRequest* /*request*/, ::pb::P2PResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* P2P(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::P2PRequest* /*request*/, ::pb::P2PResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Blockstore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Blockstore() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::BlockstoreRequest, ::pb::BlockstoreResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response) { return this->Blockstore(context, request, response); }));}
    void SetMessageAllocatorFor_Blockstore(
        ::grpc::experimental::MessageAllocator< ::pb::BlockstoreRequest, ::pb::BlockstoreResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::BlockstoreRequest, ::pb::BlockstoreResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Blockstore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Blockstore(::grpc::ServerContext* /*context*/, const ::pb::BlockstoreRequest* /*request*/, ::pb::BlockstoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Blockstore(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::BlockstoreRequest* /*request*/, ::pb::BlockstoreResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Blockstore(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::BlockstoreRequest* /*request*/, ::pb::BlockstoreResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Dag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Dag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::DagRequest, ::pb::DagResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::DagRequest* request, ::pb::DagResponse* response) { return this->Dag(context, request, response); }));}
    void SetMessageAllocatorFor_Dag(
        ::grpc::experimental::MessageAllocator< ::pb::DagRequest, ::pb::DagResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::DagRequest, ::pb::DagResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Dag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dag(::grpc::ServerContext* /*context*/, const ::pb::DagRequest* /*request*/, ::pb::DagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Dag(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::DagRequest* /*request*/, ::pb::DagResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Dag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::DagRequest* /*request*/, ::pb::DagResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Keystore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Keystore() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::KeystoreRequest, ::pb::KeystoreResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response) { return this->Keystore(context, request, response); }));}
    void SetMessageAllocatorFor_Keystore(
        ::grpc::experimental::MessageAllocator< ::pb::KeystoreRequest, ::pb::KeystoreResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::KeystoreRequest, ::pb::KeystoreResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Keystore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Keystore(::grpc::ServerContext* /*context*/, const ::pb::KeystoreRequest* /*request*/, ::pb::KeystoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Keystore(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::KeystoreRequest* /*request*/, ::pb::KeystoreResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Keystore(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::KeystoreRequest* /*request*/, ::pb::KeystoreResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Persist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Persist() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::pb::PersistRequest, ::pb::PersistResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response) { return this->Persist(context, request, response); }));}
    void SetMessageAllocatorFor_Persist(
        ::grpc::experimental::MessageAllocator< ::pb::PersistRequest, ::pb::PersistResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::pb::PersistRequest, ::pb::PersistResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Persist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Persist(::grpc::ServerContext* /*context*/, const ::pb::PersistRequest* /*request*/, ::pb::PersistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Persist(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::PersistRequest* /*request*/, ::pb::PersistResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Persist(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::pb::PersistRequest* /*request*/, ::pb::PersistResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ConnMgmt<ExperimentalWithCallbackMethod_Extras<ExperimentalWithCallbackMethod_P2P<ExperimentalWithCallbackMethod_Blockstore<ExperimentalWithCallbackMethod_Dag<ExperimentalWithCallbackMethod_Keystore<ExperimentalWithCallbackMethod_Persist<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ConnMgmt<ExperimentalWithCallbackMethod_Extras<ExperimentalWithCallbackMethod_P2P<ExperimentalWithCallbackMethod_Blockstore<ExperimentalWithCallbackMethod_Dag<ExperimentalWithCallbackMethod_Keystore<ExperimentalWithCallbackMethod_Persist<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ConnMgmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConnMgmt() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ConnMgmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnMgmt(::grpc::ServerContext* /*context*/, const ::pb::ConnMgmtRequest* /*request*/, ::pb::ConnMgmtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Extras : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Extras() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Extras() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Extras(::grpc::ServerContext* /*context*/, const ::pb::ExtrasRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_P2P : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_P2P() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_P2P() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status P2P(::grpc::ServerContext* /*context*/, const ::pb::P2PRequest* /*request*/, ::pb::P2PResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Blockstore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Blockstore() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Blockstore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Blockstore(::grpc::ServerContext* /*context*/, const ::pb::BlockstoreRequest* /*request*/, ::pb::BlockstoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Dag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Dag() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Dag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dag(::grpc::ServerContext* /*context*/, const ::pb::DagRequest* /*request*/, ::pb::DagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Keystore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Keystore() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Keystore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Keystore(::grpc::ServerContext* /*context*/, const ::pb::KeystoreRequest* /*request*/, ::pb::KeystoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Persist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Persist() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Persist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Persist(::grpc::ServerContext* /*context*/, const ::pb::PersistRequest* /*request*/, ::pb::PersistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConnMgmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConnMgmt() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ConnMgmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnMgmt(::grpc::ServerContext* /*context*/, const ::pb::ConnMgmtRequest* /*request*/, ::pb::ConnMgmtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnMgmt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Extras : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Extras() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Extras() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Extras(::grpc::ServerContext* /*context*/, const ::pb::ExtrasRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExtras(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_P2P : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_P2P() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_P2P() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status P2P(::grpc::ServerContext* /*context*/, const ::pb::P2PRequest* /*request*/, ::pb::P2PResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestP2P(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Blockstore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Blockstore() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Blockstore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Blockstore(::grpc::ServerContext* /*context*/, const ::pb::BlockstoreRequest* /*request*/, ::pb::BlockstoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBlockstore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Dag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Dag() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Dag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dag(::grpc::ServerContext* /*context*/, const ::pb::DagRequest* /*request*/, ::pb::DagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Keystore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Keystore() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Keystore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Keystore(::grpc::ServerContext* /*context*/, const ::pb::KeystoreRequest* /*request*/, ::pb::KeystoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKeystore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Persist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Persist() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Persist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Persist(::grpc::ServerContext* /*context*/, const ::pb::PersistRequest* /*request*/, ::pb::PersistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPersist(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ConnMgmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ConnMgmt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConnMgmt(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ConnMgmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnMgmt(::grpc::ServerContext* /*context*/, const ::pb::ConnMgmtRequest* /*request*/, ::pb::ConnMgmtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ConnMgmt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ConnMgmt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Extras : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Extras() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Extras(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Extras() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Extras(::grpc::ServerContext* /*context*/, const ::pb::ExtrasRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Extras(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Extras(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_P2P : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_P2P() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->P2P(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_P2P() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status P2P(::grpc::ServerContext* /*context*/, const ::pb::P2PRequest* /*request*/, ::pb::P2PResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* P2P(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* P2P(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Blockstore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Blockstore() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Blockstore(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Blockstore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Blockstore(::grpc::ServerContext* /*context*/, const ::pb::BlockstoreRequest* /*request*/, ::pb::BlockstoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Blockstore(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Blockstore(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Dag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Dag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Dag(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Dag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dag(::grpc::ServerContext* /*context*/, const ::pb::DagRequest* /*request*/, ::pb::DagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Dag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Dag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Keystore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Keystore() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Keystore(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Keystore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Keystore(::grpc::ServerContext* /*context*/, const ::pb::KeystoreRequest* /*request*/, ::pb::KeystoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Keystore(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Keystore(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Persist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Persist() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Persist(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Persist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Persist(::grpc::ServerContext* /*context*/, const ::pb::PersistRequest* /*request*/, ::pb::PersistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Persist(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Persist(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConnMgmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConnMgmt() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::ConnMgmtRequest, ::pb::ConnMgmtResponse>(std::bind(&WithStreamedUnaryMethod_ConnMgmt<BaseClass>::StreamedConnMgmt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ConnMgmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConnMgmt(::grpc::ServerContext* /*context*/, const ::pb::ConnMgmtRequest* /*request*/, ::pb::ConnMgmtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnMgmt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::ConnMgmtRequest,::pb::ConnMgmtResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Extras : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Extras() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::ExtrasRequest, ::pb::Empty>(std::bind(&WithStreamedUnaryMethod_Extras<BaseClass>::StreamedExtras, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Extras() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Extras(::grpc::ServerContext* /*context*/, const ::pb::ExtrasRequest* /*request*/, ::pb::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExtras(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::ExtrasRequest,::pb::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_P2P : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_P2P() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::P2PRequest, ::pb::P2PResponse>(std::bind(&WithStreamedUnaryMethod_P2P<BaseClass>::StreamedP2P, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_P2P() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status P2P(::grpc::ServerContext* /*context*/, const ::pb::P2PRequest* /*request*/, ::pb::P2PResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedP2P(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::P2PRequest,::pb::P2PResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Blockstore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Blockstore() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::BlockstoreRequest, ::pb::BlockstoreResponse>(std::bind(&WithStreamedUnaryMethod_Blockstore<BaseClass>::StreamedBlockstore, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Blockstore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Blockstore(::grpc::ServerContext* /*context*/, const ::pb::BlockstoreRequest* /*request*/, ::pb::BlockstoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBlockstore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::BlockstoreRequest,::pb::BlockstoreResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Dag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Dag() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::DagRequest, ::pb::DagResponse>(std::bind(&WithStreamedUnaryMethod_Dag<BaseClass>::StreamedDag, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Dag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Dag(::grpc::ServerContext* /*context*/, const ::pb::DagRequest* /*request*/, ::pb::DagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::DagRequest,::pb::DagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Keystore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Keystore() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::KeystoreRequest, ::pb::KeystoreResponse>(std::bind(&WithStreamedUnaryMethod_Keystore<BaseClass>::StreamedKeystore, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Keystore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Keystore(::grpc::ServerContext* /*context*/, const ::pb::KeystoreRequest* /*request*/, ::pb::KeystoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKeystore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::KeystoreRequest,::pb::KeystoreResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Persist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Persist() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::PersistRequest, ::pb::PersistResponse>(std::bind(&WithStreamedUnaryMethod_Persist<BaseClass>::StreamedPersist, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Persist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Persist(::grpc::ServerContext* /*context*/, const ::pb::PersistRequest* /*request*/, ::pb::PersistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPersist(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::PersistRequest,::pb::PersistResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ConnMgmt<WithStreamedUnaryMethod_Extras<WithStreamedUnaryMethod_P2P<WithStreamedUnaryMethod_Blockstore<WithStreamedUnaryMethod_Dag<WithStreamedUnaryMethod_Keystore<WithStreamedUnaryMethod_Persist<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ConnMgmt<WithStreamedUnaryMethod_Extras<WithStreamedUnaryMethod_P2P<WithStreamedUnaryMethod_Blockstore<WithStreamedUnaryMethod_Dag<WithStreamedUnaryMethod_Keystore<WithStreamedUnaryMethod_Persist<Service > > > > > > > StreamedService;
};

}  // namespace pb


#endif  // GRPC_node_2eproto__INCLUDED
