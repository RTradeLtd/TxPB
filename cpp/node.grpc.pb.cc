// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node.proto

#include "node.pb.h"
#include "node.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pb {

static const char* NodeAPI_method_names[] = {
  "/pb.NodeAPI/ConnMgmt",
  "/pb.NodeAPI/Extras",
  "/pb.NodeAPI/P2P",
  "/pb.NodeAPI/Blockstore",
  "/pb.NodeAPI/Dag",
  "/pb.NodeAPI/Keystore",
  "/pb.NodeAPI/Persist",
};

std::unique_ptr< NodeAPI::Stub> NodeAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NodeAPI::Stub> stub(new NodeAPI::Stub(channel));
  return stub;
}

NodeAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ConnMgmt_(NodeAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Extras_(NodeAPI_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_P2P_(NodeAPI_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Blockstore_(NodeAPI_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Dag_(NodeAPI_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Keystore_(NodeAPI_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Persist_(NodeAPI_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NodeAPI::Stub::ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::pb::ConnMgmtResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConnMgmt_, context, request, response);
}

void NodeAPI::Stub::experimental_async::ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConnMgmt_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::ConnMgmt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::ConnMgmtResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConnMgmt_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::ConnMgmt(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConnMgmt_, context, request, response, reactor);
}

void NodeAPI::Stub::experimental_async::ConnMgmt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::ConnMgmtResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConnMgmt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::ConnMgmtResponse>* NodeAPI::Stub::AsyncConnMgmtRaw(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::ConnMgmtResponse>::Create(channel_.get(), cq, rpcmethod_ConnMgmt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::ConnMgmtResponse>* NodeAPI::Stub::PrepareAsyncConnMgmtRaw(::grpc::ClientContext* context, const ::pb::ConnMgmtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::ConnMgmtResponse>::Create(channel_.get(), cq, rpcmethod_ConnMgmt_, context, request, false);
}

::grpc::Status NodeAPI::Stub::Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::pb::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Extras_, context, request, response);
}

void NodeAPI::Stub::experimental_async::Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest* request, ::pb::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Extras_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::Extras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Extras_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::Extras(::grpc::ClientContext* context, const ::pb::ExtrasRequest* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Extras_, context, request, response, reactor);
}

void NodeAPI::Stub::experimental_async::Extras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Extras_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::Empty>* NodeAPI::Stub::AsyncExtrasRaw(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::Empty>::Create(channel_.get(), cq, rpcmethod_Extras_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::Empty>* NodeAPI::Stub::PrepareAsyncExtrasRaw(::grpc::ClientContext* context, const ::pb::ExtrasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::Empty>::Create(channel_.get(), cq, rpcmethod_Extras_, context, request, false);
}

::grpc::Status NodeAPI::Stub::P2P(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::pb::P2PResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_P2P_, context, request, response);
}

void NodeAPI::Stub::experimental_async::P2P(::grpc::ClientContext* context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_P2P_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::P2P(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::P2PResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_P2P_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::P2P(::grpc::ClientContext* context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_P2P_, context, request, response, reactor);
}

void NodeAPI::Stub::experimental_async::P2P(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::P2PResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_P2P_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::P2PResponse>* NodeAPI::Stub::AsyncP2PRaw(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::P2PResponse>::Create(channel_.get(), cq, rpcmethod_P2P_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::P2PResponse>* NodeAPI::Stub::PrepareAsyncP2PRaw(::grpc::ClientContext* context, const ::pb::P2PRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::P2PResponse>::Create(channel_.get(), cq, rpcmethod_P2P_, context, request, false);
}

::grpc::Status NodeAPI::Stub::Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::pb::BlockstoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Blockstore_, context, request, response);
}

void NodeAPI::Stub::experimental_async::Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Blockstore_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::Blockstore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::BlockstoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Blockstore_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::Blockstore(::grpc::ClientContext* context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Blockstore_, context, request, response, reactor);
}

void NodeAPI::Stub::experimental_async::Blockstore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::BlockstoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Blockstore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::BlockstoreResponse>* NodeAPI::Stub::AsyncBlockstoreRaw(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::BlockstoreResponse>::Create(channel_.get(), cq, rpcmethod_Blockstore_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::BlockstoreResponse>* NodeAPI::Stub::PrepareAsyncBlockstoreRaw(::grpc::ClientContext* context, const ::pb::BlockstoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::BlockstoreResponse>::Create(channel_.get(), cq, rpcmethod_Blockstore_, context, request, false);
}

::grpc::Status NodeAPI::Stub::Dag(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::pb::DagResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Dag_, context, request, response);
}

void NodeAPI::Stub::experimental_async::Dag(::grpc::ClientContext* context, const ::pb::DagRequest* request, ::pb::DagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Dag_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::Dag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::DagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Dag_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::Dag(::grpc::ClientContext* context, const ::pb::DagRequest* request, ::pb::DagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Dag_, context, request, response, reactor);
}

void NodeAPI::Stub::experimental_async::Dag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::DagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Dag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::DagResponse>* NodeAPI::Stub::AsyncDagRaw(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::DagResponse>::Create(channel_.get(), cq, rpcmethod_Dag_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::DagResponse>* NodeAPI::Stub::PrepareAsyncDagRaw(::grpc::ClientContext* context, const ::pb::DagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::DagResponse>::Create(channel_.get(), cq, rpcmethod_Dag_, context, request, false);
}

::grpc::Status NodeAPI::Stub::Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::pb::KeystoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Keystore_, context, request, response);
}

void NodeAPI::Stub::experimental_async::Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Keystore_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::Keystore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::KeystoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Keystore_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::Keystore(::grpc::ClientContext* context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Keystore_, context, request, response, reactor);
}

void NodeAPI::Stub::experimental_async::Keystore(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::KeystoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Keystore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::KeystoreResponse>* NodeAPI::Stub::AsyncKeystoreRaw(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::KeystoreResponse>::Create(channel_.get(), cq, rpcmethod_Keystore_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::KeystoreResponse>* NodeAPI::Stub::PrepareAsyncKeystoreRaw(::grpc::ClientContext* context, const ::pb::KeystoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::KeystoreResponse>::Create(channel_.get(), cq, rpcmethod_Keystore_, context, request, false);
}

::grpc::Status NodeAPI::Stub::Persist(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::pb::PersistResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Persist_, context, request, response);
}

void NodeAPI::Stub::experimental_async::Persist(::grpc::ClientContext* context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Persist_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::Persist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::PersistResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Persist_, context, request, response, std::move(f));
}

void NodeAPI::Stub::experimental_async::Persist(::grpc::ClientContext* context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Persist_, context, request, response, reactor);
}

void NodeAPI::Stub::experimental_async::Persist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::PersistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Persist_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::PersistResponse>* NodeAPI::Stub::AsyncPersistRaw(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::PersistResponse>::Create(channel_.get(), cq, rpcmethod_Persist_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::PersistResponse>* NodeAPI::Stub::PrepareAsyncPersistRaw(::grpc::ClientContext* context, const ::pb::PersistRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::PersistResponse>::Create(channel_.get(), cq, rpcmethod_Persist_, context, request, false);
}

NodeAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeAPI::Service, ::pb::ConnMgmtRequest, ::pb::ConnMgmtResponse>(
          std::mem_fn(&NodeAPI::Service::ConnMgmt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeAPI::Service, ::pb::ExtrasRequest, ::pb::Empty>(
          std::mem_fn(&NodeAPI::Service::Extras), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeAPI::Service, ::pb::P2PRequest, ::pb::P2PResponse>(
          std::mem_fn(&NodeAPI::Service::P2P), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeAPI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeAPI::Service, ::pb::BlockstoreRequest, ::pb::BlockstoreResponse>(
          std::mem_fn(&NodeAPI::Service::Blockstore), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeAPI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeAPI::Service, ::pb::DagRequest, ::pb::DagResponse>(
          std::mem_fn(&NodeAPI::Service::Dag), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeAPI_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeAPI::Service, ::pb::KeystoreRequest, ::pb::KeystoreResponse>(
          std::mem_fn(&NodeAPI::Service::Keystore), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeAPI_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeAPI::Service, ::pb::PersistRequest, ::pb::PersistResponse>(
          std::mem_fn(&NodeAPI::Service::Persist), this)));
}

NodeAPI::Service::~Service() {
}

::grpc::Status NodeAPI::Service::ConnMgmt(::grpc::ServerContext* context, const ::pb::ConnMgmtRequest* request, ::pb::ConnMgmtResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeAPI::Service::Extras(::grpc::ServerContext* context, const ::pb::ExtrasRequest* request, ::pb::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeAPI::Service::P2P(::grpc::ServerContext* context, const ::pb::P2PRequest* request, ::pb::P2PResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeAPI::Service::Blockstore(::grpc::ServerContext* context, const ::pb::BlockstoreRequest* request, ::pb::BlockstoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeAPI::Service::Dag(::grpc::ServerContext* context, const ::pb::DagRequest* request, ::pb::DagResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeAPI::Service::Keystore(::grpc::ServerContext* context, const ::pb::KeystoreRequest* request, ::pb::KeystoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeAPI::Service::Persist(::grpc::ServerContext* context, const ::pb::PersistRequest* request, ::pb::PersistResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb

