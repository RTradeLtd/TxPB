// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "util.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_2eproto;
namespace pb {
class Blob;
class BlobDefaultTypeInternal;
extern BlobDefaultTypeInternal _Blob_default_instance_;
class DownloadRequest;
class DownloadRequestDefaultTypeInternal;
extern DownloadRequestDefaultTypeInternal _DownloadRequest_default_instance_;
class DownloadResponse;
class DownloadResponseDefaultTypeInternal;
extern DownloadResponseDefaultTypeInternal _DownloadResponse_default_instance_;
class UploadOptions;
class UploadOptionsDefaultTypeInternal;
extern UploadOptionsDefaultTypeInternal _UploadOptions_default_instance_;
class UploadRequest;
class UploadRequestDefaultTypeInternal;
extern UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Blob* Arena::CreateMaybeMessage<::pb::Blob>(Arena*);
template<> ::pb::DownloadRequest* Arena::CreateMaybeMessage<::pb::DownloadRequest>(Arena*);
template<> ::pb::DownloadResponse* Arena::CreateMaybeMessage<::pb::DownloadResponse>(Arena*);
template<> ::pb::UploadOptions* Arena::CreateMaybeMessage<::pb::UploadOptions>(Arena*);
template<> ::pb::UploadRequest* Arena::CreateMaybeMessage<::pb::UploadRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class UploadRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.UploadRequest) */ {
 public:
  UploadRequest();
  virtual ~UploadRequest();

  UploadRequest(const UploadRequest& from);
  UploadRequest(UploadRequest&& from) noexcept
    : UploadRequest() {
    *this = ::std::move(from);
  }

  inline UploadRequest& operator=(const UploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadRequest& operator=(UploadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadRequest* internal_default_instance() {
    return reinterpret_cast<const UploadRequest*>(
               &_UploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadRequest& a, UploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadRequest* New() const final {
    return CreateMaybeMessage<UploadRequest>(nullptr);
  }

  UploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadRequest& from);
  void MergeFrom(const UploadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.UploadRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_2eproto);
    return ::descriptor_table_file_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // .pb.Blob blob = 1;
  bool has_blob() const;
  private:
  bool _internal_has_blob() const;
  public:
  void clear_blob();
  const ::pb::Blob& blob() const;
  ::pb::Blob* release_blob();
  ::pb::Blob* mutable_blob();
  void set_allocated_blob(::pb::Blob* blob);
  private:
  const ::pb::Blob& _internal_blob() const;
  ::pb::Blob* _internal_mutable_blob();
  public:

  // .pb.UploadOptions options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::pb::UploadOptions& options() const;
  ::pb::UploadOptions* release_options();
  ::pb::UploadOptions* mutable_options();
  void set_allocated_options(::pb::UploadOptions* options);
  private:
  const ::pb::UploadOptions& _internal_options() const;
  ::pb::UploadOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:pb.UploadRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Blob* blob_;
  ::pb::UploadOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class UploadOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.UploadOptions) */ {
 public:
  UploadOptions();
  virtual ~UploadOptions();

  UploadOptions(const UploadOptions& from);
  UploadOptions(UploadOptions&& from) noexcept
    : UploadOptions() {
    *this = ::std::move(from);
  }

  inline UploadOptions& operator=(const UploadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadOptions& operator=(UploadOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadOptions* internal_default_instance() {
    return reinterpret_cast<const UploadOptions*>(
               &_UploadOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadOptions& a, UploadOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadOptions* New() const final {
    return CreateMaybeMessage<UploadOptions>(nullptr);
  }

  UploadOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadOptions& from);
  void MergeFrom(const UploadOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.UploadOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_2eproto);
    return ::descriptor_table_file_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiHashFieldNumber = 1,
    kLayoutFieldNumber = 2,
    kChunkerFieldNumber = 3,
  };
  // string multiHash = 1;
  void clear_multihash();
  const std::string& multihash() const;
  void set_multihash(const std::string& value);
  void set_multihash(std::string&& value);
  void set_multihash(const char* value);
  void set_multihash(const char* value, size_t size);
  std::string* mutable_multihash();
  std::string* release_multihash();
  void set_allocated_multihash(std::string* multihash);
  private:
  const std::string& _internal_multihash() const;
  void _internal_set_multihash(const std::string& value);
  std::string* _internal_mutable_multihash();
  public:

  // string layout = 2;
  void clear_layout();
  const std::string& layout() const;
  void set_layout(const std::string& value);
  void set_layout(std::string&& value);
  void set_layout(const char* value);
  void set_layout(const char* value, size_t size);
  std::string* mutable_layout();
  std::string* release_layout();
  void set_allocated_layout(std::string* layout);
  private:
  const std::string& _internal_layout() const;
  void _internal_set_layout(const std::string& value);
  std::string* _internal_mutable_layout();
  public:

  // string chunker = 3;
  void clear_chunker();
  const std::string& chunker() const;
  void set_chunker(const std::string& value);
  void set_chunker(std::string&& value);
  void set_chunker(const char* value);
  void set_chunker(const char* value, size_t size);
  std::string* mutable_chunker();
  std::string* release_chunker();
  void set_allocated_chunker(std::string* chunker);
  private:
  const std::string& _internal_chunker() const;
  void _internal_set_chunker(const std::string& value);
  std::string* _internal_mutable_chunker();
  public:

  // @@protoc_insertion_point(class_scope:pb.UploadOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multihash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunker_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class DownloadRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.DownloadRequest) */ {
 public:
  DownloadRequest();
  virtual ~DownloadRequest();

  DownloadRequest(const DownloadRequest& from);
  DownloadRequest(DownloadRequest&& from) noexcept
    : DownloadRequest() {
    *this = ::std::move(from);
  }

  inline DownloadRequest& operator=(const DownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadRequest& operator=(DownloadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadRequest*>(
               &_DownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DownloadRequest& a, DownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadRequest* New() const final {
    return CreateMaybeMessage<DownloadRequest>(nullptr);
  }

  DownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadRequest& from);
  void MergeFrom(const DownloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.DownloadRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_2eproto);
    return ::descriptor_table_file_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kRangeStartFieldNumber = 3,
    kRangeEndFieldNumber = 4,
    kChunkSizeFieldNumber = 2,
  };
  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint64 rangeStart = 3;
  void clear_rangestart();
  ::PROTOBUF_NAMESPACE_ID::uint64 rangestart() const;
  void set_rangestart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rangestart() const;
  void _internal_set_rangestart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rangeEnd = 4;
  void clear_rangeend();
  ::PROTOBUF_NAMESPACE_ID::uint64 rangeend() const;
  void set_rangeend(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rangeend() const;
  void _internal_set_rangeend(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 chunkSize = 2;
  void clear_chunksize();
  ::PROTOBUF_NAMESPACE_ID::int32 chunksize() const;
  void set_chunksize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chunksize() const;
  void _internal_set_chunksize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.DownloadRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rangestart_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rangeend_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunksize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class DownloadResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.DownloadResponse) */ {
 public:
  DownloadResponse();
  virtual ~DownloadResponse();

  DownloadResponse(const DownloadResponse& from);
  DownloadResponse(DownloadResponse&& from) noexcept
    : DownloadResponse() {
    *this = ::std::move(from);
  }

  inline DownloadResponse& operator=(const DownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadResponse& operator=(DownloadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadResponse*>(
               &_DownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DownloadResponse& a, DownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadResponse* New() const final {
    return CreateMaybeMessage<DownloadResponse>(nullptr);
  }

  DownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadResponse& from);
  void MergeFrom(const DownloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.DownloadResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_2eproto);
    return ::descriptor_table_file_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // .pb.Blob blob = 1;
  bool has_blob() const;
  private:
  bool _internal_has_blob() const;
  public:
  void clear_blob();
  const ::pb::Blob& blob() const;
  ::pb::Blob* release_blob();
  ::pb::Blob* mutable_blob();
  void set_allocated_blob(::pb::Blob* blob);
  private:
  const ::pb::Blob& _internal_blob() const;
  ::pb::Blob* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:pb.DownloadResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Blob* blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class Blob :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Blob) */ {
 public:
  Blob();
  virtual ~Blob();

  Blob(const Blob& from);
  Blob(Blob&& from) noexcept
    : Blob() {
    *this = ::std::move(from);
  }

  inline Blob& operator=(const Blob& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blob& operator=(Blob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Blob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Blob* internal_default_instance() {
    return reinterpret_cast<const Blob*>(
               &_Blob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Blob& a, Blob& b) {
    a.Swap(&b);
  }
  inline void Swap(Blob* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Blob* New() const final {
    return CreateMaybeMessage<Blob>(nullptr);
  }

  Blob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Blob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Blob& from);
  void MergeFrom(const Blob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Blob";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_2eproto);
    return ::descriptor_table_file_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kRangeStartFieldNumber = 2,
    kRangeEndFieldNumber = 3,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 rangeStart = 2;
  void clear_rangestart();
  ::PROTOBUF_NAMESPACE_ID::uint64 rangestart() const;
  void set_rangestart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rangestart() const;
  void _internal_set_rangestart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rangeEnd = 3;
  void clear_rangeend();
  ::PROTOBUF_NAMESPACE_ID::uint64 rangeend() const;
  void set_rangeend(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rangeend() const;
  void _internal_set_rangeend(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Blob)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rangestart_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rangeend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadRequest

// .pb.Blob blob = 1;
inline bool UploadRequest::_internal_has_blob() const {
  return this != internal_default_instance() && blob_ != nullptr;
}
inline bool UploadRequest::has_blob() const {
  return _internal_has_blob();
}
inline void UploadRequest::clear_blob() {
  if (GetArenaNoVirtual() == nullptr && blob_ != nullptr) {
    delete blob_;
  }
  blob_ = nullptr;
}
inline const ::pb::Blob& UploadRequest::_internal_blob() const {
  const ::pb::Blob* p = blob_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Blob*>(
      &::pb::_Blob_default_instance_);
}
inline const ::pb::Blob& UploadRequest::blob() const {
  // @@protoc_insertion_point(field_get:pb.UploadRequest.blob)
  return _internal_blob();
}
inline ::pb::Blob* UploadRequest::release_blob() {
  // @@protoc_insertion_point(field_release:pb.UploadRequest.blob)
  
  ::pb::Blob* temp = blob_;
  blob_ = nullptr;
  return temp;
}
inline ::pb::Blob* UploadRequest::_internal_mutable_blob() {
  
  if (blob_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Blob>(GetArenaNoVirtual());
    blob_ = p;
  }
  return blob_;
}
inline ::pb::Blob* UploadRequest::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:pb.UploadRequest.blob)
  return _internal_mutable_blob();
}
inline void UploadRequest::set_allocated_blob(::pb::Blob* blob) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blob_;
  }
  if (blob) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blob = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blob, submessage_arena);
    }
    
  } else {
    
  }
  blob_ = blob;
  // @@protoc_insertion_point(field_set_allocated:pb.UploadRequest.blob)
}

// .pb.UploadOptions options = 2;
inline bool UploadRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool UploadRequest::has_options() const {
  return _internal_has_options();
}
inline void UploadRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::pb::UploadOptions& UploadRequest::_internal_options() const {
  const ::pb::UploadOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::UploadOptions*>(
      &::pb::_UploadOptions_default_instance_);
}
inline const ::pb::UploadOptions& UploadRequest::options() const {
  // @@protoc_insertion_point(field_get:pb.UploadRequest.options)
  return _internal_options();
}
inline ::pb::UploadOptions* UploadRequest::release_options() {
  // @@protoc_insertion_point(field_release:pb.UploadRequest.options)
  
  ::pb::UploadOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::pb::UploadOptions* UploadRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::UploadOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::pb::UploadOptions* UploadRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:pb.UploadRequest.options)
  return _internal_mutable_options();
}
inline void UploadRequest::set_allocated_options(::pb::UploadOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:pb.UploadRequest.options)
}

// -------------------------------------------------------------------

// UploadOptions

// string multiHash = 1;
inline void UploadOptions::clear_multihash() {
  multihash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadOptions::multihash() const {
  // @@protoc_insertion_point(field_get:pb.UploadOptions.multiHash)
  return _internal_multihash();
}
inline void UploadOptions::set_multihash(const std::string& value) {
  _internal_set_multihash(value);
  // @@protoc_insertion_point(field_set:pb.UploadOptions.multiHash)
}
inline std::string* UploadOptions::mutable_multihash() {
  // @@protoc_insertion_point(field_mutable:pb.UploadOptions.multiHash)
  return _internal_mutable_multihash();
}
inline const std::string& UploadOptions::_internal_multihash() const {
  return multihash_.GetNoArena();
}
inline void UploadOptions::_internal_set_multihash(const std::string& value) {
  
  multihash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadOptions::set_multihash(std::string&& value) {
  
  multihash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.UploadOptions.multiHash)
}
inline void UploadOptions::set_multihash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  multihash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UploadOptions.multiHash)
}
inline void UploadOptions::set_multihash(const char* value, size_t size) {
  
  multihash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UploadOptions.multiHash)
}
inline std::string* UploadOptions::_internal_mutable_multihash() {
  
  return multihash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadOptions::release_multihash() {
  // @@protoc_insertion_point(field_release:pb.UploadOptions.multiHash)
  
  return multihash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadOptions::set_allocated_multihash(std::string* multihash) {
  if (multihash != nullptr) {
    
  } else {
    
  }
  multihash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multihash);
  // @@protoc_insertion_point(field_set_allocated:pb.UploadOptions.multiHash)
}

// string layout = 2;
inline void UploadOptions::clear_layout() {
  layout_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadOptions::layout() const {
  // @@protoc_insertion_point(field_get:pb.UploadOptions.layout)
  return _internal_layout();
}
inline void UploadOptions::set_layout(const std::string& value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:pb.UploadOptions.layout)
}
inline std::string* UploadOptions::mutable_layout() {
  // @@protoc_insertion_point(field_mutable:pb.UploadOptions.layout)
  return _internal_mutable_layout();
}
inline const std::string& UploadOptions::_internal_layout() const {
  return layout_.GetNoArena();
}
inline void UploadOptions::_internal_set_layout(const std::string& value) {
  
  layout_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadOptions::set_layout(std::string&& value) {
  
  layout_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.UploadOptions.layout)
}
inline void UploadOptions::set_layout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  layout_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UploadOptions.layout)
}
inline void UploadOptions::set_layout(const char* value, size_t size) {
  
  layout_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UploadOptions.layout)
}
inline std::string* UploadOptions::_internal_mutable_layout() {
  
  return layout_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadOptions::release_layout() {
  // @@protoc_insertion_point(field_release:pb.UploadOptions.layout)
  
  return layout_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadOptions::set_allocated_layout(std::string* layout) {
  if (layout != nullptr) {
    
  } else {
    
  }
  layout_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layout);
  // @@protoc_insertion_point(field_set_allocated:pb.UploadOptions.layout)
}

// string chunker = 3;
inline void UploadOptions::clear_chunker() {
  chunker_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadOptions::chunker() const {
  // @@protoc_insertion_point(field_get:pb.UploadOptions.chunker)
  return _internal_chunker();
}
inline void UploadOptions::set_chunker(const std::string& value) {
  _internal_set_chunker(value);
  // @@protoc_insertion_point(field_set:pb.UploadOptions.chunker)
}
inline std::string* UploadOptions::mutable_chunker() {
  // @@protoc_insertion_point(field_mutable:pb.UploadOptions.chunker)
  return _internal_mutable_chunker();
}
inline const std::string& UploadOptions::_internal_chunker() const {
  return chunker_.GetNoArena();
}
inline void UploadOptions::_internal_set_chunker(const std::string& value) {
  
  chunker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadOptions::set_chunker(std::string&& value) {
  
  chunker_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.UploadOptions.chunker)
}
inline void UploadOptions::set_chunker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chunker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UploadOptions.chunker)
}
inline void UploadOptions::set_chunker(const char* value, size_t size) {
  
  chunker_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UploadOptions.chunker)
}
inline std::string* UploadOptions::_internal_mutable_chunker() {
  
  return chunker_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadOptions::release_chunker() {
  // @@protoc_insertion_point(field_release:pb.UploadOptions.chunker)
  
  return chunker_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadOptions::set_allocated_chunker(std::string* chunker) {
  if (chunker != nullptr) {
    
  } else {
    
  }
  chunker_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunker);
  // @@protoc_insertion_point(field_set_allocated:pb.UploadOptions.chunker)
}

// -------------------------------------------------------------------

// DownloadRequest

// string hash = 1;
inline void DownloadRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DownloadRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.DownloadRequest.hash)
  return _internal_hash();
}
inline void DownloadRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.DownloadRequest.hash)
}
inline std::string* DownloadRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.DownloadRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& DownloadRequest::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void DownloadRequest::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DownloadRequest::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.DownloadRequest.hash)
}
inline void DownloadRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DownloadRequest.hash)
}
inline void DownloadRequest::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DownloadRequest.hash)
}
inline std::string* DownloadRequest::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DownloadRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.DownloadRequest.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:pb.DownloadRequest.hash)
}

// int32 chunkSize = 2;
inline void DownloadRequest::clear_chunksize() {
  chunksize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DownloadRequest::_internal_chunksize() const {
  return chunksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DownloadRequest::chunksize() const {
  // @@protoc_insertion_point(field_get:pb.DownloadRequest.chunkSize)
  return _internal_chunksize();
}
inline void DownloadRequest::_internal_set_chunksize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chunksize_ = value;
}
inline void DownloadRequest::set_chunksize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chunksize(value);
  // @@protoc_insertion_point(field_set:pb.DownloadRequest.chunkSize)
}

// uint64 rangeStart = 3;
inline void DownloadRequest::clear_rangestart() {
  rangestart_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DownloadRequest::_internal_rangestart() const {
  return rangestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DownloadRequest::rangestart() const {
  // @@protoc_insertion_point(field_get:pb.DownloadRequest.rangeStart)
  return _internal_rangestart();
}
inline void DownloadRequest::_internal_set_rangestart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rangestart_ = value;
}
inline void DownloadRequest::set_rangestart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rangestart(value);
  // @@protoc_insertion_point(field_set:pb.DownloadRequest.rangeStart)
}

// uint64 rangeEnd = 4;
inline void DownloadRequest::clear_rangeend() {
  rangeend_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DownloadRequest::_internal_rangeend() const {
  return rangeend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DownloadRequest::rangeend() const {
  // @@protoc_insertion_point(field_get:pb.DownloadRequest.rangeEnd)
  return _internal_rangeend();
}
inline void DownloadRequest::_internal_set_rangeend(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rangeend_ = value;
}
inline void DownloadRequest::set_rangeend(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rangeend(value);
  // @@protoc_insertion_point(field_set:pb.DownloadRequest.rangeEnd)
}

// -------------------------------------------------------------------

// DownloadResponse

// .pb.Blob blob = 1;
inline bool DownloadResponse::_internal_has_blob() const {
  return this != internal_default_instance() && blob_ != nullptr;
}
inline bool DownloadResponse::has_blob() const {
  return _internal_has_blob();
}
inline void DownloadResponse::clear_blob() {
  if (GetArenaNoVirtual() == nullptr && blob_ != nullptr) {
    delete blob_;
  }
  blob_ = nullptr;
}
inline const ::pb::Blob& DownloadResponse::_internal_blob() const {
  const ::pb::Blob* p = blob_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Blob*>(
      &::pb::_Blob_default_instance_);
}
inline const ::pb::Blob& DownloadResponse::blob() const {
  // @@protoc_insertion_point(field_get:pb.DownloadResponse.blob)
  return _internal_blob();
}
inline ::pb::Blob* DownloadResponse::release_blob() {
  // @@protoc_insertion_point(field_release:pb.DownloadResponse.blob)
  
  ::pb::Blob* temp = blob_;
  blob_ = nullptr;
  return temp;
}
inline ::pb::Blob* DownloadResponse::_internal_mutable_blob() {
  
  if (blob_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Blob>(GetArenaNoVirtual());
    blob_ = p;
  }
  return blob_;
}
inline ::pb::Blob* DownloadResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:pb.DownloadResponse.blob)
  return _internal_mutable_blob();
}
inline void DownloadResponse::set_allocated_blob(::pb::Blob* blob) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blob_;
  }
  if (blob) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blob = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blob, submessage_arena);
    }
    
  } else {
    
  }
  blob_ = blob;
  // @@protoc_insertion_point(field_set_allocated:pb.DownloadResponse.blob)
}

// -------------------------------------------------------------------

// Blob

// bytes content = 1;
inline void Blob::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Blob::content() const {
  // @@protoc_insertion_point(field_get:pb.Blob.content)
  return _internal_content();
}
inline void Blob::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:pb.Blob.content)
}
inline std::string* Blob::mutable_content() {
  // @@protoc_insertion_point(field_mutable:pb.Blob.content)
  return _internal_mutable_content();
}
inline const std::string& Blob::_internal_content() const {
  return content_.GetNoArena();
}
inline void Blob::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Blob::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Blob.content)
}
inline void Blob::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Blob.content)
}
inline void Blob::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Blob.content)
}
inline std::string* Blob::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Blob::release_content() {
  // @@protoc_insertion_point(field_release:pb.Blob.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Blob::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pb.Blob.content)
}

// uint64 rangeStart = 2;
inline void Blob::clear_rangestart() {
  rangestart_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Blob::_internal_rangestart() const {
  return rangestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Blob::rangestart() const {
  // @@protoc_insertion_point(field_get:pb.Blob.rangeStart)
  return _internal_rangestart();
}
inline void Blob::_internal_set_rangestart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rangestart_ = value;
}
inline void Blob::set_rangestart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rangestart(value);
  // @@protoc_insertion_point(field_set:pb.Blob.rangeStart)
}

// uint64 rangeEnd = 3;
inline void Blob::clear_rangeend() {
  rangeend_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Blob::_internal_rangeend() const {
  return rangeend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Blob::rangeend() const {
  // @@protoc_insertion_point(field_get:pb.Blob.rangeEnd)
  return _internal_rangeend();
}
inline void Blob::_internal_set_rangeend(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rangeend_ = value;
}
inline void Blob::set_rangeend(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rangeend(value);
  // @@protoc_insertion_point(field_set:pb.Blob.rangeEnd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_2eproto
