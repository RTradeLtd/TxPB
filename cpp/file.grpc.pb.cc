// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file.proto

#include "file.pb.h"
#include "file.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pb {

static const char* FileAPI_method_names[] = {
  "/pb.FileAPI/UploadFile",
  "/pb.FileAPI/DownloadFile",
};

std::unique_ptr< FileAPI::Stub> FileAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileAPI::Stub> stub(new FileAPI::Stub(channel));
  return stub;
}

FileAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UploadFile_(FileAPI_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DownloadFile_(FileAPI_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::pb::UploadRequest>* FileAPI::Stub::UploadFileRaw(::grpc::ClientContext* context, ::pb::PutResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::pb::UploadRequest>::Create(channel_.get(), rpcmethod_UploadFile_, context, response);
}

void FileAPI::Stub::experimental_async::UploadFile(::grpc::ClientContext* context, ::pb::PutResponse* response, ::grpc::experimental::ClientWriteReactor< ::pb::UploadRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::pb::UploadRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadFile_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::pb::UploadRequest>* FileAPI::Stub::AsyncUploadFileRaw(::grpc::ClientContext* context, ::pb::PutResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::pb::UploadRequest>::Create(channel_.get(), cq, rpcmethod_UploadFile_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::pb::UploadRequest>* FileAPI::Stub::PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, ::pb::PutResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::pb::UploadRequest>::Create(channel_.get(), cq, rpcmethod_UploadFile_, context, response, false, nullptr);
}

::grpc::ClientReader< ::pb::DownloadResponse>* FileAPI::Stub::DownloadFileRaw(::grpc::ClientContext* context, const ::pb::DownloadRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::pb::DownloadResponse>::Create(channel_.get(), rpcmethod_DownloadFile_, context, request);
}

void FileAPI::Stub::experimental_async::DownloadFile(::grpc::ClientContext* context, ::pb::DownloadRequest* request, ::grpc::experimental::ClientReadReactor< ::pb::DownloadResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::pb::DownloadResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadFile_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::pb::DownloadResponse>* FileAPI::Stub::AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::pb::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::pb::DownloadResponse>::Create(channel_.get(), cq, rpcmethod_DownloadFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::pb::DownloadResponse>* FileAPI::Stub::PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::pb::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::pb::DownloadResponse>::Create(channel_.get(), cq, rpcmethod_DownloadFile_, context, request, false, nullptr);
}

FileAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileAPI_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FileAPI::Service, ::pb::UploadRequest, ::pb::PutResponse>(
          std::mem_fn(&FileAPI::Service::UploadFile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileAPI_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileAPI::Service, ::pb::DownloadRequest, ::pb::DownloadResponse>(
          std::mem_fn(&FileAPI::Service::DownloadFile), this)));
}

FileAPI::Service::~Service() {
}

::grpc::Status FileAPI::Service::UploadFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::pb::UploadRequest>* reader, ::pb::PutResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileAPI::Service::DownloadFile(::grpc::ServerContext* context, const ::pb::DownloadRequest* request, ::grpc::ServerWriter< ::pb::DownloadResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb

