// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: admin.proto

#include "admin.pb.h"
#include "admin.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pb {

static const char* AdminAPI_method_names[] = {
  "/pb.AdminAPI/ManageGC",
  "/pb.AdminAPI/RefCount",
};

std::unique_ptr< AdminAPI::Stub> AdminAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AdminAPI::Stub> stub(new AdminAPI::Stub(channel));
  return stub;
}

AdminAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ManageGC_(AdminAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RefCount_(AdminAPI_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AdminAPI::Stub::ManageGC(::grpc::ClientContext* context, const ::pb::ManageGCRequest& request, ::pb::ManageGCResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ManageGC_, context, request, response);
}

void AdminAPI::Stub::experimental_async::ManageGC(::grpc::ClientContext* context, const ::pb::ManageGCRequest* request, ::pb::ManageGCResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ManageGC_, context, request, response, std::move(f));
}

void AdminAPI::Stub::experimental_async::ManageGC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::ManageGCResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ManageGC_, context, request, response, std::move(f));
}

void AdminAPI::Stub::experimental_async::ManageGC(::grpc::ClientContext* context, const ::pb::ManageGCRequest* request, ::pb::ManageGCResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ManageGC_, context, request, response, reactor);
}

void AdminAPI::Stub::experimental_async::ManageGC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::ManageGCResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ManageGC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::ManageGCResponse>* AdminAPI::Stub::AsyncManageGCRaw(::grpc::ClientContext* context, const ::pb::ManageGCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::ManageGCResponse>::Create(channel_.get(), cq, rpcmethod_ManageGC_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::ManageGCResponse>* AdminAPI::Stub::PrepareAsyncManageGCRaw(::grpc::ClientContext* context, const ::pb::ManageGCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::ManageGCResponse>::Create(channel_.get(), cq, rpcmethod_ManageGC_, context, request, false);
}

::grpc::Status AdminAPI::Stub::RefCount(::grpc::ClientContext* context, const ::pb::RefCountRequest& request, ::pb::RefCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RefCount_, context, request, response);
}

void AdminAPI::Stub::experimental_async::RefCount(::grpc::ClientContext* context, const ::pb::RefCountRequest* request, ::pb::RefCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RefCount_, context, request, response, std::move(f));
}

void AdminAPI::Stub::experimental_async::RefCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::RefCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RefCount_, context, request, response, std::move(f));
}

void AdminAPI::Stub::experimental_async::RefCount(::grpc::ClientContext* context, const ::pb::RefCountRequest* request, ::pb::RefCountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RefCount_, context, request, response, reactor);
}

void AdminAPI::Stub::experimental_async::RefCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::RefCountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RefCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::RefCountResponse>* AdminAPI::Stub::AsyncRefCountRaw(::grpc::ClientContext* context, const ::pb::RefCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::RefCountResponse>::Create(channel_.get(), cq, rpcmethod_RefCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::RefCountResponse>* AdminAPI::Stub::PrepareAsyncRefCountRaw(::grpc::ClientContext* context, const ::pb::RefCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pb::RefCountResponse>::Create(channel_.get(), cq, rpcmethod_RefCount_, context, request, false);
}

AdminAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminAPI::Service, ::pb::ManageGCRequest, ::pb::ManageGCResponse>(
          std::mem_fn(&AdminAPI::Service::ManageGC), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminAPI::Service, ::pb::RefCountRequest, ::pb::RefCountResponse>(
          std::mem_fn(&AdminAPI::Service::RefCount), this)));
}

AdminAPI::Service::~Service() {
}

::grpc::Status AdminAPI::Service::ManageGC(::grpc::ServerContext* context, const ::pb::ManageGCRequest* request, ::pb::ManageGCResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminAPI::Service::RefCount(::grpc::ServerContext* context, const ::pb::RefCountRequest* request, ::pb::RefCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb

