// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin.proto

#include "admin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_admin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefCountResponse_CidsEntry_DoNotUse_admin_2eproto;
namespace pb {
class ManageGCRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManageGCRequest> _instance;
} _ManageGCRequest_default_instance_;
class ManageGCResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManageGCResponse> _instance;
} _ManageGCResponse_default_instance_;
class RefCountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefCountRequest> _instance;
} _RefCountRequest_default_instance_;
class RefCountResponse_CidsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefCountResponse_CidsEntry_DoNotUse> _instance;
} _RefCountResponse_CidsEntry_DoNotUse_default_instance_;
class RefCountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefCountResponse> _instance;
} _RefCountResponse_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_ManageGCRequest_admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ManageGCRequest_default_instance_;
    new (ptr) ::pb::ManageGCRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ManageGCRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManageGCRequest_admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManageGCRequest_admin_2eproto}, {}};

static void InitDefaultsscc_info_ManageGCResponse_admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ManageGCResponse_default_instance_;
    new (ptr) ::pb::ManageGCResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ManageGCResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManageGCResponse_admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManageGCResponse_admin_2eproto}, {}};

static void InitDefaultsscc_info_RefCountRequest_admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RefCountRequest_default_instance_;
    new (ptr) ::pb::RefCountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RefCountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefCountRequest_admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RefCountRequest_admin_2eproto}, {}};

static void InitDefaultsscc_info_RefCountResponse_admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RefCountResponse_default_instance_;
    new (ptr) ::pb::RefCountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RefCountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefCountResponse_admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RefCountResponse_admin_2eproto}, {
      &scc_info_RefCountResponse_CidsEntry_DoNotUse_admin_2eproto.base,}};

static void InitDefaultsscc_info_RefCountResponse_CidsEntry_DoNotUse_admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RefCountResponse_CidsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb::RefCountResponse_CidsEntry_DoNotUse();
  }
  ::pb::RefCountResponse_CidsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefCountResponse_CidsEntry_DoNotUse_admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RefCountResponse_CidsEntry_DoNotUse_admin_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_admin_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_admin_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_admin_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_admin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ManageGCRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ManageGCRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ManageGCResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ManageGCResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RefCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RefCountRequest, cids_),
  PROTOBUF_FIELD_OFFSET(::pb::RefCountRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::pb::RefCountResponse_CidsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::RefCountResponse_CidsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RefCountResponse_CidsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb::RefCountResponse_CidsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RefCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RefCountResponse, cids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::ManageGCRequest)},
  { 6, -1, sizeof(::pb::ManageGCResponse)},
  { 12, -1, sizeof(::pb::RefCountRequest)},
  { 19, 26, sizeof(::pb::RefCountResponse_CidsEntry_DoNotUse)},
  { 28, -1, sizeof(::pb::RefCountResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ManageGCRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ManageGCResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RefCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RefCountResponse_CidsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_RefCountResponse_default_instance_),
};

const char descriptor_table_protodef_admin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013admin.proto\022\002pb\".\n\017ManageGCRequest\022\033\n\004"
  "type\030\001 \001(\0162\r.pb.GCREQTYPE\"\"\n\020ManageGCRes"
  "ponse\022\016\n\006status\030\001 \001(\t\".\n\017RefCountRequest"
  "\022\014\n\004cids\030\001 \003(\t\022\r\n\005limit\030\002 \001(\003\"m\n\020RefCoun"
  "tResponse\022,\n\004cids\030\001 \003(\0132\036.pb.RefCountRes"
  "ponse.CidsEntry\032+\n\tCidsEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\003:\0028\001*5\n\tGCREQTYPE\022\014\n\010GC_"
  "START\020\000\022\013\n\007GC_STOP\020\001\022\r\n\tGC_STATUS\020\002*/\n\nR"
  "EFREQTYPE\022\021\n\rREF_GET_COUNT\020\000\022\016\n\nREF_DELE"
  "TE\020\001*\033\n\nREFREQOPTS\022\r\n\tREF_FORCE\020\0002|\n\010Adm"
  "inAPI\0227\n\010ManageGC\022\023.pb.ManageGCRequest\032\024"
  ".pb.ManageGCResponse\"\000\0227\n\010RefCount\022\023.pb."
  "RefCountRequest\032\024.pb.RefCountResponse\"\000b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_admin_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_admin_2eproto_sccs[5] = {
  &scc_info_ManageGCRequest_admin_2eproto.base,
  &scc_info_ManageGCResponse_admin_2eproto.base,
  &scc_info_RefCountRequest_admin_2eproto.base,
  &scc_info_RefCountResponse_admin_2eproto.base,
  &scc_info_RefCountResponse_CidsEntry_DoNotUse_admin_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_admin_2eproto_once;
static bool descriptor_table_admin_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_admin_2eproto = {
  &descriptor_table_admin_2eproto_initialized, descriptor_table_protodef_admin_2eproto, "admin.proto", 527,
  &descriptor_table_admin_2eproto_once, descriptor_table_admin_2eproto_sccs, descriptor_table_admin_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_admin_2eproto::offsets,
  file_level_metadata_admin_2eproto, 5, file_level_enum_descriptors_admin_2eproto, file_level_service_descriptors_admin_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_admin_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_admin_2eproto), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GCREQTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_admin_2eproto);
  return file_level_enum_descriptors_admin_2eproto[0];
}
bool GCREQTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* REFREQTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_admin_2eproto);
  return file_level_enum_descriptors_admin_2eproto[1];
}
bool REFREQTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* REFREQOPTS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_admin_2eproto);
  return file_level_enum_descriptors_admin_2eproto[2];
}
bool REFREQOPTS_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ManageGCRequest::InitAsDefaultInstance() {
}
class ManageGCRequest::_Internal {
 public:
};

ManageGCRequest::ManageGCRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ManageGCRequest)
}
ManageGCRequest::ManageGCRequest(const ManageGCRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb.ManageGCRequest)
}

void ManageGCRequest::SharedCtor() {
  type_ = 0;
}

ManageGCRequest::~ManageGCRequest() {
  // @@protoc_insertion_point(destructor:pb.ManageGCRequest)
  SharedDtor();
}

void ManageGCRequest::SharedDtor() {
}

void ManageGCRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManageGCRequest& ManageGCRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManageGCRequest_admin_2eproto.base);
  return *internal_default_instance();
}


void ManageGCRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ManageGCRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

const char* ManageGCRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.GCREQTYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb::GCREQTYPE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManageGCRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ManageGCRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.GCREQTYPE type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ManageGCRequest)
  return target;
}

size_t ManageGCRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ManageGCRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.GCREQTYPE type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManageGCRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ManageGCRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ManageGCRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManageGCRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ManageGCRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ManageGCRequest)
    MergeFrom(*source);
  }
}

void ManageGCRequest::MergeFrom(const ManageGCRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ManageGCRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ManageGCRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ManageGCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManageGCRequest::CopyFrom(const ManageGCRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ManageGCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManageGCRequest::IsInitialized() const {
  return true;
}

void ManageGCRequest::InternalSwap(ManageGCRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManageGCRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManageGCResponse::InitAsDefaultInstance() {
}
class ManageGCResponse::_Internal {
 public:
};

ManageGCResponse::ManageGCResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ManageGCResponse)
}
ManageGCResponse::ManageGCResponse(const ManageGCResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.ManageGCResponse)
}

void ManageGCResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManageGCResponse_admin_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ManageGCResponse::~ManageGCResponse() {
  // @@protoc_insertion_point(destructor:pb.ManageGCResponse)
  SharedDtor();
}

void ManageGCResponse::SharedDtor() {
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ManageGCResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManageGCResponse& ManageGCResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManageGCResponse_admin_2eproto.base);
  return *internal_default_instance();
}


void ManageGCResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ManageGCResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ManageGCResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.ManageGCResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManageGCResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ManageGCResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ManageGCResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ManageGCResponse)
  return target;
}

size_t ManageGCResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ManageGCResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManageGCResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ManageGCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ManageGCResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManageGCResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ManageGCResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ManageGCResponse)
    MergeFrom(*source);
  }
}

void ManageGCResponse::MergeFrom(const ManageGCResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ManageGCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void ManageGCResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ManageGCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManageGCResponse::CopyFrom(const ManageGCResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ManageGCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManageGCResponse::IsInitialized() const {
  return true;
}

void ManageGCResponse::InternalSwap(ManageGCResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ManageGCResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefCountRequest::InitAsDefaultInstance() {
}
class RefCountRequest::_Internal {
 public:
};

RefCountRequest::RefCountRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RefCountRequest)
}
RefCountRequest::RefCountRequest(const RefCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cids_(from.cids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:pb.RefCountRequest)
}

void RefCountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefCountRequest_admin_2eproto.base);
  limit_ = PROTOBUF_LONGLONG(0);
}

RefCountRequest::~RefCountRequest() {
  // @@protoc_insertion_point(destructor:pb.RefCountRequest)
  SharedDtor();
}

void RefCountRequest::SharedDtor() {
}

void RefCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefCountRequest& RefCountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefCountRequest_admin_2eproto.base);
  return *internal_default_instance();
}


void RefCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RefCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cids_.Clear();
  limit_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RefCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string cids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.RefCountRequest.cids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefCountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RefCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string cids = 1;
  for (int i = 0, n = this->_internal_cids_size(); i < n; i++) {
    const auto& s = this->_internal_cids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.RefCountRequest.cids");
    target = stream->WriteString(1, s, target);
  }

  // int64 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RefCountRequest)
  return target;
}

size_t RefCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RefCountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cids_.size());
  for (int i = 0, n = cids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cids_.Get(i));
  }

  // int64 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefCountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RefCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RefCountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefCountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RefCountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RefCountRequest)
    MergeFrom(*source);
  }
}

void RefCountRequest::MergeFrom(const RefCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RefCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cids_.MergeFrom(from.cids_);
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void RefCountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RefCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefCountRequest::CopyFrom(const RefCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RefCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefCountRequest::IsInitialized() const {
  return true;
}

void RefCountRequest::InternalSwap(RefCountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cids_.InternalSwap(&other->cids_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefCountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RefCountResponse_CidsEntry_DoNotUse::RefCountResponse_CidsEntry_DoNotUse() {}
RefCountResponse_CidsEntry_DoNotUse::RefCountResponse_CidsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RefCountResponse_CidsEntry_DoNotUse::MergeFrom(const RefCountResponse_CidsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RefCountResponse_CidsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RefCountResponse_CidsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RefCountResponse::InitAsDefaultInstance() {
}
class RefCountResponse::_Internal {
 public:
};

RefCountResponse::RefCountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RefCountResponse)
}
RefCountResponse::RefCountResponse(const RefCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cids_.MergeFrom(from.cids_);
  // @@protoc_insertion_point(copy_constructor:pb.RefCountResponse)
}

void RefCountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefCountResponse_admin_2eproto.base);
}

RefCountResponse::~RefCountResponse() {
  // @@protoc_insertion_point(destructor:pb.RefCountResponse)
  SharedDtor();
}

void RefCountResponse::SharedDtor() {
}

void RefCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefCountResponse& RefCountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefCountResponse_admin_2eproto.base);
  return *internal_default_instance();
}


void RefCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RefCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cids_.Clear();
  _internal_metadata_.Clear();
}

const char* RefCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, int64> cids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RefCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int64> cids = 1;
  if (!this->_internal_cids().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb.RefCountResponse.CidsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cids().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_cids().begin();
          it != this->_internal_cids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RefCountResponse_CidsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_cids().begin();
          it != this->_internal_cids().end(); ++it) {
        target = RefCountResponse_CidsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RefCountResponse)
  return target;
}

size_t RefCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RefCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> cids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_cids().begin();
      it != this->_internal_cids().end(); ++it) {
    total_size += RefCountResponse_CidsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RefCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RefCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RefCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RefCountResponse)
    MergeFrom(*source);
  }
}

void RefCountResponse::MergeFrom(const RefCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RefCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cids_.MergeFrom(from.cids_);
}

void RefCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RefCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefCountResponse::CopyFrom(const RefCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RefCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefCountResponse::IsInitialized() const {
  return true;
}

void RefCountResponse::InternalSwap(RefCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cids_.Swap(&other->cids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ManageGCRequest* Arena::CreateMaybeMessage< ::pb::ManageGCRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ManageGCRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ManageGCResponse* Arena::CreateMaybeMessage< ::pb::ManageGCResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ManageGCResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RefCountRequest* Arena::CreateMaybeMessage< ::pb::RefCountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RefCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RefCountResponse_CidsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb::RefCountResponse_CidsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RefCountResponse_CidsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RefCountResponse* Arena::CreateMaybeMessage< ::pb::RefCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RefCountResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
