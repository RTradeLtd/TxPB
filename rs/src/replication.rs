// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `replication.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct Replication {
    // message fields
    pub header: ::std::string::String,
    pub cids_bytes: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub servers: ::protobuf::RepeatedField<ServerSource>,
    pub replication_factor: i32,
    pub refresh_interval_seconds: i32,
    pub server_down_delay_seconds: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Replication {
    fn default() -> &'a Replication {
        <Replication as ::protobuf::Message>::default_instance()
    }
}

impl Replication {
    pub fn new() -> Replication {
        ::std::default::Default::default()
    }

    // string header = 1;


    pub fn get_header(&self) -> &str {
        &self.header
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ::std::string::String) {
        self.header = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut ::std::string::String {
        &mut self.header
    }

    // Take field
    pub fn take_header(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.header, ::std::string::String::new())
    }

    // repeated bytes cids_bytes = 2;


    pub fn get_cids_bytes(&self) -> &[::std::vec::Vec<u8>] {
        &self.cids_bytes
    }
    pub fn clear_cids_bytes(&mut self) {
        self.cids_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_cids_bytes(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.cids_bytes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cids_bytes(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.cids_bytes
    }

    // Take field
    pub fn take_cids_bytes(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.cids_bytes, ::protobuf::RepeatedField::new())
    }

    // repeated .pb.ServerSource servers = 3;


    pub fn get_servers(&self) -> &[ServerSource] {
        &self.servers
    }
    pub fn clear_servers(&mut self) {
        self.servers.clear();
    }

    // Param is passed by value, moved
    pub fn set_servers(&mut self, v: ::protobuf::RepeatedField<ServerSource>) {
        self.servers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_servers(&mut self) -> &mut ::protobuf::RepeatedField<ServerSource> {
        &mut self.servers
    }

    // Take field
    pub fn take_servers(&mut self) -> ::protobuf::RepeatedField<ServerSource> {
        ::std::mem::replace(&mut self.servers, ::protobuf::RepeatedField::new())
    }

    // int32 replication_factor = 4;


    pub fn get_replication_factor(&self) -> i32 {
        self.replication_factor
    }
    pub fn clear_replication_factor(&mut self) {
        self.replication_factor = 0;
    }

    // Param is passed by value, moved
    pub fn set_replication_factor(&mut self, v: i32) {
        self.replication_factor = v;
    }

    // int32 refresh_interval_seconds = 5;


    pub fn get_refresh_interval_seconds(&self) -> i32 {
        self.refresh_interval_seconds
    }
    pub fn clear_refresh_interval_seconds(&mut self) {
        self.refresh_interval_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_refresh_interval_seconds(&mut self, v: i32) {
        self.refresh_interval_seconds = v;
    }

    // int32 server_down_delay_seconds = 6;


    pub fn get_server_down_delay_seconds(&self) -> i32 {
        self.server_down_delay_seconds
    }
    pub fn clear_server_down_delay_seconds(&mut self) {
        self.server_down_delay_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_server_down_delay_seconds(&mut self, v: i32) {
        self.server_down_delay_seconds = v;
    }
}

impl ::protobuf::Message for Replication {
    fn is_initialized(&self) -> bool {
        for v in &self.servers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.cids_bytes)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.servers)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.replication_factor = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.refresh_interval_seconds = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.server_down_delay_seconds = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.header.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.header);
        }
        for value in &self.cids_bytes {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.servers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.replication_factor != 0 {
            my_size += ::protobuf::rt::value_size(4, self.replication_factor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.refresh_interval_seconds != 0 {
            my_size += ::protobuf::rt::value_size(5, self.refresh_interval_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.server_down_delay_seconds != 0 {
            my_size += ::protobuf::rt::value_size(6, self.server_down_delay_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.header.is_empty() {
            os.write_string(1, &self.header)?;
        }
        for v in &self.cids_bytes {
            os.write_bytes(2, &v)?;
        };
        for v in &self.servers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.replication_factor != 0 {
            os.write_int32(4, self.replication_factor)?;
        }
        if self.refresh_interval_seconds != 0 {
            os.write_int32(5, self.refresh_interval_seconds)?;
        }
        if self.server_down_delay_seconds != 0 {
            os.write_int32(6, self.server_down_delay_seconds)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Replication {
        Replication::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "header",
                |m: &Replication| { &m.header },
                |m: &mut Replication| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "cids_bytes",
                |m: &Replication| { &m.cids_bytes },
                |m: &mut Replication| { &mut m.cids_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ServerSource>>(
                "servers",
                |m: &Replication| { &m.servers },
                |m: &mut Replication| { &mut m.servers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "replication_factor",
                |m: &Replication| { &m.replication_factor },
                |m: &mut Replication| { &mut m.replication_factor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "refresh_interval_seconds",
                |m: &Replication| { &m.refresh_interval_seconds },
                |m: &mut Replication| { &mut m.refresh_interval_seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "server_down_delay_seconds",
                |m: &Replication| { &m.server_down_delay_seconds },
                |m: &mut Replication| { &mut m.server_down_delay_seconds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Replication>(
                "Replication",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Replication {
        static instance: ::protobuf::rt::LazyV2<Replication> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Replication::new)
    }
}

impl ::protobuf::Clear for Replication {
    fn clear(&mut self) {
        self.header.clear();
        self.cids_bytes.clear();
        self.servers.clear();
        self.replication_factor = 0;
        self.refresh_interval_seconds = 0;
        self.server_down_delay_seconds = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Replication {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Replication {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerSource {
    // message fields
    pub addr_info: ::protobuf::SingularPtrField<AddrInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerSource {
    fn default() -> &'a ServerSource {
        <ServerSource as ::protobuf::Message>::default_instance()
    }
}

impl ServerSource {
    pub fn new() -> ServerSource {
        ::std::default::Default::default()
    }

    // .pb.AddrInfo addr_info = 1;


    pub fn get_addr_info(&self) -> &AddrInfo {
        self.addr_info.as_ref().unwrap_or_else(|| <AddrInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_addr_info(&mut self) {
        self.addr_info.clear();
    }

    pub fn has_addr_info(&self) -> bool {
        self.addr_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addr_info(&mut self, v: AddrInfo) {
        self.addr_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr_info(&mut self) -> &mut AddrInfo {
        if self.addr_info.is_none() {
            self.addr_info.set_default();
        }
        self.addr_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_addr_info(&mut self) -> AddrInfo {
        self.addr_info.take().unwrap_or_else(|| AddrInfo::new())
    }
}

impl ::protobuf::Message for ServerSource {
    fn is_initialized(&self) -> bool {
        for v in &self.addr_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.addr_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.addr_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.addr_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerSource {
        ServerSource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AddrInfo>>(
                "addr_info",
                |m: &ServerSource| { &m.addr_info },
                |m: &mut ServerSource| { &mut m.addr_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerSource>(
                "ServerSource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerSource {
        static instance: ::protobuf::rt::LazyV2<ServerSource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerSource::new)
    }
}

impl ::protobuf::Clear for ServerSource {
    fn clear(&mut self) {
        self.addr_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerSource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddrInfo {
    // message fields
    pub id_bytes: ::std::vec::Vec<u8>,
    pub addrs_bytes: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub grpc_port: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddrInfo {
    fn default() -> &'a AddrInfo {
        <AddrInfo as ::protobuf::Message>::default_instance()
    }
}

impl AddrInfo {
    pub fn new() -> AddrInfo {
        ::std::default::Default::default()
    }

    // bytes id_bytes = 1;


    pub fn get_id_bytes(&self) -> &[u8] {
        &self.id_bytes
    }
    pub fn clear_id_bytes(&mut self) {
        self.id_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_id_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.id_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id_bytes
    }

    // Take field
    pub fn take_id_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id_bytes, ::std::vec::Vec::new())
    }

    // repeated bytes addrs_bytes = 2;


    pub fn get_addrs_bytes(&self) -> &[::std::vec::Vec<u8>] {
        &self.addrs_bytes
    }
    pub fn clear_addrs_bytes(&mut self) {
        self.addrs_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_addrs_bytes(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.addrs_bytes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addrs_bytes(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.addrs_bytes
    }

    // Take field
    pub fn take_addrs_bytes(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.addrs_bytes, ::protobuf::RepeatedField::new())
    }

    // int32 grpc_port = 3;


    pub fn get_grpc_port(&self) -> i32 {
        self.grpc_port
    }
    pub fn clear_grpc_port(&mut self) {
        self.grpc_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_grpc_port(&mut self, v: i32) {
        self.grpc_port = v;
    }
}

impl ::protobuf::Message for AddrInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id_bytes)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.addrs_bytes)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.grpc_port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id_bytes);
        }
        for value in &self.addrs_bytes {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if self.grpc_port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.grpc_port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id_bytes.is_empty() {
            os.write_bytes(1, &self.id_bytes)?;
        }
        for v in &self.addrs_bytes {
            os.write_bytes(2, &v)?;
        };
        if self.grpc_port != 0 {
            os.write_int32(3, self.grpc_port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddrInfo {
        AddrInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "id_bytes",
                |m: &AddrInfo| { &m.id_bytes },
                |m: &mut AddrInfo| { &mut m.id_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "addrs_bytes",
                |m: &AddrInfo| { &m.addrs_bytes },
                |m: &mut AddrInfo| { &mut m.addrs_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "grpc_port",
                |m: &AddrInfo| { &m.grpc_port },
                |m: &mut AddrInfo| { &mut m.grpc_port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddrInfo>(
                "AddrInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddrInfo {
        static instance: ::protobuf::rt::LazyV2<AddrInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddrInfo::new)
    }
}

impl ::protobuf::Clear for AddrInfo {
    fn clear(&mut self) {
        self.id_bytes.clear();
        self.addrs_bytes.clear();
        self.grpc_port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddrInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddrInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Subscription {
    // message fields
    pub topic: ::std::string::String,
    pub author_id_bytes: ::std::vec::Vec<u8>,
    pub remove: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Subscription {
    fn default() -> &'a Subscription {
        <Subscription as ::protobuf::Message>::default_instance()
    }
}

impl Subscription {
    pub fn new() -> Subscription {
        ::std::default::Default::default()
    }

    // string topic = 1;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // bytes author_id_bytes = 2;


    pub fn get_author_id_bytes(&self) -> &[u8] {
        &self.author_id_bytes
    }
    pub fn clear_author_id_bytes(&mut self) {
        self.author_id_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_author_id_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.author_id_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_author_id_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.author_id_bytes
    }

    // Take field
    pub fn take_author_id_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.author_id_bytes, ::std::vec::Vec::new())
    }

    // bool remove = 3;


    pub fn get_remove(&self) -> bool {
        self.remove
    }
    pub fn clear_remove(&mut self) {
        self.remove = false;
    }

    // Param is passed by value, moved
    pub fn set_remove(&mut self, v: bool) {
        self.remove = v;
    }
}

impl ::protobuf::Message for Subscription {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.author_id_bytes)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.remove = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if !self.author_id_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.author_id_bytes);
        }
        if self.remove != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if !self.author_id_bytes.is_empty() {
            os.write_bytes(2, &self.author_id_bytes)?;
        }
        if self.remove != false {
            os.write_bool(3, self.remove)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Subscription {
        Subscription::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topic",
                |m: &Subscription| { &m.topic },
                |m: &mut Subscription| { &mut m.topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "author_id_bytes",
                |m: &Subscription| { &m.author_id_bytes },
                |m: &mut Subscription| { &mut m.author_id_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "remove",
                |m: &Subscription| { &m.remove },
                |m: &mut Subscription| { &mut m.remove },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Subscription>(
                "Subscription",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Subscription {
        static instance: ::protobuf::rt::LazyV2<Subscription> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Subscription::new)
    }
}

impl ::protobuf::Clear for Subscription {
    fn clear(&mut self) {
        self.topic.clear();
        self.author_id_bytes.clear();
        self.remove = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Subscription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Subscription {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReplicationStatus {
    // message fields
    pub ok: bool,
    pub is_active: bool,
    pub current_version: i64,
    pub target_version: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReplicationStatus {
    fn default() -> &'a ReplicationStatus {
        <ReplicationStatus as ::protobuf::Message>::default_instance()
    }
}

impl ReplicationStatus {
    pub fn new() -> ReplicationStatus {
        ::std::default::Default::default()
    }

    // bool ok = 1;


    pub fn get_ok(&self) -> bool {
        self.ok
    }
    pub fn clear_ok(&mut self) {
        self.ok = false;
    }

    // Param is passed by value, moved
    pub fn set_ok(&mut self, v: bool) {
        self.ok = v;
    }

    // bool is_active = 2;


    pub fn get_is_active(&self) -> bool {
        self.is_active
    }
    pub fn clear_is_active(&mut self) {
        self.is_active = false;
    }

    // Param is passed by value, moved
    pub fn set_is_active(&mut self, v: bool) {
        self.is_active = v;
    }

    // int64 current_version = 3;


    pub fn get_current_version(&self) -> i64 {
        self.current_version
    }
    pub fn clear_current_version(&mut self) {
        self.current_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_current_version(&mut self, v: i64) {
        self.current_version = v;
    }

    // int64 target_version = 4;


    pub fn get_target_version(&self) -> i64 {
        self.target_version
    }
    pub fn clear_target_version(&mut self) {
        self.target_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_version(&mut self, v: i64) {
        self.target_version = v;
    }
}

impl ::protobuf::Message for ReplicationStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ok = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_active = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.current_version = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.target_version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 2;
        }
        if self.is_active != false {
            my_size += 2;
        }
        if self.current_version != 0 {
            my_size += ::protobuf::rt::value_size(3, self.current_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.target_version != 0 {
            my_size += ::protobuf::rt::value_size(4, self.target_version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        if self.is_active != false {
            os.write_bool(2, self.is_active)?;
        }
        if self.current_version != 0 {
            os.write_int64(3, self.current_version)?;
        }
        if self.target_version != 0 {
            os.write_int64(4, self.target_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReplicationStatus {
        ReplicationStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ok",
                |m: &ReplicationStatus| { &m.ok },
                |m: &mut ReplicationStatus| { &mut m.ok },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_active",
                |m: &ReplicationStatus| { &m.is_active },
                |m: &mut ReplicationStatus| { &mut m.is_active },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "current_version",
                |m: &ReplicationStatus| { &m.current_version },
                |m: &mut ReplicationStatus| { &mut m.current_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "target_version",
                |m: &ReplicationStatus| { &m.target_version },
                |m: &mut ReplicationStatus| { &mut m.target_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReplicationStatus>(
                "ReplicationStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReplicationStatus {
        static instance: ::protobuf::rt::LazyV2<ReplicationStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReplicationStatus::new)
    }
}

impl ::protobuf::Clear for ReplicationStatus {
    fn clear(&mut self) {
        self.ok = false;
        self.is_active = false;
        self.current_version = 0;
        self.target_version = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReplicationStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplicationStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscriptionUpdate {
    // message fields
    pub version: i64,
    pub replication_bytes: ::std::vec::Vec<u8>,
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscriptionUpdate {
    fn default() -> &'a SubscriptionUpdate {
        <SubscriptionUpdate as ::protobuf::Message>::default_instance()
    }
}

impl SubscriptionUpdate {
    pub fn new() -> SubscriptionUpdate {
        ::std::default::Default::default()
    }

    // int64 version = 1;


    pub fn get_version(&self) -> i64 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i64) {
        self.version = v;
    }

    // bytes replication_bytes = 2;


    pub fn get_replication_bytes(&self) -> &[u8] {
        &self.replication_bytes
    }
    pub fn clear_replication_bytes(&mut self) {
        self.replication_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_replication_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.replication_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_replication_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.replication_bytes
    }

    // Take field
    pub fn take_replication_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.replication_bytes, ::std::vec::Vec::new())
    }

    // bytes signature = 3;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SubscriptionUpdate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.replication_bytes)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.replication_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.replication_bytes);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_int64(1, self.version)?;
        }
        if !self.replication_bytes.is_empty() {
            os.write_bytes(2, &self.replication_bytes)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(3, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscriptionUpdate {
        SubscriptionUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "version",
                |m: &SubscriptionUpdate| { &m.version },
                |m: &mut SubscriptionUpdate| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "replication_bytes",
                |m: &SubscriptionUpdate| { &m.replication_bytes },
                |m: &mut SubscriptionUpdate| { &mut m.replication_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &SubscriptionUpdate| { &m.signature },
                |m: &mut SubscriptionUpdate| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscriptionUpdate>(
                "SubscriptionUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscriptionUpdate {
        static instance: ::protobuf::rt::LazyV2<SubscriptionUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscriptionUpdate::new)
    }
}

impl ::protobuf::Clear for SubscriptionUpdate {
    fn clear(&mut self) {
        self.version = 0;
        self.replication_bytes.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscriptionUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscriptionUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedSubscription {
    // message fields
    pub sub_part: ::protobuf::SingularPtrField<Subscription>,
    pub update_part: ::protobuf::SingularPtrField<SubscriptionUpdate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignedSubscription {
    fn default() -> &'a SignedSubscription {
        <SignedSubscription as ::protobuf::Message>::default_instance()
    }
}

impl SignedSubscription {
    pub fn new() -> SignedSubscription {
        ::std::default::Default::default()
    }

    // .pb.Subscription sub_part = 1;


    pub fn get_sub_part(&self) -> &Subscription {
        self.sub_part.as_ref().unwrap_or_else(|| <Subscription as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sub_part(&mut self) {
        self.sub_part.clear();
    }

    pub fn has_sub_part(&self) -> bool {
        self.sub_part.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sub_part(&mut self, v: Subscription) {
        self.sub_part = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_part(&mut self) -> &mut Subscription {
        if self.sub_part.is_none() {
            self.sub_part.set_default();
        }
        self.sub_part.as_mut().unwrap()
    }

    // Take field
    pub fn take_sub_part(&mut self) -> Subscription {
        self.sub_part.take().unwrap_or_else(|| Subscription::new())
    }

    // .pb.SubscriptionUpdate update_part = 2;


    pub fn get_update_part(&self) -> &SubscriptionUpdate {
        self.update_part.as_ref().unwrap_or_else(|| <SubscriptionUpdate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_part(&mut self) {
        self.update_part.clear();
    }

    pub fn has_update_part(&self) -> bool {
        self.update_part.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_part(&mut self, v: SubscriptionUpdate) {
        self.update_part = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_part(&mut self) -> &mut SubscriptionUpdate {
        if self.update_part.is_none() {
            self.update_part.set_default();
        }
        self.update_part.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_part(&mut self) -> SubscriptionUpdate {
        self.update_part.take().unwrap_or_else(|| SubscriptionUpdate::new())
    }
}

impl ::protobuf::Message for SignedSubscription {
    fn is_initialized(&self) -> bool {
        for v in &self.sub_part {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_part {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sub_part)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_part)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.sub_part.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_part.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.sub_part.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_part.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedSubscription {
        SignedSubscription::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Subscription>>(
                "sub_part",
                |m: &SignedSubscription| { &m.sub_part },
                |m: &mut SignedSubscription| { &mut m.sub_part },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SubscriptionUpdate>>(
                "update_part",
                |m: &SignedSubscription| { &m.update_part },
                |m: &mut SignedSubscription| { &mut m.update_part },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignedSubscription>(
                "SignedSubscription",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignedSubscription {
        static instance: ::protobuf::rt::LazyV2<SignedSubscription> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignedSubscription::new)
    }
}

impl ::protobuf::Clear for SignedSubscription {
    fn clear(&mut self) {
        self.sub_part.clear();
        self.update_part.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedSubscription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedSubscription {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11replication.proto\x12\x02pb\"\x94\x02\n\x0bReplication\x12\x16\n\
    \x06header\x18\x01\x20\x01(\tR\x06header\x12\x1d\n\ncids_bytes\x18\x02\
    \x20\x03(\x0cR\tcidsBytes\x12*\n\x07servers\x18\x03\x20\x03(\x0b2\x10.pb\
    .ServerSourceR\x07servers\x12-\n\x12replication_factor\x18\x04\x20\x01(\
    \x05R\x11replicationFactor\x128\n\x18refresh_interval_seconds\x18\x05\
    \x20\x01(\x05R\x16refreshIntervalSeconds\x129\n\x19server_down_delay_sec\
    onds\x18\x06\x20\x01(\x05R\x16serverDownDelaySeconds\"9\n\x0cServerSourc\
    e\x12)\n\taddr_info\x18\x01\x20\x01(\x0b2\x0c.pb.AddrInfoR\x08addrInfo\"\
    c\n\x08AddrInfo\x12\x19\n\x08id_bytes\x18\x01\x20\x01(\x0cR\x07idBytes\
    \x12\x1f\n\x0baddrs_bytes\x18\x02\x20\x03(\x0cR\naddrsBytes\x12\x1b\n\tg\
    rpc_port\x18\x03\x20\x01(\x05R\x08grpcPort\"d\n\x0cSubscription\x12\x14\
    \n\x05topic\x18\x01\x20\x01(\tR\x05topic\x12&\n\x0fauthor_id_bytes\x18\
    \x02\x20\x01(\x0cR\rauthorIdBytes\x12\x16\n\x06remove\x18\x03\x20\x01(\
    \x08R\x06remove\"\x90\x01\n\x11ReplicationStatus\x12\x0e\n\x02ok\x18\x01\
    \x20\x01(\x08R\x02ok\x12\x1b\n\tis_active\x18\x02\x20\x01(\x08R\x08isAct\
    ive\x12'\n\x0fcurrent_version\x18\x03\x20\x01(\x03R\x0ecurrentVersion\
    \x12%\n\x0etarget_version\x18\x04\x20\x01(\x03R\rtargetVersion\"y\n\x12S\
    ubscriptionUpdate\x12\x18\n\x07version\x18\x01\x20\x01(\x03R\x07version\
    \x12+\n\x11replication_bytes\x18\x02\x20\x01(\x0cR\x10replicationBytes\
    \x12\x1c\n\tsignature\x18\x03\x20\x01(\x0cR\tsignature\"z\n\x12SignedSub\
    scription\x12+\n\x08sub_part\x18\x01\x20\x01(\x0b2\x10.pb.SubscriptionR\
    \x07subPart\x127\n\x0bupdate_part\x18\x02\x20\x01(\x0b2\x16.pb.Subscript\
    ionUpdateR\nupdatePart2\xfc\x01\n\nreplicator\x120\n\x03Add\x12\x10.pb.S\
    ubscription\x1a\x15.pb.ReplicationStatus0\x01\x123\n\x06Status\x12\x10.p\
    b.Subscription\x1a\x15.pb.ReplicationStatus0\x01\x12A\n\x15GetSubscripti\
    onUpdate\x12\x10.pb.Subscription\x1a\x16.pb.SubscriptionUpdate\x12D\n\
    \x11SubmitReplication\x12\x16.pb.SignedSubscription\x1a\x15.pb.Replicati\
    onStatus0\x01J\x8d&\n\x06\x12\x04\0\0Z\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\x08\n\na\n\x02\x04\0\x12\x04\x04\0\x18\
    \x01\x1aU\x20Replication\x20message\x20is\x20a\x20signable\x20data\x20st\
    ructure\x20to\x20represent\x20a\x20replication\x20scheme\r\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x04\x08\x13\n\xa3\x02\n\x04\x04\0\x02\0\x12\x03\t\x04\
    \x16\x1a\x95\x02\x20Header\x20must\x20be\x20\"rtrade-replication\x20v0..\
    .\"\x20for\x20development\x20stage,\x20this\x20is\x20a\x20required\x20se\
    curity\x20header.\r\n\x20-\x20Avoid\x20collision\x20from\x20other\x20sig\
    ned\x20data.\r\n\x20-\x20Allow\x20future\x20versions\x20to\x20require\
    \x20different\x20validation\x20rules.\r\n\x20Any\x20signer\x20must\x20un\
    derstand\x20every\x20header\x20tag\x20to\x20sign\x20documents.\r\n\n\r\n\
    \x05\x04\0\x02\0\x04\x12\x04\t\x04\x04\x14\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\x0b\x11\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\t\x14\x15\n{\n\x04\x04\0\x02\x01\x12\x03\
    \x0c\x04\"\x1an\x20CIDs\x20is\x20the\x20list\x20of\x20contents\x20to\x20\
    replicate.\r\n\x20Please\x20use\x20helper\x20functions\x20GetCIDs\x20and\
    \x20AddCIDs\x20for\x20this\x20field\r\n\n\x0c\n\x05\x04\0\x02\x01\x04\
    \x12\x03\x0c\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0c\r\x12\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0c\x13\x1d\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x0c\x20!\n^\n\x04\x04\0\x02\x02\x12\x03\x0e\x04&\x1aQ\
    \x20Servers\x20list\x20the\x20candidate\x20severs\x20to\x20replicate\x20\
    to,\x20in\x20the\x20order\x20of\x20preference.\r\n\n\x0c\n\x05\x04\0\x02\
    \x02\x04\x12\x03\x0e\x04\x0c\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x0e\r\
    \x19\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0e\x1a!\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x0e$%\nI\n\x04\x04\0\x02\x03\x12\x03\x10\x04!\x1a<\
    \x20replication_factor\x20is\x20the\x20number\x20of\x20replications\x20d\
    esired.\r\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x10\x04\x0e&\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\x10\x04\t\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x10\n\x1c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x10\x1f\x20\n\xae\
    \x02\n\x04\x04\0\x02\x04\x12\x03\x14\x04'\x1a\xa0\x02\x20refresh_interva\
    l_seconds\x20is\x20the\x20*suggested*\x20number\x20of\x20seconds\x20to\
    \x20wait\x20before\x20checking\x20\r\n\x20if\x20a\x20remote\x20server\
    \x20is\x20up.\x20The\x20first\x20check\x20should\x20be\x20random\x20from\
    \x200\x20to\x20refresh_interval_seconds.\r\n\x20Each\x20replicator\x20ca\
    n\x20have\x20it's\x20own\x20max_interval.\x20A\x20sensible\x20default\
    \x20value\x20should\x20be\x20used\x20if\x20it\x20is\x200.\r\n\n\r\n\x05\
    \x04\0\x02\x04\x04\x12\x04\x14\x04\x10!\n\x0c\n\x05\x04\0\x02\x04\x05\
    \x12\x03\x14\x04\t\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x14\n\"\n\x0c\n\
    \x05\x04\0\x02\x04\x03\x12\x03\x14%&\n\xd4\x01\n\x04\x04\0\x02\x05\x12\
    \x03\x17\x04(\x1a\xc6\x01\x20server_down_delay_seconds\x20is\x20the\x20n\
    umber\x20of\x20seconds\x20to\x20wait\x20after\x20a\x20server\x20is\x20do\
    wn\x20before\x20the\x20\r\n\x20next\x20reserved\x20server\x20is\x20reque\
    sted\x20to\x20be\x20active.\x20A\x20sensible\x20default\x20value\x20shou\
    ld\x20be\x20used\x20if\x20it\x20is\x200.\r\n\n\r\n\x05\x04\0\x02\x05\x04\
    \x12\x04\x17\x04\x14'\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x17\x04\t\n\
    \x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x17\n#\n\x0c\n\x05\x04\0\x02\x05\
    \x03\x12\x03\x17&'\n\x8a\x01\n\x02\x04\x01\x12\x04\x1c\0\x1e\x01\x1a~\
    \x20ServerSource\x20is\x20a\x20list\x20of\x20one\x20or\x20more\x20server\
    s.\r\n\x20TODO:\x20add\x20field\x20to\x20allow\x20referring\x20to\x20a\
    \x20list\x20of\x20servers\x20from\x20another\x20file.\r\n\n\n\n\x03\x04\
    \x01\x01\x12\x03\x1c\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1d\x04\
    \x1b\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x1d\x04\x1c\x16\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03\x1d\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x1d\r\x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1d\x19\x1a\nl\n\x02\
    \x04\x02\x12\x04!\0*\x01\x1a`\x20AddrInfo\x20can\x20be\x20used\x20to\x20\
    ID\x20and\x20locate\x20a\x20server\x20(see\x20also\x20libp2p/go-libp2p-c\
    ore/peer#AddrInfo)\r\n\n\n\n\x03\x04\x02\x01\x12\x03!\x08\x10\n\x9d\x01\
    \n\x04\x04\x02\x02\0\x12\x03$\x04\x17\x1a\x8f\x01\x20id_bytes\x20is\x20a\
    \x20libp2p\x20peer\x20identity.\x20It\x20is\x20used\x20to\x20verity\x20t\
    he\x20Peer's\x20public\x20key.\r\n\x20Please\x20use\x20helper\x20functio\
    ns\x20GetID\x20and\x20SetID\x20for\x20this\x20field\r\n\n\r\n\x05\x04\
    \x02\x02\0\x04\x12\x04$\x04!\x12\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03$\
    \x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03$\n\x12\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03$\x15\x16\n\x98\x01\n\x04\x04\x02\x02\x01\x12\x03'\x04\
    #\x1a\x8a\x01\x20addrBytes\x20are\x20bytes\x20of\x20Multiaddr\x20for\x20\
    locating\x20this\x20peer.\r\n\x20Please\x20use\x20helper\x20functions\
    \x20GetMultiAddrs,\x20and\x20SetMultiAddrs\x20for\x20this\x20field.\r\n\
    \n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03'\x04\x0c\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03'\r\x12\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03'\x13\
    \x1e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03'!\"\nn\n\x04\x04\x02\x02\
    \x02\x12\x03)\x04\x18\x1aa\x20grpc\x20port\x20for\x20replication\x20prot\
    ocol.\x20will\x20be\x20optional\x20once\x20grpc\x20is\x20integrated\x20i\
    nto\x20multistream.\r\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04)\x04'#\n\
    \x0c\n\x05\x04\x02\x02\x02\x05\x12\x03)\x04\t\n\x0c\n\x05\x04\x02\x02\
    \x02\x01\x12\x03)\n\x13\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03)\x16\x17\
    \n<\n\x02\x06\0\x12\x04.\08\x01\x1a0\x20The\x20replicator\x20provides\
    \x20replication\x20services.\r\n\n\n\n\x03\x06\0\x01\x12\x03.\x08\x12\nn\
    \n\x04\x06\0\x02\0\x12\x030\x04>\x1aa\x20Add\x20is\x20used\x20to\x20add\
    \x20a\x20replication\x20to\x20this\x20server,\x20changing\x20it's\x20sta\
    tus\x20from\x20reserved\x20to\x20active.\r\n\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x030\x08\x0b\n\x0c\n\x05\x06\0\x02\0\x02\x12\x030\r\x19\n\x0c\n\x05\
    \x06\0\x02\0\x06\x12\x030$*\n\x0c\n\x05\x06\0\x02\0\x03\x12\x030+<\nZ\n\
    \x04\x06\0\x02\x01\x12\x032\x04A\x1aM\x20Status\x20returns\x20an\x20upda\
    ting\x20stream\x20of\x20the\x20replication\x20status\x20on\x20the\x20ser\
    ver.\r\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x032\x08\x0e\n\x0c\n\x05\x06\
    \0\x02\x01\x02\x12\x032\x10\x1c\n\x0c\n\x05\x06\0\x02\x01\x06\x12\x032'-\
    \n\x0c\n\x05\x06\0\x02\x01\x03\x12\x032.?\nZ\n\x04\x06\0\x02\x02\x12\x03\
    4\x04J\x1aM\x20GetSubscriptionUpdate\x20returns\x20the\x20latest\x20vers\
    ion\x20of\x20subscribed\x20replication\r\n\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x034\x08\x1d\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x034\x1f+\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x0346H\n\xb7\x01\n\x04\x06\0\x02\x03\x12\x037\
    \x04R\x1a\xa9\x01\x20SubmitReplication\x20is\x20used\x20by\x20client\x20\
    agents\x20to\x20start\x20replications,\x20after\x20they\x20\r\n\x20have\
    \x20uploaded\x20the\x20files\x20and\x20retrieved\x20the\x20cid,\x20and\
    \x20collected\x20servers\x20to\x20replicate\x20too.\r\n\n\x0c\n\x05\x06\
    \0\x02\x03\x01\x12\x037\x08\x19\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x037\
    \x1b-\n\x0c\n\x05\x06\0\x02\x03\x06\x12\x0378>\n\x0c\n\x05\x06\0\x02\x03\
    \x03\x12\x037?P\n\n\n\x02\x04\x03\x12\x04:\0A\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03:\x08\x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03;\x04\x15\n\r\n\x05\
    \x04\x03\x02\0\x04\x12\x04;\x04:\x15\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03;\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03;\x0b\x10\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03;\x13\x14\n\x0b\n\x04\x04\x03\x02\x01\x12\x03<\
    \x04\x1e\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04<\x04;\x15\n\x0c\n\x05\x04\
    \x03\x02\x01\x05\x12\x03<\x04\t\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03<\
    \n\x19\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03<\x1c\x1d\n\x9a\x01\n\x04\
    \x04\x03\x02\x02\x12\x03@\x04\x14\x1a\x8c\x01if\x20true,\x20remove\x20th\
    is\x20Subscription.\r\nFor\x20replicator.Add,\x20deactive\x20this\x20rep\
    lication.\r\nFor\x20replicator.WaitForUpdates,\x20stop\x20reporting\x20u\
    pdates.\r\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04@\x04<\x1e\n\x0c\n\x05\
    \x04\x03\x02\x02\x05\x12\x03@\x04\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\
    \x12\x03@\t\x0f\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03@\x12\x13\n\n\n\
    \x02\x04\x04\x12\x04C\0L\x01\n\n\n\x03\x04\x04\x01\x12\x03C\x08\x19\n5\n\
    \x04\x04\x04\x02\0\x12\x03E\x04\x10\x1a(ok\x20report\x20success\x20for\
    \x20action\x20submitted\r\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04E\x04C\
    \x1a\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03E\x04\x08\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03E\t\x0b\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03E\x0e\x0f\
    \nU\n\x04\x04\x04\x02\x01\x12\x03G\x04\x17\x1aHis_active\x20report\x20if\
    \x20the\x20replication\x20is\x20currently\x20active\x20on\x20this\x20ser\
    ver\r\n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04G\x04E\x10\n\x0c\n\x05\x04\
    \x04\x02\x01\x05\x12\x03G\x04\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\
    \x03G\t\x12\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03G\x15\x16\nY\n\x04\
    \x04\x04\x02\x02\x12\x03I\x04\x1e\x1aLcurrent_version\x20is\x20the\x20hi\
    ghest\x20version\x20this\x20replicator/server\x20has\x20locally.\r\n\n\r\
    \n\x05\x04\x04\x02\x02\x04\x12\x04I\x04G\x17\n\x0c\n\x05\x04\x04\x02\x02\
    \x05\x12\x03I\x04\t\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03I\n\x19\n\x0c\
    \n\x05\x04\x04\x02\x02\x03\x12\x03I\x1c\x1d\np\n\x04\x04\x04\x02\x03\x12\
    \x03K\x04\x1d\x1actarget_version\x20is\x20the\x20highest\x20version\x20t\
    his\x20replicator/server\x20knows\x20about\x20and\x20can\x20verify\x20to\
    \x20exist.\r\n\n\r\n\x05\x04\x04\x02\x03\x04\x12\x04K\x04I\x1e\n\x0c\n\
    \x05\x04\x04\x02\x03\x05\x12\x03K\x04\t\n\x0c\n\x05\x04\x04\x02\x03\x01\
    \x12\x03K\n\x18\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03K\x1b\x1c\n\n\n\
    \x02\x04\x05\x12\x04N\0U\x01\n\n\n\x03\x04\x05\x01\x12\x03N\x08\x1a\n1\n\
    \x04\x04\x05\x02\0\x12\x03P\x04\x16\x1a$strictly\x20increasing\x20versio\
    n\x20number\r\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04P\x04N\x1b\n\x0c\n\
    \x05\x04\x05\x02\0\x05\x12\x03P\x04\t\n\x0c\n\x05\x04\x05\x02\0\x01\x12\
    \x03P\n\x11\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03P\x14\x15\n7\n\x04\x04\
    \x05\x02\x01\x12\x03R\x04\x20\x1a*replication\x20file\x20is\x20in\x20byt\
    es\x20for\x20signing\r\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04R\x04P\x16\
    \n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03R\x04\t\n\x0c\n\x05\x04\x05\x02\
    \x01\x01\x12\x03R\n\x1b\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03R\x1e\x1f\
    \n\x85\x01\n\x04\x04\x05\x02\x02\x12\x03T\x04\x18\x1axsignature\x20signs\
    \x20the\x20Subscription\x20and\x20above\x20data\x20in\x20length\x20delim\
    ited\x20form\x20in\x20the\x20order\x20topic|author|version|replication\r\
    \n\n\r\n\x05\x04\x05\x02\x02\x04\x12\x04T\x04R\x20\n\x0c\n\x05\x04\x05\
    \x02\x02\x05\x12\x03T\x04\t\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03T\n\
    \x13\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03T\x16\x17\n\n\n\x02\x04\x06\
    \x12\x04W\0Z\x01\n\n\n\x03\x04\x06\x01\x12\x03W\x08\x1a\n\x0b\n\x04\x04\
    \x06\x02\0\x12\x03X\x04\x1e\n\r\n\x05\x04\x06\x02\0\x04\x12\x04X\x04W\
    \x1b\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03X\x04\x10\n\x0c\n\x05\x04\x06\
    \x02\0\x01\x12\x03X\x11\x19\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03X\x1c\
    \x1d\n\x0b\n\x04\x04\x06\x02\x01\x12\x03Y\x04'\n\r\n\x05\x04\x06\x02\x01\
    \x04\x12\x04Y\x04X\x1e\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03Y\x04\x16\
    \n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03Y\x17\"\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03Y%&b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
