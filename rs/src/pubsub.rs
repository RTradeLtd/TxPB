// This file is generated by rust-protobuf 2.10.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `pubsub.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_2;

#[derive(PartialEq,Clone,Default)]
pub struct PubSubRequest {
    // message fields
    pub requestType: PSREQTYPE,
    pub topics: ::protobuf::RepeatedField<::std::string::String>,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PubSubRequest {
    fn default() -> &'a PubSubRequest {
        <PubSubRequest as ::protobuf::Message>::default_instance()
    }
}

impl PubSubRequest {
    pub fn new() -> PubSubRequest {
        ::std::default::Default::default()
    }

    // .pb.PSREQTYPE requestType = 1;


    pub fn get_requestType(&self) -> PSREQTYPE {
        self.requestType
    }
    pub fn clear_requestType(&mut self) {
        self.requestType = PSREQTYPE::PS_GET_TOPICS;
    }

    // Param is passed by value, moved
    pub fn set_requestType(&mut self, v: PSREQTYPE) {
        self.requestType = v;
    }

    // repeated string topics = 2;


    pub fn get_topics(&self) -> &[::std::string::String] {
        &self.topics
    }
    pub fn clear_topics(&mut self) {
        self.topics.clear();
    }

    // Param is passed by value, moved
    pub fn set_topics(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.topics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_topics(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.topics
    }

    // Take field
    pub fn take_topics(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.topics, ::protobuf::RepeatedField::new())
    }

    // bytes data = 3;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PubSubRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.requestType, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.topics)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.requestType != PSREQTYPE::PS_GET_TOPICS {
            my_size += ::protobuf::rt::enum_size(1, self.requestType);
        }
        for value in &self.topics {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.requestType != PSREQTYPE::PS_GET_TOPICS {
            os.write_enum(1, self.requestType.value())?;
        }
        for v in &self.topics {
            os.write_string(2, &v)?;
        };
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PubSubRequest {
        PubSubRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PSREQTYPE>>(
                    "requestType",
                    |m: &PubSubRequest| { &m.requestType },
                    |m: &mut PubSubRequest| { &mut m.requestType },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "topics",
                    |m: &PubSubRequest| { &m.topics },
                    |m: &mut PubSubRequest| { &mut m.topics },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &PubSubRequest| { &m.data },
                    |m: &mut PubSubRequest| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PubSubRequest>(
                    "PubSubRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PubSubRequest {
        static mut instance: ::protobuf::lazy::Lazy<PubSubRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PubSubRequest,
        };
        unsafe {
            instance.get(PubSubRequest::new)
        }
    }
}

impl ::protobuf::Clear for PubSubRequest {
    fn clear(&mut self) {
        self.requestType = PSREQTYPE::PS_GET_TOPICS;
        self.topics.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PubSubRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PubSubRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PubSubResponse {
    // message fields
    pub requestType: PSREQTYPE,
    pub message: ::protobuf::RepeatedField<PubSubMessage>,
    pub topics: ::protobuf::RepeatedField<::std::string::String>,
    pub peers: ::protobuf::RepeatedField<PubSubPeer>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PubSubResponse {
    fn default() -> &'a PubSubResponse {
        <PubSubResponse as ::protobuf::Message>::default_instance()
    }
}

impl PubSubResponse {
    pub fn new() -> PubSubResponse {
        ::std::default::Default::default()
    }

    // .pb.PSREQTYPE requestType = 1;


    pub fn get_requestType(&self) -> PSREQTYPE {
        self.requestType
    }
    pub fn clear_requestType(&mut self) {
        self.requestType = PSREQTYPE::PS_GET_TOPICS;
    }

    // Param is passed by value, moved
    pub fn set_requestType(&mut self, v: PSREQTYPE) {
        self.requestType = v;
    }

    // repeated .pb.PubSubMessage message = 2;


    pub fn get_message(&self) -> &[PubSubMessage] {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::protobuf::RepeatedField<PubSubMessage>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    pub fn mut_message(&mut self) -> &mut ::protobuf::RepeatedField<PubSubMessage> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::protobuf::RepeatedField<PubSubMessage> {
        ::std::mem::replace(&mut self.message, ::protobuf::RepeatedField::new())
    }

    // repeated string topics = 3;


    pub fn get_topics(&self) -> &[::std::string::String] {
        &self.topics
    }
    pub fn clear_topics(&mut self) {
        self.topics.clear();
    }

    // Param is passed by value, moved
    pub fn set_topics(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.topics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_topics(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.topics
    }

    // Take field
    pub fn take_topics(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.topics, ::protobuf::RepeatedField::new())
    }

    // repeated .pb.PubSubPeer peers = 4;


    pub fn get_peers(&self) -> &[PubSubPeer] {
        &self.peers
    }
    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<PubSubPeer>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<PubSubPeer> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<PubSubPeer> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PubSubResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.peers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.requestType, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.topics)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.requestType != PSREQTYPE::PS_GET_TOPICS {
            my_size += ::protobuf::rt::enum_size(1, self.requestType);
        }
        for value in &self.message {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.topics {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.peers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.requestType != PSREQTYPE::PS_GET_TOPICS {
            os.write_enum(1, self.requestType.value())?;
        }
        for v in &self.message {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.topics {
            os.write_string(3, &v)?;
        };
        for v in &self.peers {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PubSubResponse {
        PubSubResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PSREQTYPE>>(
                    "requestType",
                    |m: &PubSubResponse| { &m.requestType },
                    |m: &mut PubSubResponse| { &mut m.requestType },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PubSubMessage>>(
                    "message",
                    |m: &PubSubResponse| { &m.message },
                    |m: &mut PubSubResponse| { &mut m.message },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "topics",
                    |m: &PubSubResponse| { &m.topics },
                    |m: &mut PubSubResponse| { &mut m.topics },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PubSubPeer>>(
                    "peers",
                    |m: &PubSubResponse| { &m.peers },
                    |m: &mut PubSubResponse| { &mut m.peers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PubSubResponse>(
                    "PubSubResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PubSubResponse {
        static mut instance: ::protobuf::lazy::Lazy<PubSubResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PubSubResponse,
        };
        unsafe {
            instance.get(PubSubResponse::new)
        }
    }
}

impl ::protobuf::Clear for PubSubResponse {
    fn clear(&mut self) {
        self.requestType = PSREQTYPE::PS_GET_TOPICS;
        self.message.clear();
        self.topics.clear();
        self.peers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PubSubResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PubSubResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PubSubMessage {
    // message fields
    pub from: ::std::vec::Vec<u8>,
    pub data: ::std::vec::Vec<u8>,
    pub seqno: ::std::vec::Vec<u8>,
    pub topicIDs: ::protobuf::RepeatedField<::std::string::String>,
    pub signature: ::std::vec::Vec<u8>,
    pub key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PubSubMessage {
    fn default() -> &'a PubSubMessage {
        <PubSubMessage as ::protobuf::Message>::default_instance()
    }
}

impl PubSubMessage {
    pub fn new() -> PubSubMessage {
        ::std::default::Default::default()
    }

    // bytes from = 1;


    pub fn get_from(&self) -> &[u8] {
        &self.from
    }
    pub fn clear_from(&mut self) {
        self.from.clear();
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: ::std::vec::Vec<u8>) {
        self.from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.from
    }

    // Take field
    pub fn take_from(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.from, ::std::vec::Vec::new())
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // bytes seqno = 3;


    pub fn get_seqno(&self) -> &[u8] {
        &self.seqno
    }
    pub fn clear_seqno(&mut self) {
        self.seqno.clear();
    }

    // Param is passed by value, moved
    pub fn set_seqno(&mut self, v: ::std::vec::Vec<u8>) {
        self.seqno = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seqno(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.seqno
    }

    // Take field
    pub fn take_seqno(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.seqno, ::std::vec::Vec::new())
    }

    // repeated string topicIDs = 4;


    pub fn get_topicIDs(&self) -> &[::std::string::String] {
        &self.topicIDs
    }
    pub fn clear_topicIDs(&mut self) {
        self.topicIDs.clear();
    }

    // Param is passed by value, moved
    pub fn set_topicIDs(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.topicIDs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_topicIDs(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.topicIDs
    }

    // Take field
    pub fn take_topicIDs(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.topicIDs, ::protobuf::RepeatedField::new())
    }

    // bytes signature = 5;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    // bytes key = 6;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PubSubMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.from)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.seqno)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.topicIDs)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.from.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.from);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        if !self.seqno.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.seqno);
        }
        for value in &self.topicIDs {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.signature);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.from.is_empty() {
            os.write_bytes(1, &self.from)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        if !self.seqno.is_empty() {
            os.write_bytes(3, &self.seqno)?;
        }
        for v in &self.topicIDs {
            os.write_string(4, &v)?;
        };
        if !self.signature.is_empty() {
            os.write_bytes(5, &self.signature)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(6, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PubSubMessage {
        PubSubMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "from",
                    |m: &PubSubMessage| { &m.from },
                    |m: &mut PubSubMessage| { &mut m.from },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &PubSubMessage| { &m.data },
                    |m: &mut PubSubMessage| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "seqno",
                    |m: &PubSubMessage| { &m.seqno },
                    |m: &mut PubSubMessage| { &mut m.seqno },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "topicIDs",
                    |m: &PubSubMessage| { &m.topicIDs },
                    |m: &mut PubSubMessage| { &mut m.topicIDs },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &PubSubMessage| { &m.signature },
                    |m: &mut PubSubMessage| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "key",
                    |m: &PubSubMessage| { &m.key },
                    |m: &mut PubSubMessage| { &mut m.key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PubSubMessage>(
                    "PubSubMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PubSubMessage {
        static mut instance: ::protobuf::lazy::Lazy<PubSubMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PubSubMessage,
        };
        unsafe {
            instance.get(PubSubMessage::new)
        }
    }
}

impl ::protobuf::Clear for PubSubMessage {
    fn clear(&mut self) {
        self.from.clear();
        self.data.clear();
        self.seqno.clear();
        self.topicIDs.clear();
        self.signature.clear();
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PubSubMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PubSubMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PubSubPeer {
    // message fields
    pub topic: ::std::string::String,
    pub peerID: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PubSubPeer {
    fn default() -> &'a PubSubPeer {
        <PubSubPeer as ::protobuf::Message>::default_instance()
    }
}

impl PubSubPeer {
    pub fn new() -> PubSubPeer {
        ::std::default::Default::default()
    }

    // string topic = 1;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // string peerID = 2;


    pub fn get_peerID(&self) -> &str {
        &self.peerID
    }
    pub fn clear_peerID(&mut self) {
        self.peerID.clear();
    }

    // Param is passed by value, moved
    pub fn set_peerID(&mut self, v: ::std::string::String) {
        self.peerID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peerID(&mut self) -> &mut ::std::string::String {
        &mut self.peerID
    }

    // Take field
    pub fn take_peerID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.peerID, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PubSubPeer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.peerID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if !self.peerID.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.peerID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if !self.peerID.is_empty() {
            os.write_string(2, &self.peerID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PubSubPeer {
        PubSubPeer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "topic",
                    |m: &PubSubPeer| { &m.topic },
                    |m: &mut PubSubPeer| { &mut m.topic },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "peerID",
                    |m: &PubSubPeer| { &m.peerID },
                    |m: &mut PubSubPeer| { &mut m.peerID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PubSubPeer>(
                    "PubSubPeer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PubSubPeer {
        static mut instance: ::protobuf::lazy::Lazy<PubSubPeer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PubSubPeer,
        };
        unsafe {
            instance.get(PubSubPeer::new)
        }
    }
}

impl ::protobuf::Clear for PubSubPeer {
    fn clear(&mut self) {
        self.topic.clear();
        self.peerID.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PubSubPeer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PubSubPeer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PSREQTYPE {
    PS_GET_TOPICS = 0,
    PS_LIST_PEERS = 1,
    PS_SUBSCRIBE = 2,
    PS_PUBLISH = 3,
}

impl ::protobuf::ProtobufEnum for PSREQTYPE {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PSREQTYPE> {
        match value {
            0 => ::std::option::Option::Some(PSREQTYPE::PS_GET_TOPICS),
            1 => ::std::option::Option::Some(PSREQTYPE::PS_LIST_PEERS),
            2 => ::std::option::Option::Some(PSREQTYPE::PS_SUBSCRIBE),
            3 => ::std::option::Option::Some(PSREQTYPE::PS_PUBLISH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PSREQTYPE] = &[
            PSREQTYPE::PS_GET_TOPICS,
            PSREQTYPE::PS_LIST_PEERS,
            PSREQTYPE::PS_SUBSCRIBE,
            PSREQTYPE::PS_PUBLISH,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("PSREQTYPE", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for PSREQTYPE {
}

impl ::std::default::Default for PSREQTYPE {
    fn default() -> Self {
        PSREQTYPE::PS_GET_TOPICS
    }
}

impl ::protobuf::reflect::ProtobufValue for PSREQTYPE {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cpubsub.proto\x12\x02pb\"l\n\rPubSubRequest\x12/\n\x0brequestType\
    \x18\x01\x20\x01(\x0e2\r.pb.PSREQTYPER\x0brequestType\x12\x16\n\x06topic\
    s\x18\x02\x20\x03(\tR\x06topics\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\
    \x04data\"\xac\x01\n\x0ePubSubResponse\x12/\n\x0brequestType\x18\x01\x20\
    \x01(\x0e2\r.pb.PSREQTYPER\x0brequestType\x12+\n\x07message\x18\x02\x20\
    \x03(\x0b2\x11.pb.PubSubMessageR\x07message\x12\x16\n\x06topics\x18\x03\
    \x20\x03(\tR\x06topics\x12$\n\x05peers\x18\x04\x20\x03(\x0b2\x0e.pb.PubS\
    ubPeerR\x05peers\"\x99\x01\n\rPubSubMessage\x12\x12\n\x04from\x18\x01\
    \x20\x01(\x0cR\x04from\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\
    \x12\x14\n\x05seqno\x18\x03\x20\x01(\x0cR\x05seqno\x12\x1a\n\x08topicIDs\
    \x18\x04\x20\x03(\tR\x08topicIDs\x12\x1c\n\tsignature\x18\x05\x20\x01(\
    \x0cR\tsignature\x12\x10\n\x03key\x18\x06\x20\x01(\x0cR\x03key\":\n\nPub\
    SubPeer\x12\x14\n\x05topic\x18\x01\x20\x01(\tR\x05topic\x12\x16\n\x06pee\
    rID\x18\x02\x20\x01(\tR\x06peerID*S\n\tPSREQTYPE\x12\x11\n\rPS_GET_TOPIC\
    S\x10\0\x12\x11\n\rPS_LIST_PEERS\x10\x01\x12\x10\n\x0cPS_SUBSCRIBE\x10\
    \x02\x12\x0e\n\nPS_PUBLISH\x10\x032B\n\tPubSubAPI\x125\n\x06PubSub\x12\
    \x11.pb.PubSubRequest\x1a\x12.pb.PubSubResponse\"\0(\x010\x01J\xc7\x15\n\
    \x06\x12\x04\0\0E\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\x08\n\nt\n\x02\x06\0\x12\x04\x05\0\t\x01\x1ah\x20PubSubAPI\
    \x20provides\x20a\x20libp2p\x20pubsub\x20API\x20and\x20is\x20equivalent\
    \x20to\x20go-ipfs\n\x20`ipfs\x20pubsub`\x20subset\x20of\x20commands.\n\n\
    \n\n\x03\x06\0\x01\x12\x03\x05\x08\x11\nt\n\x04\x06\0\x02\0\x12\x03\x08\
    \x04H\x1ag\x20PubSub\x20allows\x20controlling\x20libp2p\x20pubsub\x20top\
    ics\x20and\x20subscriptions\x20using\n\x20a\x20bidirectional\x20streamin\
    g\x20API\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x08\x08\x0e\n\x0c\n\x05\
    \x06\0\x02\0\x05\x12\x03\x08\x0f\x15\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\
    \x08\x16#\n\x0c\n\x05\x06\0\x02\0\x06\x12\x03\x08.4\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\x085C\nR\n\x02\x05\0\x12\x04\x0c\0\x15\x01\x1aF\x20PS\
    REQTYPE\x20indicates\x20the\x20particular\x20PubSubAPI\x20request\x20bei\
    ng\x20performed\n\n\n\n\x03\x05\0\x01\x12\x03\x0c\x05\x0e\nQ\n\x04\x05\0\
    \x02\0\x12\x03\x0e\x04\x16\x1aD\x20PS_GET_TOPICS\x20is\x20used\x20to\x20\
    return\x20a\x20list\x20of\x20subscribed\x20pubsub\x20topics\n\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x0e\x04\x11\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x0e\x14\x15\nh\n\x04\x05\0\x02\x01\x12\x03\x10\x04\x16\x1a[\x20PS_L\
    IST_PEERS\x20is\x20used\x20to\x20return\x20a\x20list\x20of\x20peers\x20s\
    ubscribed\x20to\x20topics\x20we\x20are\x20subscribed\x20to\n\n\x0c\n\x05\
    \x05\0\x02\x01\x01\x12\x03\x10\x04\x11\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03\x10\x14\x15\n\\\n\x04\x05\0\x02\x02\x12\x03\x12\x04\x15\x1aO\x20PS_\
    SUBSCRIBE\x20is\x20used\x20to\x20establish\x20a\x20persistent\x20subscri\
    ption\x20to\x20a\x20pubsub\x20topic\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\
    \x03\x12\x04\x10\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x12\x13\x14\nI\n\
    \x04\x05\0\x02\x03\x12\x03\x14\x04\x13\x1a<\x20PS_PUBLISH\x20is\x20used\
    \x20to\x20publisbh\x20a\x20message\x20to\x20a\x20pubsub\x20topic\n\n\x0c\
    \n\x05\x05\0\x02\x03\x01\x12\x03\x14\x04\x0e\n\x0c\n\x05\x05\0\x02\x03\
    \x02\x12\x03\x14\x11\x12\n\n\n\x02\x04\0\x12\x04\x17\0\x20\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\x17\x08\x15\nI\n\x04\x04\0\x02\0\x12\x03\x19\x04\x1e\
    \x1a<\x20indicates\x20the\x20particular\x20PubSubAPI\x20request\x20being\
    \x20performed\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x19\x04\x17\x17\n\x0c\
    \n\x05\x04\0\x02\0\x06\x12\x03\x19\x04\r\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x19\x0e\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x19\x1c\x1d\nq\n\
    \x04\x04\0\x02\x01\x12\x03\x1c\x04\x1f\x1ad\x20topics\x20to\x20request\
    \x20peers\x20from,\x20or\x20publish\x20data\x20to\n\x20sent\x20by:\x20PS\
    _LIST_PEERS,\x20PS_SUBSCRIBE,\x20PS_PUBLISH\n\n\x0c\n\x05\x04\0\x02\x01\
    \x04\x12\x03\x1c\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1c\r\x13\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1c\x14\x1a\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x1c\x1d\x1e\n:\n\x04\x04\0\x02\x02\x12\x03\x1f\x04\x13\
    \x1a-\x20data\x20to\x20sent\x20to\x20topics\n\x20sent\x20by:\x20PS_PUBLI\
    SH\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x1f\x04\x1c\x1f\n\x0c\n\x05\x04\
    \0\x02\x02\x05\x12\x03\x1f\x04\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \x1f\n\x0e\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1f\x11\x12\n\n\n\x02\
    \x04\x01\x12\x04\"\0.\x01\n\n\n\x03\x04\x01\x01\x12\x03\"\x08\x16\nI\n\
    \x04\x04\x01\x02\0\x12\x03$\x04\x1e\x1a<\x20indicates\x20the\x20particul\
    ar\x20PubSubAPI\x20request\x20being\x20performed\n\n\r\n\x05\x04\x01\x02\
    \0\x04\x12\x04$\x04\"\x18\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03$\x04\r\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03$\x0e\x19\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03$\x1c\x1d\nL\n\x04\x04\x01\x02\x01\x12\x03'\x04'\x1a?\x20mes\
    sages\x20we\x20have\x20received\x20from\x20a\x20topic\n\x20sent\x20by:\
    \x20PS_SUBSCRIBE\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03'\x04\x0c\n\
    \x0c\n\x05\x04\x01\x02\x01\x06\x12\x03'\r\x1a\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03'\x1b\"\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03'%&\n2\n\
    \x04\x04\x01\x02\x02\x12\x03*\x04\x1f\x1a%\x20topic\x20names\n\x20sent\
    \x20by:\x20PS_GET_TOPICS\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03*\x04\
    \x0c\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03*\r\x13\n\x0c\n\x05\x04\x01\
    \x02\x02\x01\x12\x03*\x14\x1a\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03*\
    \x1d\x1e\n3\n\x04\x04\x01\x02\x03\x12\x03-\x04\"\x1a&\x20pubsub\x20peers\
    \n\x20sent\x20by:\x20PS_LIST_PEERS\n\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\
    \x03-\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03-\r\x17\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03-\x18\x1d\n\x0c\n\x05\x04\x01\x02\x03\x03\
    \x12\x03-\x20!\n\n\n\x02\x04\x02\x12\x040\0=\x01\n\n\n\x03\x04\x02\x01\
    \x12\x030\x08\x15\n'\n\x04\x04\x02\x02\0\x12\x032\x04\x13\x1a\x1a\x20who\
    \x20this\x20message\x20is\x20from\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x042\
    \x040\x17\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x032\x04\t\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x032\n\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x032\x11\
    \x12\n'\n\x04\x04\x02\x02\x01\x12\x034\x04\x13\x1a\x1a\x20the\x20data\
    \x20of\x20this\x20message\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x044\x042\
    \x13\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x034\x04\t\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x034\n\x0e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x034\x11\
    \x12\n2\n\x04\x04\x02\x02\x02\x12\x036\x04\x14\x1a%\x20the\x20sequence\
    \x20number\x20of\x20this\x20message\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\
    \x046\x044\x13\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x036\x04\t\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x036\n\x0f\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x036\x12\x13\n4\n\x04\x04\x02\x02\x03\x12\x038\x04!\x1a'\x20the\x20\
    topic\x20IDs\x20this\x20message\x20is\x20sent\x20to\n\n\x0c\n\x05\x04\
    \x02\x02\x03\x04\x12\x038\x04\x0c\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\
    \x038\r\x13\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x038\x14\x1c\n\x0c\n\x05\
    \x04\x02\x02\x03\x03\x12\x038\x1f\x20\n*\n\x04\x04\x02\x02\x04\x12\x03:\
    \x04\x18\x1a\x1d\x20the\x20signature\x20of\x20the\x20sender\n\n\r\n\x05\
    \x04\x02\x02\x04\x04\x12\x04:\x048!\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\
    \x03:\x04\t\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03:\n\x13\n\x0c\n\x05\
    \x04\x02\x02\x04\x03\x12\x03:\x16\x17\n$\n\x04\x04\x02\x02\x05\x12\x03<\
    \x04\x12\x1a\x17\x20the\x20key\x20of\x20the\x20sender\n\n\r\n\x05\x04\
    \x02\x02\x05\x04\x12\x04<\x04:\x18\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\
    \x03<\x04\t\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03<\n\r\n\x0c\n\x05\x04\
    \x02\x02\x05\x03\x12\x03<\x10\x11\n2\n\x02\x04\x03\x12\x04@\0E\x01\x1a&\
    \x20represents\x20an\x20individual\x20pubsub\x20peer\n\n\n\n\x03\x04\x03\
    \x01\x12\x03@\x08\x12\n-\n\x04\x04\x03\x02\0\x12\x03B\x04\x15\x1a\x20\
    \x20the\x20topic\x20this\x20peer\x20belongs\x20to\n\n\r\n\x05\x04\x03\
    \x02\0\x04\x12\x04B\x04@\x14\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03B\x04\
    \n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03B\x0b\x10\n\x0c\n\x05\x04\x03\
    \x02\0\x03\x12\x03B\x13\x14\n\"\n\x04\x04\x03\x02\x01\x12\x03D\x04\x16\
    \x1a\x15\x20the\x20id\x20of\x20this\x20peer\n\n\r\n\x05\x04\x03\x02\x01\
    \x04\x12\x04D\x04B\x15\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03D\x04\n\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03D\x0b\x11\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03D\x14\x15b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
