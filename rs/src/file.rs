// This file is generated by rust-protobuf 2.10.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `file.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_2;

#[derive(PartialEq,Clone,Default)]
pub struct DirectoryUploadRequest {
    // message fields
    pub path: ::std::string::String,
    pub hash: ::std::string::String,
    pub isDir: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DirectoryUploadRequest {
    fn default() -> &'a DirectoryUploadRequest {
        <DirectoryUploadRequest as ::protobuf::Message>::default_instance()
    }
}

impl DirectoryUploadRequest {
    pub fn new() -> DirectoryUploadRequest {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string hash = 2;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    // bool isDir = 3;


    pub fn get_isDir(&self) -> bool {
        self.isDir
    }
    pub fn clear_isDir(&mut self) {
        self.isDir = false;
    }

    // Param is passed by value, moved
    pub fn set_isDir(&mut self, v: bool) {
        self.isDir = v;
    }
}

impl ::protobuf::Message for DirectoryUploadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isDir = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.hash);
        }
        if self.isDir != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.hash.is_empty() {
            os.write_string(2, &self.hash)?;
        }
        if self.isDir != false {
            os.write_bool(3, self.isDir)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DirectoryUploadRequest {
        DirectoryUploadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &DirectoryUploadRequest| { &m.path },
                    |m: &mut DirectoryUploadRequest| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "hash",
                    |m: &DirectoryUploadRequest| { &m.hash },
                    |m: &mut DirectoryUploadRequest| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isDir",
                    |m: &DirectoryUploadRequest| { &m.isDir },
                    |m: &mut DirectoryUploadRequest| { &mut m.isDir },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DirectoryUploadRequest>(
                    "DirectoryUploadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DirectoryUploadRequest {
        static mut instance: ::protobuf::lazy::Lazy<DirectoryUploadRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DirectoryUploadRequest,
        };
        unsafe {
            instance.get(DirectoryUploadRequest::new)
        }
    }
}

impl ::protobuf::Clear for DirectoryUploadRequest {
    fn clear(&mut self) {
        self.path.clear();
        self.hash.clear();
        self.isDir = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DirectoryUploadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DirectoryUploadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UploadRequest {
    // message fields
    pub blob: ::protobuf::SingularPtrField<Blob>,
    pub options: ::protobuf::SingularPtrField<UploadOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UploadRequest {
    fn default() -> &'a UploadRequest {
        <UploadRequest as ::protobuf::Message>::default_instance()
    }
}

impl UploadRequest {
    pub fn new() -> UploadRequest {
        ::std::default::Default::default()
    }

    // .pb.Blob blob = 1;


    pub fn get_blob(&self) -> &Blob {
        self.blob.as_ref().unwrap_or_else(|| Blob::default_instance())
    }
    pub fn clear_blob(&mut self) {
        self.blob.clear();
    }

    pub fn has_blob(&self) -> bool {
        self.blob.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blob(&mut self, v: Blob) {
        self.blob = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blob(&mut self) -> &mut Blob {
        if self.blob.is_none() {
            self.blob.set_default();
        }
        self.blob.as_mut().unwrap()
    }

    // Take field
    pub fn take_blob(&mut self) -> Blob {
        self.blob.take().unwrap_or_else(|| Blob::new())
    }

    // .pb.UploadOptions options = 2;


    pub fn get_options(&self) -> &UploadOptions {
        self.options.as_ref().unwrap_or_else(|| UploadOptions::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: UploadOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut UploadOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> UploadOptions {
        self.options.take().unwrap_or_else(|| UploadOptions::new())
    }
}

impl ::protobuf::Message for UploadRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.blob {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.blob)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.blob.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.blob.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UploadRequest {
        UploadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Blob>>(
                    "blob",
                    |m: &UploadRequest| { &m.blob },
                    |m: &mut UploadRequest| { &mut m.blob },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UploadOptions>>(
                    "options",
                    |m: &UploadRequest| { &m.options },
                    |m: &mut UploadRequest| { &mut m.options },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UploadRequest>(
                    "UploadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UploadRequest {
        static mut instance: ::protobuf::lazy::Lazy<UploadRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UploadRequest,
        };
        unsafe {
            instance.get(UploadRequest::new)
        }
    }
}

impl ::protobuf::Clear for UploadRequest {
    fn clear(&mut self) {
        self.blob.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UploadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UploadOptions {
    // message fields
    pub multiHash: ::std::string::String,
    pub layout: ::std::string::String,
    pub chunker: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UploadOptions {
    fn default() -> &'a UploadOptions {
        <UploadOptions as ::protobuf::Message>::default_instance()
    }
}

impl UploadOptions {
    pub fn new() -> UploadOptions {
        ::std::default::Default::default()
    }

    // string multiHash = 1;


    pub fn get_multiHash(&self) -> &str {
        &self.multiHash
    }
    pub fn clear_multiHash(&mut self) {
        self.multiHash.clear();
    }

    // Param is passed by value, moved
    pub fn set_multiHash(&mut self, v: ::std::string::String) {
        self.multiHash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multiHash(&mut self) -> &mut ::std::string::String {
        &mut self.multiHash
    }

    // Take field
    pub fn take_multiHash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.multiHash, ::std::string::String::new())
    }

    // string layout = 2;


    pub fn get_layout(&self) -> &str {
        &self.layout
    }
    pub fn clear_layout(&mut self) {
        self.layout.clear();
    }

    // Param is passed by value, moved
    pub fn set_layout(&mut self, v: ::std::string::String) {
        self.layout = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_layout(&mut self) -> &mut ::std::string::String {
        &mut self.layout
    }

    // Take field
    pub fn take_layout(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.layout, ::std::string::String::new())
    }

    // string chunker = 3;


    pub fn get_chunker(&self) -> &str {
        &self.chunker
    }
    pub fn clear_chunker(&mut self) {
        self.chunker.clear();
    }

    // Param is passed by value, moved
    pub fn set_chunker(&mut self, v: ::std::string::String) {
        self.chunker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chunker(&mut self) -> &mut ::std::string::String {
        &mut self.chunker
    }

    // Take field
    pub fn take_chunker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chunker, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UploadOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.multiHash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.layout)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chunker)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multiHash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.multiHash);
        }
        if !self.layout.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.layout);
        }
        if !self.chunker.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.chunker);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multiHash.is_empty() {
            os.write_string(1, &self.multiHash)?;
        }
        if !self.layout.is_empty() {
            os.write_string(2, &self.layout)?;
        }
        if !self.chunker.is_empty() {
            os.write_string(3, &self.chunker)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UploadOptions {
        UploadOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "multiHash",
                    |m: &UploadOptions| { &m.multiHash },
                    |m: &mut UploadOptions| { &mut m.multiHash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "layout",
                    |m: &UploadOptions| { &m.layout },
                    |m: &mut UploadOptions| { &mut m.layout },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "chunker",
                    |m: &UploadOptions| { &m.chunker },
                    |m: &mut UploadOptions| { &mut m.chunker },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UploadOptions>(
                    "UploadOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UploadOptions {
        static mut instance: ::protobuf::lazy::Lazy<UploadOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UploadOptions,
        };
        unsafe {
            instance.get(UploadOptions::new)
        }
    }
}

impl ::protobuf::Clear for UploadOptions {
    fn clear(&mut self) {
        self.multiHash.clear();
        self.layout.clear();
        self.chunker.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UploadOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DownloadRequest {
    // message fields
    pub hash: ::std::string::String,
    pub chunkSize: i32,
    pub rangeStart: u64,
    pub rangeEnd: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DownloadRequest {
    fn default() -> &'a DownloadRequest {
        <DownloadRequest as ::protobuf::Message>::default_instance()
    }
}

impl DownloadRequest {
    pub fn new() -> DownloadRequest {
        ::std::default::Default::default()
    }

    // string hash = 1;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    // int32 chunkSize = 2;


    pub fn get_chunkSize(&self) -> i32 {
        self.chunkSize
    }
    pub fn clear_chunkSize(&mut self) {
        self.chunkSize = 0;
    }

    // Param is passed by value, moved
    pub fn set_chunkSize(&mut self, v: i32) {
        self.chunkSize = v;
    }

    // uint64 rangeStart = 3;


    pub fn get_rangeStart(&self) -> u64 {
        self.rangeStart
    }
    pub fn clear_rangeStart(&mut self) {
        self.rangeStart = 0;
    }

    // Param is passed by value, moved
    pub fn set_rangeStart(&mut self, v: u64) {
        self.rangeStart = v;
    }

    // uint64 rangeEnd = 4;


    pub fn get_rangeEnd(&self) -> u64 {
        self.rangeEnd
    }
    pub fn clear_rangeEnd(&mut self) {
        self.rangeEnd = 0;
    }

    // Param is passed by value, moved
    pub fn set_rangeEnd(&mut self, v: u64) {
        self.rangeEnd = v;
    }
}

impl ::protobuf::Message for DownloadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.chunkSize = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rangeStart = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rangeEnd = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        if self.chunkSize != 0 {
            my_size += ::protobuf::rt::value_size(2, self.chunkSize, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rangeStart != 0 {
            my_size += ::protobuf::rt::value_size(3, self.rangeStart, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rangeEnd != 0 {
            my_size += ::protobuf::rt::value_size(4, self.rangeEnd, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        if self.chunkSize != 0 {
            os.write_int32(2, self.chunkSize)?;
        }
        if self.rangeStart != 0 {
            os.write_uint64(3, self.rangeStart)?;
        }
        if self.rangeEnd != 0 {
            os.write_uint64(4, self.rangeEnd)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DownloadRequest {
        DownloadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "hash",
                    |m: &DownloadRequest| { &m.hash },
                    |m: &mut DownloadRequest| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "chunkSize",
                    |m: &DownloadRequest| { &m.chunkSize },
                    |m: &mut DownloadRequest| { &mut m.chunkSize },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "rangeStart",
                    |m: &DownloadRequest| { &m.rangeStart },
                    |m: &mut DownloadRequest| { &mut m.rangeStart },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "rangeEnd",
                    |m: &DownloadRequest| { &m.rangeEnd },
                    |m: &mut DownloadRequest| { &mut m.rangeEnd },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DownloadRequest>(
                    "DownloadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DownloadRequest {
        static mut instance: ::protobuf::lazy::Lazy<DownloadRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DownloadRequest,
        };
        unsafe {
            instance.get(DownloadRequest::new)
        }
    }
}

impl ::protobuf::Clear for DownloadRequest {
    fn clear(&mut self) {
        self.hash.clear();
        self.chunkSize = 0;
        self.rangeStart = 0;
        self.rangeEnd = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DownloadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DownloadResponse {
    // message fields
    pub blob: ::protobuf::SingularPtrField<Blob>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DownloadResponse {
    fn default() -> &'a DownloadResponse {
        <DownloadResponse as ::protobuf::Message>::default_instance()
    }
}

impl DownloadResponse {
    pub fn new() -> DownloadResponse {
        ::std::default::Default::default()
    }

    // .pb.Blob blob = 1;


    pub fn get_blob(&self) -> &Blob {
        self.blob.as_ref().unwrap_or_else(|| Blob::default_instance())
    }
    pub fn clear_blob(&mut self) {
        self.blob.clear();
    }

    pub fn has_blob(&self) -> bool {
        self.blob.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blob(&mut self, v: Blob) {
        self.blob = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blob(&mut self) -> &mut Blob {
        if self.blob.is_none() {
            self.blob.set_default();
        }
        self.blob.as_mut().unwrap()
    }

    // Take field
    pub fn take_blob(&mut self) -> Blob {
        self.blob.take().unwrap_or_else(|| Blob::new())
    }
}

impl ::protobuf::Message for DownloadResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.blob {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.blob)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.blob.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.blob.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DownloadResponse {
        DownloadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Blob>>(
                    "blob",
                    |m: &DownloadResponse| { &m.blob },
                    |m: &mut DownloadResponse| { &mut m.blob },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DownloadResponse>(
                    "DownloadResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DownloadResponse {
        static mut instance: ::protobuf::lazy::Lazy<DownloadResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DownloadResponse,
        };
        unsafe {
            instance.get(DownloadResponse::new)
        }
    }
}

impl ::protobuf::Clear for DownloadResponse {
    fn clear(&mut self) {
        self.blob.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DownloadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Blob {
    // message fields
    pub content: ::std::vec::Vec<u8>,
    pub rangeStart: u64,
    pub rangeEnd: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Blob {
    fn default() -> &'a Blob {
        <Blob as ::protobuf::Message>::default_instance()
    }
}

impl Blob {
    pub fn new() -> Blob {
        ::std::default::Default::default()
    }

    // bytes content = 1;


    pub fn get_content(&self) -> &[u8] {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }

    // uint64 rangeStart = 2;


    pub fn get_rangeStart(&self) -> u64 {
        self.rangeStart
    }
    pub fn clear_rangeStart(&mut self) {
        self.rangeStart = 0;
    }

    // Param is passed by value, moved
    pub fn set_rangeStart(&mut self, v: u64) {
        self.rangeStart = v;
    }

    // uint64 rangeEnd = 3;


    pub fn get_rangeEnd(&self) -> u64 {
        self.rangeEnd
    }
    pub fn clear_rangeEnd(&mut self) {
        self.rangeEnd = 0;
    }

    // Param is passed by value, moved
    pub fn set_rangeEnd(&mut self, v: u64) {
        self.rangeEnd = v;
    }
}

impl ::protobuf::Message for Blob {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rangeStart = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rangeEnd = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.content);
        }
        if self.rangeStart != 0 {
            my_size += ::protobuf::rt::value_size(2, self.rangeStart, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rangeEnd != 0 {
            my_size += ::protobuf::rt::value_size(3, self.rangeEnd, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.content.is_empty() {
            os.write_bytes(1, &self.content)?;
        }
        if self.rangeStart != 0 {
            os.write_uint64(2, self.rangeStart)?;
        }
        if self.rangeEnd != 0 {
            os.write_uint64(3, self.rangeEnd)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Blob {
        Blob::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "content",
                    |m: &Blob| { &m.content },
                    |m: &mut Blob| { &mut m.content },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "rangeStart",
                    |m: &Blob| { &m.rangeStart },
                    |m: &mut Blob| { &mut m.rangeStart },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "rangeEnd",
                    |m: &Blob| { &m.rangeEnd },
                    |m: &mut Blob| { &mut m.rangeEnd },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Blob>(
                    "Blob",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Blob {
        static mut instance: ::protobuf::lazy::Lazy<Blob> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Blob,
        };
        unsafe {
            instance.get(Blob::new)
        }
    }
}

impl ::protobuf::Clear for Blob {
    fn clear(&mut self) {
        self.content.clear();
        self.rangeStart = 0;
        self.rangeEnd = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Blob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Blob {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nfile.proto\x12\x02pb\x1a\nutil.proto\"V\n\x16DirectoryUploadRequest\
    \x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12\x12\n\x04hash\x18\x02\
    \x20\x01(\tR\x04hash\x12\x14\n\x05isDir\x18\x03\x20\x01(\x08R\x05isDir\"\
    Z\n\rUploadRequest\x12\x1c\n\x04blob\x18\x01\x20\x01(\x0b2\x08.pb.BlobR\
    \x04blob\x12+\n\x07options\x18\x02\x20\x01(\x0b2\x11.pb.UploadOptionsR\
    \x07options\"_\n\rUploadOptions\x12\x1c\n\tmultiHash\x18\x01\x20\x01(\tR\
    \tmultiHash\x12\x16\n\x06layout\x18\x02\x20\x01(\tR\x06layout\x12\x18\n\
    \x07chunker\x18\x03\x20\x01(\tR\x07chunker\"\x7f\n\x0fDownloadRequest\
    \x12\x12\n\x04hash\x18\x01\x20\x01(\tR\x04hash\x12\x1c\n\tchunkSize\x18\
    \x02\x20\x01(\x05R\tchunkSize\x12\x1e\n\nrangeStart\x18\x03\x20\x01(\x04\
    R\nrangeStart\x12\x1a\n\x08rangeEnd\x18\x04\x20\x01(\x04R\x08rangeEnd\"0\
    \n\x10DownloadResponse\x12\x1c\n\x04blob\x18\x01\x20\x01(\x0b2\x08.pb.Bl\
    obR\x04blob\"\\\n\x04Blob\x12\x18\n\x07content\x18\x01\x20\x01(\x0cR\x07\
    content\x12\x1e\n\nrangeStart\x18\x02\x20\x01(\x04R\nrangeStart\x12\x1a\
    \n\x08rangeEnd\x18\x03\x20\x01(\x04R\x08rangeEnd2\xc2\x01\n\x07FileAPI\
    \x124\n\nUploadFile\x12\x11.pb.UploadRequest\x1a\x0f.pb.PutResponse\"\0(\
    \x01\x12=\n\x0cDownloadFile\x12\x13.pb.DownloadRequest\x1a\x14.pb.Downlo\
    adResponse\"\00\x01\x12B\n\x0fUploadDirectory\x12\x1a.pb.DirectoryUpload\
    Request\x1a\x0f.pb.PutResponse\"\0(\x01J\xe2\x1e\n\x06\x12\x04\0\0Q\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\n\n\t\n\
    \x02\x03\0\x12\x03\x02\x07\x13\nT\n\x02\x06\0\x12\x04\x05\0\x0c\x01\x1aH\
    \x20FileAPI\x20provides\x20a\x20gRPC\x20api\x20to\x20upload/download\x20\
    files\x20as\x20UnixFS\x20objects\n\n\n\n\x03\x06\0\x01\x12\x03\x05\x08\
    \x0f\n]\n\x04\x06\0\x02\0\x12\x03\x07\x04C\x1aP\x20UploadFile\x20allows\
    \x20uploading\x20a\x20file\x20as\x20a\x20UnixFS\x20object\x20(equivalent\
    \x20to\x20ipfs\x20add)\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x07\x08\x12\
    \n\x0c\n\x05\x06\0\x02\0\x05\x12\x03\x07\x13\x19\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x07\x1a'\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x073>\nW\n\x04\
    \x06\0\x02\x01\x12\x03\t\x04K\x1aJ\x20DownloadFile\x20allows\x20download\
    ing\x20a\x20UnixFS\x20object\x20(equivalent\x20to\x20ipfs\x20get)\n\n\
    \x0c\n\x05\x06\0\x02\x01\x01\x12\x03\t\x08\x14\n\x0c\n\x05\x06\0\x02\x01\
    \x02\x12\x03\t\x15$\n\x0c\n\x05\x06\0\x02\x01\x06\x12\x03\t/5\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\t6F\ny\n\x04\x06\0\x02\x02\x12\x03\x0b\
    \x04P\x1al\x20UploadDirectory\x20is\x20used\x20to\x20upload\x20a\x20dire\
    ctory\x20to\x20IPFS\x20and\x20is\x20equivalent\x20to\x20`ipfs\x20add\x20\
    -r`\x20or\x20`ipfs\x20add\x20-rw`\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\
    \x03\x0b\x08\x17\n\x0c\n\x05\x06\0\x02\x02\x05\x12\x03\x0b\x18\x1e\n\x0c\
    \n\x05\x06\0\x02\x02\x02\x12\x03\x0b\x1f5\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x03\x0b@K\n\xf4\x03\n\x02\x04\0\x12\x04\x16\0\x1a\x01\x1a\xe7\x03\
    \x20DirectoryUploadRequest\x20is\x20used\x20to\x20create\x20a\x20UnixFS\
    \x20directory\x20object.\n\x20The\x20exact\x20process\x20consists\x20of\
    \x20initiating\x20a\x20stream\x20for\x20a\x20directory\x20uplaod\x20requ\
    est\n\x20then\x20simultaneously\x20uploading\x20files\x20using\x20the\
    \x20UploadFile\x20call,\x20and\x20then\x20sending\n\x20messages\x20into\
    \x20the\x20stream\x20indicating\x20what\x20hashes\x20to\x20add\x20at\x20\
    what\x20paths,\x20\n\x20create\x20a\x20directory\x20as\x20an\x20empty\
    \x20unixfs\x20node.\x20Subsequently\n\x20the\x20server\x20side\x20will\
    \x20then\x20fetch\x20the\x20file\x20referenced\x20by\x20hash\n\x20via\
    \x20the\x20dagservice,\x20and\x20then\x20add\x20that\x20to\x20the\x20dir\
    ectory\x20object.\n\n\n\n\x03\x04\0\x01\x12\x03\x16\x08\x1e\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x17\x04\x14\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x17\
    \x04\x16\x20\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x17\x04\n\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x17\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x17\x12\x13\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x18\x04\x14\n\r\n\x05\x04\
    \0\x02\x01\x04\x12\x04\x18\x04\x17\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x18\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x18\x0b\x0f\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x18\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\x19\x04\x13\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x19\x04\x18\x14\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x19\x04\x08\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x19\t\x0e\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x19\x11\
    \x12\nE\n\x02\x04\x01\x12\x04\x1d\0\"\x01\x1a9\x20UploadRequest\x20is\
    \x20used\x20to\x20upload\x20data\x20as\x20a\x20UnixFS\x20object\n\n\n\n\
    \x03\x04\x01\x01\x12\x03\x1d\x08\x15\n-\n\x04\x04\x01\x02\0\x12\x03\x1f\
    \x04\x12\x1a\x20\x20blob\x20is\x20a\x20single\x20chunk\x20of\x20data\n\n\
    \r\n\x05\x04\x01\x02\0\x04\x12\x04\x1f\x04\x1d\x17\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03\x1f\x04\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1f\
    \t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1f\x10\x11\nA\n\x04\x04\x01\
    \x02\x01\x12\x03!\x04\x1e\x1a4\x20options\x20allows\x20setting\x20the\
    \x20optoins\x20for\x20this\x20upload\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\
    \x04!\x04\x1f\x12\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03!\x04\x11\n\x0c\
    \n\x05\x04\x01\x02\x01\x01\x12\x03!\x12\x19\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03!\x1c\x1d\nN\n\x02\x04\x02\x12\x04%\0,\x01\x1aB\x20UploadOpt\
    ions\x20allows\x20controlling\x20the\x20parameters\x20of\x20a\x20file\
    \x20upload\n\n\n\n\x03\x04\x02\x01\x12\x03%\x08\x15\n5\n\x04\x04\x02\x02\
    \0\x12\x03'\x04\x19\x1a(\x20specifes\x20the\x20multihash\x20function\x20\
    to\x20use\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04'\x04%\x17\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03'\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03'\
    \x0b\x14\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03'\x17\x18\n<\n\x04\x04\x02\
    \x02\x01\x12\x03)\x04\x16\x1a/\x20specifies\x20the\x20dag\x20layout\x20(\
    balanced,\x20tricklet)\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04)\x04'\x19\
    \n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03)\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03)\x0b\x11\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03)\x14\
    \x15\nB\n\x04\x04\x02\x02\x02\x12\x03+\x04\x17\x1a5\x20specifies\x20the\
    \x20chunker\x20type\x20(rabin,\x20default,\x20etc...)\n\n\r\n\x05\x04\
    \x02\x02\x02\x04\x12\x04+\x04)\x16\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03+\x04\n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03+\x0b\x12\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03+\x15\x16\n\xa6\x01\n\x02\x04\x03\x12\x041\0\
    >\x01\x1a\x99\x01\x20DownloadRequest\x20is\x20used\x20to\x20download\x20\
    a\x20UnixFS\x20object\n\x20although\x20it\x20can\x20in\x20theory\x20be\
    \x20used\x20with\x20other\x20type\x20of\x20objects\n\x20there\x20may\x20\
    be\x20some\x20undefined\x20behavior\n\n\n\n\x03\x04\x03\x01\x12\x031\x08\
    \x17\nU\n\x04\x04\x03\x02\0\x12\x033\x04\x14\x1aH\x20hash\x20is\x20the\
    \x20ipfs\x20hash/cid\x20(content\x20identifier)\x20of\x20the\x20data\x20\
    to\x20download\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x043\x041\x19\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x033\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x033\x0b\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x033\x12\x13\n\xb7\x01\n\
    \x04\x04\x03\x02\x01\x12\x037\x04\x18\x1a\xa9\x01\x20chunkSize\x20specif\
    ies\x20the\x20size\x20of\x20chunks\x20to\x20be\x20sent\x20to\x20the\x20c\
    lient\n\x20it\x20allows\x20us\x20to\x20efficiently\x20control\x20incomin\
    g\x20data\x20amounts\x20which\n\x20is\x20useful\x20on\x20machines\x20wit\
    h\x20low-memory\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x047\x043\x14\n\x0c\
    \n\x05\x04\x03\x02\x01\x05\x12\x037\x04\t\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x037\n\x13\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x037\x16\x17\n\
    \xa8\x02\n\x04\x04\x03\x02\x02\x12\x03<\x04\x1a\x1a\x9a\x02\x20Range\x20\
    start\x20and\x20end\x20mirrors\x20developer.mozilla.org/en-US/docs/Web/H\
    TTP/Headers/Range.\n\x20If\x20both\x20is\x20none\x20zero,\x20only\x20dat\
    a\x20within\x20range\x20is\x20requested.\n\x20The\x20unit\x20of\x20range\
    \x20is\x20alway\x20in\x20bytes.\n\x20If\x20used,\x20please\x20check\x20t\
    he\x20returned\x20range\x20values\x20in\x20blobs\x20to\x20make\x20sure\
    \x20this\x20feature\x20is\x20supported.\n\n\r\n\x05\x04\x03\x02\x02\x04\
    \x12\x04<\x047\x18\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03<\x04\n\n\x0c\
    \n\x05\x04\x03\x02\x02\x01\x12\x03<\x0b\x15\n\x0c\n\x05\x04\x03\x02\x02\
    \x03\x12\x03<\x18\x19\n\x0b\n\x04\x04\x03\x02\x03\x12\x03=\x04\x18\n\r\n\
    \x05\x04\x03\x02\x03\x04\x12\x04=\x04<\x1a\n\x0c\n\x05\x04\x03\x02\x03\
    \x05\x12\x03=\x04\n\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03=\x0b\x13\n\
    \x0c\n\x05\x04\x03\x02\x03\x03\x12\x03=\x16\x17\n\x86\x01\n\x02\x04\x04\
    \x12\x04B\0E\x01\x1az\x20DownloadResponse\x20contains\x20the\x20response\
    \x20to\x20a\x20download\x20request\n\x20which\x20allows\x20the\x20gRPC\
    \x20server\x20to\x20stream\x20blobs\x20to\x20the\x20client\n\n\n\n\x03\
    \x04\x04\x01\x12\x03B\x08\x18\n-\n\x04\x04\x04\x02\0\x12\x03D\x04\x12\
    \x1a\x20\x20blob\x20is\x20a\x20single\x20chunk\x20of\x20data\n\n\r\n\x05\
    \x04\x04\x02\0\x04\x12\x04D\x04B\x1a\n\x0c\n\x05\x04\x04\x02\0\x06\x12\
    \x03D\x04\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03D\t\r\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x03D\x10\x11\n,\n\x02\x04\x05\x12\x04H\0Q\x01\x1a\x20\
    \x20Blob\x20is\x20a\x20chunk\x20of\x20binary\x20data\n\n\n\n\x03\x04\x05\
    \x01\x12\x03H\x08\x0c\nJ\n\x04\x04\x05\x02\0\x12\x03J\x04\x16\x1a=\x20co\
    ntent\x20is\x20the\x20actual\x20binary\x20data\x20contained\x20in\x20thi\
    s\x20message\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04J\x04H\x0e\n\x0c\n\x05\
    \x04\x05\x02\0\x05\x12\x03J\x04\t\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03J\
    \n\x11\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03J\x14\x15\n\x92\x02\n\x04\
    \x04\x05\x02\x01\x12\x03O\x04\x1a\x1a\x84\x02\x20Range\x20start\x20and\
    \x20end\x20mirrors\x20developer.mozilla.org/en-US/docs/Web/HTTP/Headers/\
    Content-Range.\n\x20If\x20both\x20is\x20zero,\x20the\x20blobs\x20streams\
    \x20contents\x20of\x20the\x20file\x20from\x20start\x20to\x20finish.\n\
    \x20The\x20unit\x20of\x20range\x20is\x20alway\x20in\x20bytes.\n\x20Curre\
    ntly,\x20DownloadResponse\x20support\x20blob\x20range.\n\n\r\n\x05\x04\
    \x05\x02\x01\x04\x12\x04O\x04J\x16\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\
    \x03O\x04\n\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03O\x0b\x15\n\x0c\n\x05\
    \x04\x05\x02\x01\x03\x12\x03O\x18\x19\n\x0b\n\x04\x04\x05\x02\x02\x12\
    \x03P\x04\x18\n\r\n\x05\x04\x05\x02\x02\x04\x12\x04P\x04O\x1a\n\x0c\n\
    \x05\x04\x05\x02\x02\x05\x12\x03P\x04\n\n\x0c\n\x05\x04\x05\x02\x02\x01\
    \x12\x03P\x0b\x13\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03P\x16\x17b\x06p\
    roto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
