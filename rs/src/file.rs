// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `file.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct UploadRequest {
    // message fields
    pub blob: ::protobuf::SingularPtrField<Blob>,
    pub options: ::protobuf::SingularPtrField<UploadOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UploadRequest {
    fn default() -> &'a UploadRequest {
        <UploadRequest as ::protobuf::Message>::default_instance()
    }
}

impl UploadRequest {
    pub fn new() -> UploadRequest {
        ::std::default::Default::default()
    }

    // .pb.Blob blob = 1;


    pub fn get_blob(&self) -> &Blob {
        self.blob.as_ref().unwrap_or_else(|| <Blob as ::protobuf::Message>::default_instance())
    }
    pub fn clear_blob(&mut self) {
        self.blob.clear();
    }

    pub fn has_blob(&self) -> bool {
        self.blob.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blob(&mut self, v: Blob) {
        self.blob = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blob(&mut self) -> &mut Blob {
        if self.blob.is_none() {
            self.blob.set_default();
        }
        self.blob.as_mut().unwrap()
    }

    // Take field
    pub fn take_blob(&mut self) -> Blob {
        self.blob.take().unwrap_or_else(|| Blob::new())
    }

    // .pb.UploadOptions options = 2;


    pub fn get_options(&self) -> &UploadOptions {
        self.options.as_ref().unwrap_or_else(|| <UploadOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: UploadOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut UploadOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> UploadOptions {
        self.options.take().unwrap_or_else(|| UploadOptions::new())
    }
}

impl ::protobuf::Message for UploadRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.blob {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.blob)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.blob.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.blob.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UploadRequest {
        UploadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Blob>>(
                "blob",
                |m: &UploadRequest| { &m.blob },
                |m: &mut UploadRequest| { &mut m.blob },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UploadOptions>>(
                "options",
                |m: &UploadRequest| { &m.options },
                |m: &mut UploadRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UploadRequest>(
                "UploadRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UploadRequest {
        static instance: ::protobuf::rt::LazyV2<UploadRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UploadRequest::new)
    }
}

impl ::protobuf::Clear for UploadRequest {
    fn clear(&mut self) {
        self.blob.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UploadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UploadOptions {
    // message fields
    pub multiHash: ::std::string::String,
    pub layout: ::std::string::String,
    pub chunker: ::std::string::String,
    pub refID: ::std::string::String,
    pub progressive: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UploadOptions {
    fn default() -> &'a UploadOptions {
        <UploadOptions as ::protobuf::Message>::default_instance()
    }
}

impl UploadOptions {
    pub fn new() -> UploadOptions {
        ::std::default::Default::default()
    }

    // string multiHash = 1;


    pub fn get_multiHash(&self) -> &str {
        &self.multiHash
    }
    pub fn clear_multiHash(&mut self) {
        self.multiHash.clear();
    }

    // Param is passed by value, moved
    pub fn set_multiHash(&mut self, v: ::std::string::String) {
        self.multiHash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multiHash(&mut self) -> &mut ::std::string::String {
        &mut self.multiHash
    }

    // Take field
    pub fn take_multiHash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.multiHash, ::std::string::String::new())
    }

    // string layout = 2;


    pub fn get_layout(&self) -> &str {
        &self.layout
    }
    pub fn clear_layout(&mut self) {
        self.layout.clear();
    }

    // Param is passed by value, moved
    pub fn set_layout(&mut self, v: ::std::string::String) {
        self.layout = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_layout(&mut self) -> &mut ::std::string::String {
        &mut self.layout
    }

    // Take field
    pub fn take_layout(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.layout, ::std::string::String::new())
    }

    // string chunker = 3;


    pub fn get_chunker(&self) -> &str {
        &self.chunker
    }
    pub fn clear_chunker(&mut self) {
        self.chunker.clear();
    }

    // Param is passed by value, moved
    pub fn set_chunker(&mut self, v: ::std::string::String) {
        self.chunker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chunker(&mut self) -> &mut ::std::string::String {
        &mut self.chunker
    }

    // Take field
    pub fn take_chunker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chunker, ::std::string::String::new())
    }

    // string refID = 4;


    pub fn get_refID(&self) -> &str {
        &self.refID
    }
    pub fn clear_refID(&mut self) {
        self.refID.clear();
    }

    // Param is passed by value, moved
    pub fn set_refID(&mut self, v: ::std::string::String) {
        self.refID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refID(&mut self) -> &mut ::std::string::String {
        &mut self.refID
    }

    // Take field
    pub fn take_refID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.refID, ::std::string::String::new())
    }

    // bool progressive = 5;


    pub fn get_progressive(&self) -> bool {
        self.progressive
    }
    pub fn clear_progressive(&mut self) {
        self.progressive = false;
    }

    // Param is passed by value, moved
    pub fn set_progressive(&mut self, v: bool) {
        self.progressive = v;
    }
}

impl ::protobuf::Message for UploadOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.multiHash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.layout)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chunker)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.refID)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.progressive = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multiHash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.multiHash);
        }
        if !self.layout.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.layout);
        }
        if !self.chunker.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.chunker);
        }
        if !self.refID.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.refID);
        }
        if self.progressive != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multiHash.is_empty() {
            os.write_string(1, &self.multiHash)?;
        }
        if !self.layout.is_empty() {
            os.write_string(2, &self.layout)?;
        }
        if !self.chunker.is_empty() {
            os.write_string(3, &self.chunker)?;
        }
        if !self.refID.is_empty() {
            os.write_string(4, &self.refID)?;
        }
        if self.progressive != false {
            os.write_bool(5, self.progressive)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UploadOptions {
        UploadOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "multiHash",
                |m: &UploadOptions| { &m.multiHash },
                |m: &mut UploadOptions| { &mut m.multiHash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "layout",
                |m: &UploadOptions| { &m.layout },
                |m: &mut UploadOptions| { &mut m.layout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chunker",
                |m: &UploadOptions| { &m.chunker },
                |m: &mut UploadOptions| { &mut m.chunker },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refID",
                |m: &UploadOptions| { &m.refID },
                |m: &mut UploadOptions| { &mut m.refID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "progressive",
                |m: &UploadOptions| { &m.progressive },
                |m: &mut UploadOptions| { &mut m.progressive },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UploadOptions>(
                "UploadOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UploadOptions {
        static instance: ::protobuf::rt::LazyV2<UploadOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UploadOptions::new)
    }
}

impl ::protobuf::Clear for UploadOptions {
    fn clear(&mut self) {
        self.multiHash.clear();
        self.layout.clear();
        self.chunker.clear();
        self.refID.clear();
        self.progressive = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UploadOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DownloadRequest {
    // message fields
    pub hash: ::std::string::String,
    pub chunkSize: i32,
    pub rangeStart: u64,
    pub rangeEnd: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DownloadRequest {
    fn default() -> &'a DownloadRequest {
        <DownloadRequest as ::protobuf::Message>::default_instance()
    }
}

impl DownloadRequest {
    pub fn new() -> DownloadRequest {
        ::std::default::Default::default()
    }

    // string hash = 1;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    // int32 chunkSize = 2;


    pub fn get_chunkSize(&self) -> i32 {
        self.chunkSize
    }
    pub fn clear_chunkSize(&mut self) {
        self.chunkSize = 0;
    }

    // Param is passed by value, moved
    pub fn set_chunkSize(&mut self, v: i32) {
        self.chunkSize = v;
    }

    // uint64 rangeStart = 3;


    pub fn get_rangeStart(&self) -> u64 {
        self.rangeStart
    }
    pub fn clear_rangeStart(&mut self) {
        self.rangeStart = 0;
    }

    // Param is passed by value, moved
    pub fn set_rangeStart(&mut self, v: u64) {
        self.rangeStart = v;
    }

    // uint64 rangeEnd = 4;


    pub fn get_rangeEnd(&self) -> u64 {
        self.rangeEnd
    }
    pub fn clear_rangeEnd(&mut self) {
        self.rangeEnd = 0;
    }

    // Param is passed by value, moved
    pub fn set_rangeEnd(&mut self, v: u64) {
        self.rangeEnd = v;
    }
}

impl ::protobuf::Message for DownloadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.chunkSize = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rangeStart = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rangeEnd = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        if self.chunkSize != 0 {
            my_size += ::protobuf::rt::value_size(2, self.chunkSize, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rangeStart != 0 {
            my_size += ::protobuf::rt::value_size(3, self.rangeStart, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rangeEnd != 0 {
            my_size += ::protobuf::rt::value_size(4, self.rangeEnd, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        if self.chunkSize != 0 {
            os.write_int32(2, self.chunkSize)?;
        }
        if self.rangeStart != 0 {
            os.write_uint64(3, self.rangeStart)?;
        }
        if self.rangeEnd != 0 {
            os.write_uint64(4, self.rangeEnd)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DownloadRequest {
        DownloadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hash",
                |m: &DownloadRequest| { &m.hash },
                |m: &mut DownloadRequest| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "chunkSize",
                |m: &DownloadRequest| { &m.chunkSize },
                |m: &mut DownloadRequest| { &mut m.chunkSize },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "rangeStart",
                |m: &DownloadRequest| { &m.rangeStart },
                |m: &mut DownloadRequest| { &mut m.rangeStart },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "rangeEnd",
                |m: &DownloadRequest| { &m.rangeEnd },
                |m: &mut DownloadRequest| { &mut m.rangeEnd },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DownloadRequest>(
                "DownloadRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DownloadRequest {
        static instance: ::protobuf::rt::LazyV2<DownloadRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DownloadRequest::new)
    }
}

impl ::protobuf::Clear for DownloadRequest {
    fn clear(&mut self) {
        self.hash.clear();
        self.chunkSize = 0;
        self.rangeStart = 0;
        self.rangeEnd = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DownloadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DownloadResponse {
    // message fields
    pub blob: ::protobuf::SingularPtrField<Blob>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DownloadResponse {
    fn default() -> &'a DownloadResponse {
        <DownloadResponse as ::protobuf::Message>::default_instance()
    }
}

impl DownloadResponse {
    pub fn new() -> DownloadResponse {
        ::std::default::Default::default()
    }

    // .pb.Blob blob = 1;


    pub fn get_blob(&self) -> &Blob {
        self.blob.as_ref().unwrap_or_else(|| <Blob as ::protobuf::Message>::default_instance())
    }
    pub fn clear_blob(&mut self) {
        self.blob.clear();
    }

    pub fn has_blob(&self) -> bool {
        self.blob.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blob(&mut self, v: Blob) {
        self.blob = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blob(&mut self) -> &mut Blob {
        if self.blob.is_none() {
            self.blob.set_default();
        }
        self.blob.as_mut().unwrap()
    }

    // Take field
    pub fn take_blob(&mut self) -> Blob {
        self.blob.take().unwrap_or_else(|| Blob::new())
    }
}

impl ::protobuf::Message for DownloadResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.blob {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.blob)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.blob.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.blob.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DownloadResponse {
        DownloadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Blob>>(
                "blob",
                |m: &DownloadResponse| { &m.blob },
                |m: &mut DownloadResponse| { &mut m.blob },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DownloadResponse>(
                "DownloadResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DownloadResponse {
        static instance: ::protobuf::rt::LazyV2<DownloadResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DownloadResponse::new)
    }
}

impl ::protobuf::Clear for DownloadResponse {
    fn clear(&mut self) {
        self.blob.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DownloadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Blob {
    // message fields
    pub content: ::std::vec::Vec<u8>,
    pub rangeStart: u64,
    pub rangeEnd: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Blob {
    fn default() -> &'a Blob {
        <Blob as ::protobuf::Message>::default_instance()
    }
}

impl Blob {
    pub fn new() -> Blob {
        ::std::default::Default::default()
    }

    // bytes content = 1;


    pub fn get_content(&self) -> &[u8] {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }

    // uint64 rangeStart = 2;


    pub fn get_rangeStart(&self) -> u64 {
        self.rangeStart
    }
    pub fn clear_rangeStart(&mut self) {
        self.rangeStart = 0;
    }

    // Param is passed by value, moved
    pub fn set_rangeStart(&mut self, v: u64) {
        self.rangeStart = v;
    }

    // uint64 rangeEnd = 3;


    pub fn get_rangeEnd(&self) -> u64 {
        self.rangeEnd
    }
    pub fn clear_rangeEnd(&mut self) {
        self.rangeEnd = 0;
    }

    // Param is passed by value, moved
    pub fn set_rangeEnd(&mut self, v: u64) {
        self.rangeEnd = v;
    }
}

impl ::protobuf::Message for Blob {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rangeStart = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rangeEnd = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.content);
        }
        if self.rangeStart != 0 {
            my_size += ::protobuf::rt::value_size(2, self.rangeStart, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rangeEnd != 0 {
            my_size += ::protobuf::rt::value_size(3, self.rangeEnd, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.content.is_empty() {
            os.write_bytes(1, &self.content)?;
        }
        if self.rangeStart != 0 {
            os.write_uint64(2, self.rangeStart)?;
        }
        if self.rangeEnd != 0 {
            os.write_uint64(3, self.rangeEnd)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Blob {
        Blob::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "content",
                |m: &Blob| { &m.content },
                |m: &mut Blob| { &mut m.content },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "rangeStart",
                |m: &Blob| { &m.rangeStart },
                |m: &mut Blob| { &mut m.rangeStart },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "rangeEnd",
                |m: &Blob| { &m.rangeEnd },
                |m: &mut Blob| { &mut m.rangeEnd },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Blob>(
                "Blob",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Blob {
        static instance: ::protobuf::rt::LazyV2<Blob> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Blob::new)
    }
}

impl ::protobuf::Clear for Blob {
    fn clear(&mut self) {
        self.content.clear();
        self.rangeStart = 0;
        self.rangeEnd = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Blob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Blob {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveRequest {
    // message fields
    pub refIDs: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveRequest {
    fn default() -> &'a RemoveRequest {
        <RemoveRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemoveRequest {
    pub fn new() -> RemoveRequest {
        ::std::default::Default::default()
    }

    // repeated .pb.RemoveRequest.RefIDsEntry refIDs = 1;


    pub fn get_refIDs(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.refIDs
    }
    pub fn clear_refIDs(&mut self) {
        self.refIDs.clear();
    }

    // Param is passed by value, moved
    pub fn set_refIDs(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.refIDs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_refIDs(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.refIDs
    }

    // Take field
    pub fn take_refIDs(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.refIDs, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for RemoveRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.refIDs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.refIDs);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.refIDs, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveRequest {
        RemoveRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "refIDs",
                |m: &RemoveRequest| { &m.refIDs },
                |m: &mut RemoveRequest| { &mut m.refIDs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoveRequest>(
                "RemoveRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoveRequest {
        static instance: ::protobuf::rt::LazyV2<RemoveRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoveRequest::new)
    }
}

impl ::protobuf::Clear for RemoveRequest {
    fn clear(&mut self) {
        self.refIDs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveResponse {
    // message fields
    pub count: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveResponse {
    fn default() -> &'a RemoveResponse {
        <RemoveResponse as ::protobuf::Message>::default_instance()
    }
}

impl RemoveResponse {
    pub fn new() -> RemoveResponse {
        ::std::default::Default::default()
    }

    // uint64 count = 1;


    pub fn get_count(&self) -> u64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = v;
    }
}

impl ::protobuf::Message for RemoveResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.count != 0 {
            os.write_uint64(1, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveResponse {
        RemoveResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "count",
                |m: &RemoveResponse| { &m.count },
                |m: &mut RemoveResponse| { &mut m.count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoveResponse>(
                "RemoveResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoveResponse {
        static instance: ::protobuf::rt::LazyV2<RemoveResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoveResponse::new)
    }
}

impl ::protobuf::Clear for RemoveResponse {
    fn clear(&mut self) {
        self.count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nfile.proto\x12\x02pb\x1a\nutil.proto\"Z\n\rUploadRequest\x12\x1c\n\
    \x04blob\x18\x01\x20\x01(\x0b2\x08.pb.BlobR\x04blob\x12+\n\x07options\
    \x18\x02\x20\x01(\x0b2\x11.pb.UploadOptionsR\x07options\"\x97\x01\n\rUpl\
    oadOptions\x12\x1c\n\tmultiHash\x18\x01\x20\x01(\tR\tmultiHash\x12\x16\n\
    \x06layout\x18\x02\x20\x01(\tR\x06layout\x12\x18\n\x07chunker\x18\x03\
    \x20\x01(\tR\x07chunker\x12\x14\n\x05refID\x18\x04\x20\x01(\tR\x05refID\
    \x12\x20\n\x0bprogressive\x18\x05\x20\x01(\x08R\x0bprogressive\"\x7f\n\
    \x0fDownloadRequest\x12\x12\n\x04hash\x18\x01\x20\x01(\tR\x04hash\x12\
    \x1c\n\tchunkSize\x18\x02\x20\x01(\x05R\tchunkSize\x12\x1e\n\nrangeStart\
    \x18\x03\x20\x01(\x04R\nrangeStart\x12\x1a\n\x08rangeEnd\x18\x04\x20\x01\
    (\x04R\x08rangeEnd\"0\n\x10DownloadResponse\x12\x1c\n\x04blob\x18\x01\
    \x20\x01(\x0b2\x08.pb.BlobR\x04blob\"\\\n\x04Blob\x12\x18\n\x07content\
    \x18\x01\x20\x01(\x0cR\x07content\x12\x1e\n\nrangeStart\x18\x02\x20\x01(\
    \x04R\nrangeStart\x12\x1a\n\x08rangeEnd\x18\x03\x20\x01(\x04R\x08rangeEn\
    d\"\x81\x01\n\rRemoveRequest\x125\n\x06refIDs\x18\x01\x20\x03(\x0b2\x1d.\
    pb.RemoveRequest.RefIDsEntryR\x06refIDs\x1a9\n\x0bRefIDsEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\"&\n\x0eRemoveResponse\x12\x14\n\x05count\x18\x01\
    \x20\x01(\x04R\x05count2\xb5\x01\n\x07FileAPI\x124\n\nUploadFile\x12\x11\
    .pb.UploadRequest\x1a\x0f.pb.PutResponse\"\0(\x01\x12=\n\x0cDownloadFile\
    \x12\x13.pb.DownloadRequest\x1a\x14.pb.DownloadResponse\"\00\x01\x125\n\
    \nRemoveFile\x12\x11.pb.RemoveRequest\x1a\x12.pb.RemoveResponse\"\0J\xa4\
    \x20\n\x06\x12\x04\0\0U\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x01\x08\n\n\t\n\x02\x03\0\x12\x03\x02\x07\x13\nU\n\x02\x06\
    \0\x12\x04\x05\0\x0c\x01\x1aI\x20FileAPI\x20provides\x20a\x20gRPC\x20api\
    \x20to\x20upload/download\x20files\x20as\x20UnixFS\x20objects\r\n\n\n\n\
    \x03\x06\0\x01\x12\x03\x05\x08\x0f\nb\n\x04\x06\0\x02\0\x12\x03\x07\x04B\
    \x1aU\x20UploadFile\x20allows\x20uploading\x20a\x20file\x20as\x20a\x20Un\
    ixFS\x20object\x20(equivalent\x20to\x20ipfs\x20pin\x20add)\r\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x07\x08\x12\n\x0c\n\x05\x06\0\x02\0\x05\x12\
    \x03\x07\x13\x19\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\x1a'\n\x0c\n\
    \x05\x06\0\x02\0\x03\x12\x03\x073>\nX\n\x04\x06\0\x02\x01\x12\x03\t\x04J\
    \x1aK\x20DownloadFile\x20allows\x20downloading\x20a\x20UnixFS\x20object\
    \x20(equivalent\x20to\x20ipfs\x20get)\r\n\n\x0c\n\x05\x06\0\x02\x01\x01\
    \x12\x03\t\x08\x14\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\t\x15$\n\x0c\n\
    \x05\x06\0\x02\x01\x06\x12\x03\t/5\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\
    \t6F\ny\n\x04\x06\0\x02\x02\x12\x03\x0b\x04=\x1al\x20RemoveFile\x20allow\
    s\x20removing\x20a\x20UnixFS\x20object\x20or\x20decrease\x20it's\x20refe\
    rence\x20counter\x20(equivalent\x20to\x20ipfs\x20pin\x20rm)\r\n\n\x0c\n\
    \x05\x06\0\x02\x02\x01\x12\x03\x0b\x08\x12\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03\x0b\x13\x20\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x0b+9\nF\n\
    \x02\x04\0\x12\x04\x10\0\x15\x01\x1a:\x20UploadRequest\x20is\x20used\x20\
    to\x20upload\x20data\x20as\x20a\x20UnixFS\x20object\r\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x10\x08\x15\n.\n\x04\x04\0\x02\0\x12\x03\x12\x04\x12\x1a!\
    \x20blob\x20is\x20a\x20single\x20chunk\x20of\x20data\r\n\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x12\x04\x10\x17\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\
    \x12\x04\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x12\t\r\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x12\x10\x11\no\n\x04\x04\0\x02\x01\x12\x03\x14\x04\
    \x1e\x1ab\x20options\x20allows\x20setting\x20the\x20options\x20for\x20th\
    is\x20upload,\x20only\x20valid\x20in\x20the\x20first\x20message\x20of\
    \x20a\x20stream\r\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x14\x04\x12\x12\
    \n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x14\x04\x11\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x14\x12\x19\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x14\
    \x1c\x1d\nO\n\x02\x04\x01\x12\x04\x18\0#\x01\x1aC\x20UploadOptions\x20al\
    lows\x20controlling\x20the\x20parameters\x20of\x20a\x20file\x20upload\r\
    \n\n\n\n\x03\x04\x01\x01\x12\x03\x18\x08\x15\n7\n\x04\x04\x01\x02\0\x12\
    \x03\x1a\x04\x19\x1a*\x20specifies\x20the\x20multihash\x20function\x20to\
    \x20use\r\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x1a\x04\x18\x17\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x1a\x0b\x14\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1a\x17\x18\n\
    =\n\x04\x04\x01\x02\x01\x12\x03\x1c\x04\x16\x1a0\x20specifies\x20the\x20\
    dag\x20layout\x20(balanced,\x20tricklet)\r\n\n\r\n\x05\x04\x01\x02\x01\
    \x04\x12\x04\x1c\x04\x1a\x19\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1c\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1c\x0b\x11\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x1c\x14\x15\nC\n\x04\x04\x01\x02\x02\x12\
    \x03\x1e\x04\x17\x1a6\x20specifies\x20the\x20chunker\x20type\x20(rabin,\
    \x20default,\x20etc...)\r\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x1e\
    \x04\x1c\x16\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1e\x04\n\n\x0c\n\
    \x05\x04\x01\x02\x02\x01\x12\x03\x1e\x0b\x12\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03\x1e\x15\x16\ns\n\x04\x04\x01\x02\x03\x12\x03\x20\x04\x15\
    \x1af\x20optional\x20reference\x20ID\x20to\x20tag\x20the\x20file\x20with\
    .\x20If\x20set,\x20the\x20same\x20reference\x20ID\x20must\x20be\x20used\
    \x20for\x20deletion\r\n\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04\x20\x04\
    \x1e\x17\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x20\x04\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03\x20\x0b\x10\n\x0c\n\x05\x04\x01\x02\x03\x03\
    \x12\x03\x20\x13\x14\n:\n\x04\x04\x01\x02\x04\x12\x03\"\x04\x19\x1a-\x20\
    if\x20refID\x20is\x20set,\x20allows\x20progressive\x20upload\r\n\n\r\n\
    \x05\x04\x01\x02\x04\x04\x12\x04\"\x04\x20\x15\n\x0c\n\x05\x04\x01\x02\
    \x04\x05\x12\x03\"\x04\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\"\t\
    \x14\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\"\x17\x18\n\xa9\x01\n\x02\
    \x04\x02\x12\x04(\05\x01\x1a\x9c\x01\x20DownloadRequest\x20is\x20used\
    \x20to\x20download\x20a\x20UnixFS\x20object\r\n\x20although\x20it\x20can\
    \x20in\x20theory\x20be\x20used\x20with\x20other\x20type\x20of\x20objects\
    \r\n\x20there\x20may\x20be\x20some\x20undefined\x20behavior\r\n\n\n\n\
    \x03\x04\x02\x01\x12\x03(\x08\x17\nV\n\x04\x04\x02\x02\0\x12\x03*\x04\
    \x14\x1aI\x20hash\x20is\x20the\x20ipfs\x20hash/cid\x20(content\x20identi\
    fier)\x20of\x20the\x20data\x20to\x20download\r\n\n\r\n\x05\x04\x02\x02\0\
    \x04\x12\x04*\x04(\x19\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03*\x04\n\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03*\x0b\x0f\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03*\x12\x13\n\xba\x01\n\x04\x04\x02\x02\x01\x12\x03.\x04\x18\
    \x1a\xac\x01\x20chunkSize\x20specifies\x20the\x20size\x20of\x20chunks\
    \x20to\x20be\x20sent\x20to\x20the\x20client\r\n\x20it\x20allows\x20us\
    \x20to\x20efficiently\x20control\x20incoming\x20data\x20amounts\x20which\
    \r\n\x20is\x20useful\x20on\x20machines\x20with\x20low-memory\r\n\n\r\n\
    \x05\x04\x02\x02\x01\x04\x12\x04.\x04*\x14\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x03.\x04\t\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03.\n\x13\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03.\x16\x17\n\xad\x02\n\x04\x04\x02\x02\
    \x02\x12\x033\x04\x1a\x1a\x9f\x02\x20Range\x20start\x20and\x20end\x20mir\
    rors\x20developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range.\r\n\x20\
    If\x20both\x20is\x20none\x20zero,\x20only\x20data\x20within\x20range\x20\
    is\x20requested.\r\n\x20The\x20unit\x20of\x20range\x20is\x20always\x20in\
    \x20bytes.\r\n\x20If\x20used,\x20please\x20check\x20the\x20returned\x20r\
    ange\x20values\x20in\x20blobs\x20to\x20make\x20sure\x20this\x20feature\
    \x20is\x20supported.\r\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x043\x04.\x18\
    \n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x033\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x02\x01\x12\x033\x0b\x15\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x033\x18\
    \x19\n\x0b\n\x04\x04\x02\x02\x03\x12\x034\x04\x18\n\r\n\x05\x04\x02\x02\
    \x03\x04\x12\x044\x043\x1a\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x034\x04\
    \n\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x034\x0b\x13\n\x0c\n\x05\x04\x02\
    \x02\x03\x03\x12\x034\x16\x17\n\x88\x01\n\x02\x04\x03\x12\x049\0<\x01\
    \x1a|\x20DownloadResponse\x20contains\x20the\x20response\x20to\x20a\x20d\
    ownload\x20request\r\n\x20which\x20allows\x20the\x20gRPC\x20server\x20to\
    \x20stream\x20blobs\x20to\x20the\x20client\r\n\n\n\n\x03\x04\x03\x01\x12\
    \x039\x08\x18\n.\n\x04\x04\x03\x02\0\x12\x03;\x04\x12\x1a!\x20blob\x20is\
    \x20a\x20single\x20chunk\x20of\x20data\r\n\n\r\n\x05\x04\x03\x02\0\x04\
    \x12\x04;\x049\x1a\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03;\x04\x08\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03;\t\r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03;\x10\x11\n-\n\x02\x04\x04\x12\x04?\0H\x01\x1a!\x20Blob\x20is\x20a\
    \x20chunk\x20of\x20binary\x20data\r\n\n\n\n\x03\x04\x04\x01\x12\x03?\x08\
    \x0c\nK\n\x04\x04\x04\x02\0\x12\x03A\x04\x16\x1a>\x20content\x20is\x20th\
    e\x20actual\x20binary\x20data\x20contained\x20in\x20this\x20message\r\n\
    \n\r\n\x05\x04\x04\x02\0\x04\x12\x04A\x04?\x0e\n\x0c\n\x05\x04\x04\x02\0\
    \x05\x12\x03A\x04\t\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03A\n\x11\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03A\x14\x15\n\x97\x02\n\x04\x04\x04\x02\x01\
    \x12\x03F\x04\x1a\x1a\x89\x02\x20Range\x20start\x20and\x20end\x20mirrors\
    \x20developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range.\r\n\
    \x20If\x20both\x20is\x20zero,\x20the\x20blobs\x20streams\x20contents\x20\
    of\x20the\x20file\x20from\x20start\x20to\x20finish.\r\n\x20The\x20unit\
    \x20of\x20range\x20is\x20always\x20in\x20bytes.\r\n\x20Currently,\x20Dow\
    nloadResponse\x20support\x20blob\x20range.\r\n\n\r\n\x05\x04\x04\x02\x01\
    \x04\x12\x04F\x04A\x16\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03F\x04\n\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03F\x0b\x15\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x03F\x18\x19\n\x0b\n\x04\x04\x04\x02\x02\x12\x03G\x04\x18\n\
    \r\n\x05\x04\x04\x02\x02\x04\x12\x04G\x04F\x1a\n\x0c\n\x05\x04\x04\x02\
    \x02\x05\x12\x03G\x04\n\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03G\x0b\x13\
    \n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03G\x16\x17\nV\n\x02\x04\x05\x12\
    \x04K\0N\x01\x1aJ\x20UploadRequest\x20is\x20used\x20to\x20decrease\x20th\
    e\x20reference\x20count\x20on\x20UnixFS\x20objects\r\n\n\n\n\x03\x04\x05\
    \x01\x12\x03K\x08\x15\nh\n\x04\x04\x05\x02\0\x12\x03M\x04#\x1a[\x20refID\
    s\x20is\x20a\x20map\x20of\x20reference\x20IDs\x20to\x20hash/cid\x20of\
    \x20objects\x20to\x20remove\x20those\x20reference\x20counts\r\n\n\r\n\
    \x05\x04\x05\x02\0\x04\x12\x04M\x04K\x16\n\x0c\n\x05\x04\x05\x02\0\x06\
    \x12\x03M\x04\x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03M\x18\x1e\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x03M!\"\nG\n\x02\x04\x06\x12\x04Q\0U\x01\x1a;\
    \x20RemoveResponse\x20contains\x20the\x20response\x20to\x20a\x20remove\
    \x20request\r\n\n\n\n\x03\x04\x06\x01\x12\x03Q\x08\x16\n\x98\x01\n\x04\
    \x04\x06\x02\0\x12\x03T\x04\x15\x1a\x8a\x01\x20The\x20number\x20of\x20re\
    moval\x20operations\x20performed.\r\n\x20A\x20missing\x20count\x20is\x20\
    because\x20the\x20refID\x20to\x20hash\x20pair\x20was\x20already\x20remov\
    ed\x20or\x20was\x20never\x20added\x20\r\n\n\r\n\x05\x04\x06\x02\0\x04\
    \x12\x04T\x04Q\x17\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03T\x04\n\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x03T\x0b\x10\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03T\x13\x14b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
