# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import ipns_pb2 as ipns__pb2
import util_pb2 as util__pb2


class IPNSAPIStub(object):
  """IPNSAPI provides an API to access IPNS functionality
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Resolve = channel.unary_unary(
        '/pb.IPNSAPI/Resolve',
        request_serializer=ipns__pb2.NameResolveRequest.SerializeToString,
        response_deserializer=ipns__pb2.NameResolveResult.FromString,
        )
    self.ResolveAsync = channel.unary_stream(
        '/pb.IPNSAPI/ResolveAsync',
        request_serializer=ipns__pb2.NameResolveRequest.SerializeToString,
        response_deserializer=ipns__pb2.NameResolveResult.FromString,
        )
    self.Publish = channel.unary_unary(
        '/pb.IPNSAPI/Publish',
        request_serializer=ipns__pb2.NamePublishRequest.SerializeToString,
        response_deserializer=util__pb2.Empty.FromString,
        )


class IPNSAPIServicer(object):
  """IPNSAPI provides an API to access IPNS functionality
  """

  def Resolve(self, request, context):
    """Resolve is used to resolve a name, waiting for the request to complete
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ResolveAsync(self, request, context):
    """ResolveAsync is like Resolve, except instead of waiting for the request
    to complete, we send back a stream which we will send the result on
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Publish(self, request, context):
    """Publish is used to publish an IPNS record, with/with-out an EOL
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_IPNSAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Resolve': grpc.unary_unary_rpc_method_handler(
          servicer.Resolve,
          request_deserializer=ipns__pb2.NameResolveRequest.FromString,
          response_serializer=ipns__pb2.NameResolveResult.SerializeToString,
      ),
      'ResolveAsync': grpc.unary_stream_rpc_method_handler(
          servicer.ResolveAsync,
          request_deserializer=ipns__pb2.NameResolveRequest.FromString,
          response_serializer=ipns__pb2.NameResolveResult.SerializeToString,
      ),
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ipns__pb2.NamePublishRequest.FromString,
          response_serializer=util__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.IPNSAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
