# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import pubsub_pb2 as pubsub__pb2
import util_pb2 as util__pb2


class PubSubAPIStub(object):
  """PubSubAPI provides a gRPC API for a libp2p pubsub instance
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetTopics = channel.unary_unary(
        '/pb.PubSubAPI/GetTopics',
        request_serializer=util__pb2.Empty.SerializeToString,
        response_deserializer=pubsub__pb2.TopicsResponse.FromString,
        )
    self.ListPeers = channel.unary_unary(
        '/pb.PubSubAPI/ListPeers',
        request_serializer=pubsub__pb2.ListPeersRequest.SerializeToString,
        response_deserializer=pubsub__pb2.ListPeersResponse.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/pb.PubSubAPI/Subscribe',
        request_serializer=pubsub__pb2.SubscribeRequest.SerializeToString,
        response_deserializer=pubsub__pb2.PubSubMessageResponse.FromString,
        )
    self.Publish = channel.stream_unary(
        '/pb.PubSubAPI/Publish',
        request_serializer=pubsub__pb2.PublishRequest.SerializeToString,
        response_deserializer=util__pb2.Empty.FromString,
        )


class PubSubAPIServicer(object):
  """PubSubAPI provides a gRPC API for a libp2p pubsub instance
  """

  def GetTopics(self, request, context):
    """GetTopics is used to return a list of all
    known topics the pubsub instance is subscribed to.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListPeers(self, request, context):
    """ListPeers is used to return a list of peers subscribed
    to a given topic or topics.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    """Subscribe is used to subscribe to a topic and receive messages
    Server will stream the messages received on the topic specified 
    during the initial subscription call, and send each message
    back to the client as it is received. 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Publish(self, request_iterator, context):
    """Publish is used to send a stream of messages to a pubsub topic.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PubSubAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetTopics': grpc.unary_unary_rpc_method_handler(
          servicer.GetTopics,
          request_deserializer=util__pb2.Empty.FromString,
          response_serializer=pubsub__pb2.TopicsResponse.SerializeToString,
      ),
      'ListPeers': grpc.unary_unary_rpc_method_handler(
          servicer.ListPeers,
          request_deserializer=pubsub__pb2.ListPeersRequest.FromString,
          response_serializer=pubsub__pb2.ListPeersResponse.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=pubsub__pb2.SubscribeRequest.FromString,
          response_serializer=pubsub__pb2.PubSubMessageResponse.SerializeToString,
      ),
      'Publish': grpc.stream_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=pubsub__pb2.PublishRequest.FromString,
          response_serializer=util__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.PubSubAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
