# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import pubsub_pb2 as pubsub__pb2


class PubSubAPIStub(object):
  """PubSubAPI provides a libp2p pubsub API and is equivalent to go-ipfs
  `ipfs pubsub` subset of commands.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.PubSub = channel.stream_stream(
        '/pb.PubSubAPI/PubSub',
        request_serializer=pubsub__pb2.PubSubRequest.SerializeToString,
        response_deserializer=pubsub__pb2.PubSubResponse.FromString,
        )


class PubSubAPIServicer(object):
  """PubSubAPI provides a libp2p pubsub API and is equivalent to go-ipfs
  `ipfs pubsub` subset of commands.
  """

  def PubSub(self, request_iterator, context):
    """PubSub allows controlling libp2p pubsub topics and subscriptions using
    a bidirectional streaming API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PubSubAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'PubSub': grpc.stream_stream_rpc_method_handler(
          servicer.PubSub,
          request_deserializer=pubsub__pb2.PubSubRequest.FromString,
          response_serializer=pubsub__pb2.PubSubResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.PubSubAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
