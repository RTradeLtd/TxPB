# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import p2p_pb2 as p2p__pb2
import util_pb2 as util__pb2


class P2PAPIStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Close = channel.unary_unary(
        '/pb.P2PAPI/Close',
        request_serializer=p2p__pb2.CloseRequest.SerializeToString,
        response_deserializer=util__pb2.Empty.FromString,
        )
    self.Forward = channel.unary_unary(
        '/pb.P2PAPI/Forward',
        request_serializer=p2p__pb2.ForwardRequest.SerializeToString,
        response_deserializer=util__pb2.Empty.FromString,
        )
    self.Listen = channel.unary_unary(
        '/pb.P2PAPI/Listen',
        request_serializer=p2p__pb2.ListenRequest.SerializeToString,
        response_deserializer=util__pb2.Empty.FromString,
        )
    self.Ls = channel.unary_unary(
        '/pb.P2PAPI/Ls',
        request_serializer=p2p__pb2.LsRequest.SerializeToString,
        response_deserializer=p2p__pb2.LsResponse.FromString,
        )


class P2PAPIServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Close(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Forward(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Listen(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Ls(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_P2PAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Close': grpc.unary_unary_rpc_method_handler(
          servicer.Close,
          request_deserializer=p2p__pb2.CloseRequest.FromString,
          response_serializer=util__pb2.Empty.SerializeToString,
      ),
      'Forward': grpc.unary_unary_rpc_method_handler(
          servicer.Forward,
          request_deserializer=p2p__pb2.ForwardRequest.FromString,
          response_serializer=util__pb2.Empty.SerializeToString,
      ),
      'Listen': grpc.unary_unary_rpc_method_handler(
          servicer.Listen,
          request_deserializer=p2p__pb2.ListenRequest.FromString,
          response_serializer=util__pb2.Empty.SerializeToString,
      ),
      'Ls': grpc.unary_unary_rpc_method_handler(
          servicer.Ls,
          request_deserializer=p2p__pb2.LsRequest.FromString,
          response_serializer=p2p__pb2.LsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.P2PAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
