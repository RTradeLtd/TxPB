# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import replication_pb2 as replication__pb2


class replicatorStub(object):
  """The replicator provides replication services.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Add = channel.unary_stream(
        '/pb.replicator/Add',
        request_serializer=replication__pb2.Subscription.SerializeToString,
        response_deserializer=replication__pb2.ReplicationStatus.FromString,
        )
    self.Status = channel.unary_stream(
        '/pb.replicator/Status',
        request_serializer=replication__pb2.Subscription.SerializeToString,
        response_deserializer=replication__pb2.ReplicationStatus.FromString,
        )
    self.GetSubscriptionUpdate = channel.unary_unary(
        '/pb.replicator/GetSubscriptionUpdate',
        request_serializer=replication__pb2.Subscription.SerializeToString,
        response_deserializer=replication__pb2.SubscriptionUpdate.FromString,
        )
    self.SubmitReplication = channel.unary_stream(
        '/pb.replicator/SubmitReplication',
        request_serializer=replication__pb2.SignedSubscription.SerializeToString,
        response_deserializer=replication__pb2.ReplicationStatus.FromString,
        )


class replicatorServicer(object):
  """The replicator provides replication services.
  """

  def Add(self, request, context):
    """Add is used to add a replication to this server, changing it's status from reserved to active.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Status(self, request, context):
    """Status returns an updating stream of the replication status on the server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSubscriptionUpdate(self, request, context):
    """GetSubscriptionUpdate returns the latest version of subscribed replication
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubmitReplication(self, request, context):
    """SubmitReplication is used by client agents to start replications, after they 
    have uploaded the files and retrieved the cid, and collected servers to replicate too.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_replicatorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Add': grpc.unary_stream_rpc_method_handler(
          servicer.Add,
          request_deserializer=replication__pb2.Subscription.FromString,
          response_serializer=replication__pb2.ReplicationStatus.SerializeToString,
      ),
      'Status': grpc.unary_stream_rpc_method_handler(
          servicer.Status,
          request_deserializer=replication__pb2.Subscription.FromString,
          response_serializer=replication__pb2.ReplicationStatus.SerializeToString,
      ),
      'GetSubscriptionUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.GetSubscriptionUpdate,
          request_deserializer=replication__pb2.Subscription.FromString,
          response_serializer=replication__pb2.SubscriptionUpdate.SerializeToString,
      ),
      'SubmitReplication': grpc.unary_stream_rpc_method_handler(
          servicer.SubmitReplication,
          request_deserializer=replication__pb2.SignedSubscription.FromString,
          response_serializer=replication__pb2.ReplicationStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.replicator', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
