# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import namesys_pb2 as namesys__pb2
import util_pb2 as util__pb2


class NameSysAPIStub(object):
  """NameSysAPI provides a generic name resolution API
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.NameSysNameSysResolve = channel.unary_unary(
        '/pb.NameSysAPI/NameSysNameSysResolve',
        request_serializer=namesys__pb2.NameSysResolveRequest.SerializeToString,
        response_deserializer=namesys__pb2.NameSysResolveResult.FromString,
        )
    self.NameSysResolveAsync = channel.unary_stream(
        '/pb.NameSysAPI/NameSysResolveAsync',
        request_serializer=namesys__pb2.NameSysResolveRequest.SerializeToString,
        response_deserializer=namesys__pb2.NameSysResolveResult.FromString,
        )
    self.NameSysPublish = channel.unary_unary(
        '/pb.NameSysAPI/NameSysPublish',
        request_serializer=namesys__pb2.NameSysPublishRequest.SerializeToString,
        response_deserializer=util__pb2.Empty.FromString,
        )


class NameSysAPIServicer(object):
  """NameSysAPI provides a generic name resolution API
  """

  def NameSysNameSysResolve(self, request, context):
    """NameSysResolve is used to resolve a name, waiting for the request to complete
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NameSysResolveAsync(self, request, context):
    """ResolveAsync is like Resolve, except instead of waiting for the request
    to complete, we send back a stream which we will send the result on
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NameSysPublish(self, request, context):
    """Publish is used to publish an IPNS record, with/with-out an EOL
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NameSysAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'NameSysNameSysResolve': grpc.unary_unary_rpc_method_handler(
          servicer.NameSysNameSysResolve,
          request_deserializer=namesys__pb2.NameSysResolveRequest.FromString,
          response_serializer=namesys__pb2.NameSysResolveResult.SerializeToString,
      ),
      'NameSysResolveAsync': grpc.unary_stream_rpc_method_handler(
          servicer.NameSysResolveAsync,
          request_deserializer=namesys__pb2.NameSysResolveRequest.FromString,
          response_serializer=namesys__pb2.NameSysResolveResult.SerializeToString,
      ),
      'NameSysPublish': grpc.unary_unary_rpc_method_handler(
          servicer.NameSysPublish,
          request_deserializer=namesys__pb2.NameSysPublishRequest.FromString,
          response_serializer=util__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.NameSysAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
