# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import dag_pb2 as dag__pb2


class DagAPIStub(object):
  """DagAPI provides an IPLD object manipulation API and is capable of manipulating
  arbitrary IPLD objects, as well as traditional MerkleDAG objects. It is equivalent
  to the go-ipfs `ipfs dag` subset of commands.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Dag = channel.unary_unary(
        '/pb.DagAPI/Dag',
        request_serializer=dag__pb2.DagRequest.SerializeToString,
        response_deserializer=dag__pb2.DagResponse.FromString,
        )
    self.DagStream = channel.stream_stream(
        '/pb.DagAPI/DagStream',
        request_serializer=dag__pb2.DagRequest.SerializeToString,
        response_deserializer=dag__pb2.DagResponse.FromString,
        )


class DagAPIServicer(object):
  """DagAPI provides an IPLD object manipulation API and is capable of manipulating
  arbitrary IPLD objects, as well as traditional MerkleDAG objects. It is equivalent
  to the go-ipfs `ipfs dag` subset of commands.
  """

  def Dag(self, request, context):
    """Dag is a unidirectional rpc allowing manipulation of low-level ipld objects
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DagStream(self, request_iterator, context):
    """DagStream is like Dag but with bidirectional streams
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DagAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Dag': grpc.unary_unary_rpc_method_handler(
          servicer.Dag,
          request_deserializer=dag__pb2.DagRequest.FromString,
          response_serializer=dag__pb2.DagResponse.SerializeToString,
      ),
      'DagStream': grpc.stream_stream_rpc_method_handler(
          servicer.DagStream,
          request_deserializer=dag__pb2.DagRequest.FromString,
          response_serializer=dag__pb2.DagResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.DagAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
